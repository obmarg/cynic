---
source: cynic-querygen/tests/github-tests.rs
expression: "document_to_fragment_structs(query, schema,\n                             &QueryGenOptions::default()).expect(\"QueryGen Failed\")"
---
#[cynic::query_module(
    schema_path = r#"schema.graphql"#,
    query_module = "schema",
)]
mod queries {
    use super::{schema, types::*};

    #[derive(cynic::FragmentArguments, Debug)]
    pub struct CommentOnMutationSupportIssueArguments {
        pub comment_body: String,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "Mutation", argument_struct = "CommentOnMutationSupportIssueArguments")]
    pub struct CommentOnMutationSupportIssue {
        #[arguments(input = AddCommentInput { body: args.comment_body.clone(), subject_id: cynic::Id::new("MDU6SXNzdWU2ODU4NzUxMzQ=") })]
        pub add_comment: Option<AddCommentPayload>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct AddCommentPayload {
        pub comment_edge: Option<IssueCommentEdge>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct IssueCommentEdge {
        pub node: Option<IssueComment>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct IssueComment {
        pub id: cynic::Id,
    }

    #[derive(cynic::InputObject, Debug)]
    pub struct AddCommentInput {
        pub body: String,
        pub subject_id: cynic::Id,
    }

}

#[cynic::query_module(
    schema_path = r#"schema.graphql"#,
    query_module = "schema",
)]
mod types {
    use super::schema;

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct Date(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct DateTime(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct GitObjectID(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct GitRefname(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct GitSSHRemote(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct GitTimestamp(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct Html(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct PreciseDateTime(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct Uri(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct X509Certificate(pub String);

}

mod schema {
    use super::types::*;
    cynic::use_schema!(r#"schema.graphql"#);
}


