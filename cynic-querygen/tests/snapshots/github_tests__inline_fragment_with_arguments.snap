---
source: cynic-querygen/tests/github-tests.rs
assertion_line: 27
expression: "document_to_fragment_structs(query, schema,\n                             &QueryGenOptions::default()).expect(\"QueryGen Failed\")"

---
#[cynic::schema_for_derives(
    file = r#"schema.graphql"#,
    module = "schema",
)]
mod queries {
    use super::schema;

    #[derive(cynic::QueryVariables, Debug)]
    pub struct IssueOrPRArguments {
        pub assignee_count: i32,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "Query", argument_struct = "IssueOrPRArguments")]
    pub struct IssueOrPR {
        #[arguments(owner: "obmarg", name: "cynic")]
        pub repository: Option<Repository>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(argument_struct = "IssueOrPRArguments")]
    pub struct Repository {
        #[arguments(number: 1)]
        pub issue_or_pull_request: Option<IssueOrPullRequest>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(argument_struct = "IssueOrPRArguments")]
    pub struct PullRequest {
        pub id: cynic::Id,
        pub title: String,
        #[arguments(first: $assignee_count)]
        pub assignees: UserConnection,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(argument_struct = "IssueOrPRArguments")]
    pub struct Issue {
        pub id: cynic::Id,
        pub title: String,
        #[arguments(first: $assignee_count)]
        pub assignees: UserConnection,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct UserConnection {
        pub total_count: i32,
    }

    #[derive(cynic::InlineFragments, Debug)]
    #[cynic(argument_struct = "IssueOrPRArguments")]
    pub enum IssueOrPullRequest {
        Issue(Issue),
        PullRequest(PullRequest),
    }

}

mod schema {
    cynic::use_schema!(r#"schema.graphql"#);
}


