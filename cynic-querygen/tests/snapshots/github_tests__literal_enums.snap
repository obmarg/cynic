---
source: cynic-querygen/tests/github-tests.rs
expression: "document_to_fragment_structs(query, schema,\n                             &QueryGenOptions::default()).expect(\"QueryGen Failed\")"
---
#[cynic::query_module(
    schema_path = r#"schema.graphql"#,
    query_module = "schema",
)]
mod queries {
    use super::{schema, types::*};

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "Query")]
    pub struct RepoIssues {
        #[arguments(owner = "obmarg", name = "cynic")]
        pub repository: Option<Repository>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct Repository {
        #[arguments(states = Some(vec![IssueState::Open]), first = 10)]
        pub issues: IssueConnection,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct IssueConnection {
        pub nodes: Option<Vec<Option<Issue>>>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    pub struct Issue {
        pub title: String,
        pub state: IssueState,
    }

    #[derive(cynic::Enum, Clone, Copy, Debug)]
    pub enum IssueState {
        Closed,
        Open,
    }

}

#[cynic::query_module(
    schema_path = r#"schema.graphql"#,
    query_module = "schema",
)]
mod types {
    use super::schema;

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct Date(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct DateTime(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct GitObjectID(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct GitRefname(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct GitSSHRemote(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct GitTimestamp(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct Html(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct PreciseDateTime(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct Uri(pub String);

    #[derive(cynic::Scalar, Debug, Clone)]
    pub struct X509Certificate(pub String);

}

mod schema {
    use super::types::*;
    cynic::use_schema!(r#"schema.graphql"#);
}


