---
source: cynic-querygen/tests/starwars-tests.rs
expression: "document_to_fragment_structs(query, schema,\n                             &QueryGenOptions::default()).expect(\"QueryGen Failed\")"
---
#[cynic::query_module(
    schema_path = "schema.graphql",
    query_module = "query_dsl",
)]
mod queries {
    use super::{query_dsl, types::*};

    #[derive(cynic::FragmentArguments, Clone, Debug)]
    pub struct NestedArgsQueryArguments {
        pub film_id: cynic::Id,
        pub planet_cursor: Option<String>,
        pub resident_connection: Option<String>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "Root", argument_struct = "NestedArgsQueryArguments")]
    pub struct NestedArgsQuery {
        #[arguments(id = args.film_id)]
        pub film: Option<Film>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "Film", argument_struct = "NestedArgsQueryArguments")]
    pub struct Film {
        pub title: Option<String>,
        pub director: Option<String>,
        #[arguments(after = args.planet_cursor)]
        pub planetConnection: Option<FilmPlanetsConnection>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "FilmPlanetsConnection", argument_struct = "NestedArgsQueryArguments")]
    pub struct FilmPlanetsConnection {
        pub planets: Option<Vec<Option<Planet>>>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "Planet", argument_struct = "NestedArgsQueryArguments")]
    pub struct Planet {
        #[arguments(after = args.resident_connection)]
        pub residentConnection: Option<PlanetResidentsConnection>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "PlanetResidentsConnection")]
    pub struct PlanetResidentsConnection {
        pub residents: Option<Vec<Option<Person>>>,
    }

    #[derive(cynic::QueryFragment, Debug)]
    #[cynic(graphql_type = "Person")]
    pub struct Person {
        pub name: Option<String>,
    }

}

#[cynic::query_module(
    schema_path = "schema.graphql",
    query_module = "query_dsl",
)]
mod types {
}

mod query_dsl{
    use super::types::*;
    cynic::query_dsl!("schema.graphql");
}

