---
source: cynic-codegen/src/inline_fragments_derive/tests.rs
expression: "format_code(format!(\"{}\", tokens))"
---
#[automatically_derived]
impl<'de> cynic::serde::Deserialize<'de> for PostOrAuthor {
    fn deserialize<__D>(deserializer: __D) -> Result<Self, __D::Error>
    where
        __D: cynic::serde::Deserializer<'de>,
    {
        deserializer.deserialize_map(cynic::__private::InlineFragmentVisitor::<Self>::new())
    }
}
#[automatically_derived]
impl<'de> cynic::InlineFragments<'de> for PostOrAuthor {
    fn deserialize_variant<__D>(typename: &str, deserializer: __D) -> Result<Self, __D::Error>
    where
        __D: cynic::serde::Deserializer<'de>,
    {
        if Some(typename) == <Post as cynic::QueryFragment>::TYPE {
            return <Post as cynic::serde::Deserialize<'de>>::deserialize(deserializer)
                .map(PostOrAuthor::Post);
        }
        if Some(typename) == <Author as cynic::QueryFragment>::TYPE {
            return <Author as cynic::serde::Deserialize<'de>>::deserialize(deserializer)
                .map(PostOrAuthor::Author);
        }
        <cynic::serde::de::IgnoredAny as cynic::serde::Deserialize<'de>>::deserialize(deserializer)
            .map(|_| PostOrAuthor::Other)
    }
}
#[automatically_derived]
impl cynic::QueryFragment for PostOrAuthor {
    type SchemaType = schema::PostOrAuthor;
    type VariablesFields = ();
    const TYPE: Option<&'static str> = Some("PostOrAuthor");
    fn query(
        mut builder: cynic::queries::SelectionBuilder<'_, Self::SchemaType, Self::VariablesFields>,
    ) {
        let fragment_builder = builder.inline_fragment();
        let mut fragment_builder =
            fragment_builder.on::<<Post as cynic::QueryFragment>::SchemaType>();
        <Post as cynic::QueryFragment>::query(fragment_builder.select_children());
        let fragment_builder = builder.inline_fragment();
        let mut fragment_builder =
            fragment_builder.on::<<Author as cynic::QueryFragment>::SchemaType>();
        <Author as cynic::QueryFragment>::query(fragment_builder.select_children());
    }
}

