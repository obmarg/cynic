---
source: cynic-codegen/src/input_object_derive/tests.rs
assertion_line: 24
expression: "format_code(format!(\"{}\", tokens))"

---
#[automatically_derived]
impl ::cynic::core::InputObject for IssueOrder {
    type SchemaType = schema::IssueOrder;
}
#[automatically_derived]
impl ::cynic::serde::Serialize for IssueOrder {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: ::cynic::serde::Serializer,
    {
        use cynic::serde::ser::SerializeMap;
        ::cynic::assert_impl!(
            OrderDirection: ::cynic::core::Enum<SchemaType = schema::OrderDirection>
        );
        ::cynic::assert_impl!(
            IssueOrderField: ::cynic::core::Enum<SchemaType = schema::IssueOrderField>
        );
        let mut map_serializer = serializer.serialize_map(Some(2usize))?;
        map_serializer.serialize_entry("direction", &self.direction)?;
        map_serializer.serialize_entry("field", &self.field)?;
        map_serializer.end()
    }
}
#[automatically_derived]
impl ::cynic::queries::IntoInputLiteral for IssueOrder {
    fn into_literal(self) -> ::cynic::queries::InputLiteral {
        let mut vec = Vec::new();
        ::cynic::assert_impl!(
            OrderDirection: ::cynic::coercions::CoercesTo<schema::OrderDirection>
        );
        vec.push(::cynic::queries::Argument::new(
            "direction",
            <OrderDirection as ::cynic::queries::IntoInputLiteral>::into_literal(self.direction),
        ));
        ::cynic::assert_impl!(
            IssueOrderField: ::cynic::coercions::CoercesTo<schema::IssueOrderField>
        );
        vec.push(::cynic::queries::Argument::new(
            "field",
            <IssueOrderField as ::cynic::queries::IntoInputLiteral>::into_literal(self.field),
        ));
        ::cynic::queries::InputLiteral::Object(vec)
    }
}
::cynic::impl_coercions!(IssueOrder, schema::IssueOrder);
#[automatically_derived]
impl schema::variable::Variable for IssueOrder {
    const TYPE: ::cynic::core::VariableType = ::cynic::core::VariableType::Named("IssueOrder");
}

