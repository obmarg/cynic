---
source: cynic-codegen/src/fragment_derive/tests.rs
expression: "format_code(format!(\"{}\", tokens))"
---
#[automatically_derived]
impl<'de> ::cynic::QueryFragment<'de> for MyQuery {
    type SchemaType = schema::Query;
    type Variables = ();
    const TYPE: Option<&'static str> = Some("Query");
    fn query(
        mut builder: ::cynic::queries::SelectionBuilder<'_, Self::SchemaType, Self::Variables>,
    ) {
        #![allow(unused_mut)]
        let mut field_builder = builder . select_field :: < schema :: __fields :: Query :: filteredPosts , < Vec < BlogPostOutput > as :: cynic :: QueryFragment < '_ >> :: SchemaType > () ;
        {
            struct PostStatePosted;
            impl ::cynic::serde::Serialize for PostStatePosted {
                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                where
                    S: ::cynic::serde::Serializer,
                {
                    serializer.serialize_unit_variant("", 0, "POSTED")
                }
            }
            impl ::cynic::coercions::CoercesTo<schema::PostState> for PostStatePosted {};
            field_builder
                .argument::<schema::__fields::Query::_filtered_posts_arguments::filters>()
                .value()
                .object()
                .field::<schema::__fields::PostFilters::states, _>(|builder| {
                    builder
                        .value()
                        .list()
                        .item(|builder| builder.literal(PostStatePosted))
                        .item(|builder| builder.literal(PostStatePosted));
                });
        }
        <Vec<BlogPostOutput> as ::cynic::QueryFragment<'_>>::query(field_builder.select_children());
    }
}
#[automatically_derived]
impl<'de> ::cynic::serde::Deserialize<'de> for MyQuery {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::cynic::serde::Deserializer<'de>,
    {
        #[derive(:: cynic :: serde :: Deserialize)]
        #[serde(field_identifier, crate = "::cynic::serde")]
        #[allow(non_camel_case_types)]
        enum Field {
            #[serde(rename = "filteredPosts")]
            filteredPosts,
            #[serde(other)]
            __Other,
        }
        struct Visitor;
        impl<'de> ::cynic::serde::de::Visitor<'de> for Visitor {
            type Value = MyQuery;
            fn expecting(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                formatter.write_str("struct MyQuery")
            }
            fn visit_map<V>(self, mut __map: V) -> Result<MyQuery, V::Error>
            where
                V: ::cynic::serde::de::MapAccess<'de>,
            {
                let mut filteredPosts = None;
                while let Some(__key) = __map.next_key()? {
                    match __key {
                        Field::filteredPosts => {
                            if filteredPosts.is_some() {
                                return Err(::cynic::serde::de::Error::duplicate_field(
                                    "filteredPosts",
                                ));
                            }
                            filteredPosts = Some(__map.next_value()?);
                        }
                        Field::__Other => {
                            __map.next_value::<::cynic::serde::de::IgnoredAny>()?;
                        }
                    }
                }
                let filteredPosts = filteredPosts
                    .ok_or_else(|| ::cynic::serde::de::Error::missing_field("filteredPosts"))?;
                Ok(MyQuery { filteredPosts })
            }
        }
        const FIELDS: &'static [&str] = &["filteredPosts"];
        deserializer.deserialize_struct("MyQuery", FIELDS, Visitor)
    }
}

