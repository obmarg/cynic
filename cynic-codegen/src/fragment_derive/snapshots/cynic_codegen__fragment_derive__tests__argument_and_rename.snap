---
source: cynic-codegen/src/fragment_derive/tests.rs
assertion_line: 114
expression: "format_code(format!(\"{}\", tokens))"
---
#[automatically_derived]
impl<'de> ::cynic::QueryFragment<'de> for MyQuery {
    type SchemaType = schema::Query;
    type Variables = ();
    const TYPE: Option<&'static str> = Some("Query");
    fn query(mut builder: ::cynic::queries::SelectionBuilder<Self::SchemaType, Self::Variables>) {
        #![allow(unused_mut)]
        let mut field_builder = builder . select_field :: < schema :: query_fields :: post , < Option < BlogPostOutput > as :: cynic :: QueryFragment > :: SchemaType > () ;
        {
            field_builder
                .argument::<schema::query_fields::post_arguments::id>()
                .literal("1234");
        }
        <Option<BlogPostOutput> as ::cynic::QueryFragment>::query(field_builder.select_children());
        let mut field_builder = builder . select_field :: < schema :: query_fields :: allPosts , < Vec < BlogPostOutput > as :: cynic :: QueryFragment > :: SchemaType > () ;
        <Vec<BlogPostOutput> as ::cynic::QueryFragment>::query(field_builder.select_children());
    }
}
#[automatically_derived]
impl<'de> ::cynic::serde::Deserialize<'de> for MyQuery {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::cynic::serde::Deserializer<'de>,
    {
        #[derive(:: cynic :: serde :: Deserialize)]
        #[serde(field_identifier, crate = "::cynic::serde")]
        #[allow(non_camel_case_types)]
        enum Field {
            #[serde(rename = "post")]
            post,
            #[serde(rename = "allPosts")]
            posts,
            #[serde(other)]
            __Other,
        }
        struct Visitor;
        impl<'de> ::cynic::serde::de::Visitor<'de> for Visitor {
            type Value = MyQuery;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct MyQuery")
            }
            fn visit_map<V>(self, mut map: V) -> Result<MyQuery, V::Error>
            where
                V: ::cynic::serde::de::MapAccess<'de>,
            {
                let mut post = None;
                let mut posts = None;
                while let Some(key) = map.next_key()? {
                    match key {
                        Field::post => {
                            if post.is_some() {
                                return Err(::cynic::serde::de::Error::duplicate_field("post"));
                            }
                            post = Some(map.next_value()?);
                        }
                        Field::posts => {
                            if posts.is_some() {
                                return Err(::cynic::serde::de::Error::duplicate_field("allPosts"));
                            }
                            posts = Some(map.next_value()?);
                        }
                        Field::__Other => {
                            map.next_value::<::cynic::serde::de::IgnoredAny>()?;
                        }
                    }
                }
                let post = post.ok_or_else(|| ::cynic::serde::de::Error::missing_field("post"))?;
                let posts =
                    posts.ok_or_else(|| ::cynic::serde::de::Error::missing_field("allPosts"))?;
                Ok(MyQuery { post, posts })
            }
        }
        const FIELDS: &'static [&'static str] = &["post", "allPosts"];
        deserializer.deserialize_struct("MyQuery", FIELDS, Visitor)
    }
}

