---
source: cynic-codegen/src/fragment_derive/tests.rs
expression: "format_code(format!(\"{}\", tokens))"
---
#[automatically_derived]
impl ::cynic::QueryFragment for Film {
    type SchemaType = schema::Film;
    type VariablesFields = ();
    const TYPE: Option<&'static str> = Some("Film");
    fn query(
        mut builder: ::cynic::queries::SelectionBuilder<
            '_,
            Self::SchemaType,
            Self::VariablesFields,
        >,
    ) {
        #![allow(unused_mut)]
        <FilmDetails as ::cynic::QueryFragment>::query(builder)
    }
    fn name() -> Option<std::borrow::Cow<'static, str>> {
        Some(std::borrow::Cow::Borrowed("Film"))
    }
}
#[automatically_derived]
impl<'de> ::cynic::serde::Deserialize<'de> for Film {
    fn deserialize<__D>(deserializer: __D) -> Result<Self, __D::Error>
    where
        __D: ::cynic::serde::Deserializer<'de>,
    {
        let spreadable = ::cynic::__private::Spreadable::<__D::Error>::deserialize(deserializer)?;
        Ok(Film {
            details: <FilmDetails as ::cynic::serde::Deserialize<'de>>::deserialize(
                spreadable.spread_deserializer(),
            )?,
        })
    }
}

