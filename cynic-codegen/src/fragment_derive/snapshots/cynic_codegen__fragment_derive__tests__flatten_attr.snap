---
source: cynic-codegen/src/fragment_derive/tests.rs
expression: "format_code(format!(\"{}\", tokens))"
---
#[automatically_derived]
impl<'de> ::cynic::QueryFragment<'de> for Film {
    type SchemaType = schema::Film;
    type Variables = ();
    const TYPE: Option<&'static str> = Some("Film");
    fn query(mut builder: ::cynic::queries::SelectionBuilder<Self::SchemaType, Self::Variables>) {
        #![allow(unused_mut)]
        let mut field_builder = builder . select_flattened_field :: < schema :: __fields :: Film :: producers , < Vec < String > as :: cynic :: schema :: IsScalar < < schema :: __fields :: Film :: producers as :: cynic :: schema :: Field > :: Type >> :: SchemaType , < schema :: __fields :: Film :: producers as :: cynic :: schema :: Field > :: Type , > () ;
    }
}
#[automatically_derived]
impl<'de> ::cynic::serde::Deserialize<'de> for Film {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::cynic::serde::Deserializer<'de>,
    {
        #[derive(:: cynic :: serde :: Deserialize)]
        #[serde(field_identifier, crate = "::cynic::serde")]
        #[allow(non_camel_case_types)]
        enum Field {
            #[serde(rename = "producers")]
            producers,
            #[serde(other)]
            __Other,
        }
        struct Visitor;
        impl<'de> ::cynic::serde::de::Visitor<'de> for Visitor {
            type Value = Film;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct Film")
            }
            fn visit_map<V>(self, mut __map: V) -> Result<Film, V::Error>
            where
                V: ::cynic::serde::de::MapAccess<'de>,
            {
                let mut producers = None;
                while let Some(__key) = __map.next_key()? {
                    match __key {
                        Field::producers => {
                            if producers.is_some() {
                                return Err(::cynic::serde::de::Error::duplicate_field(
                                    "producers",
                                ));
                            }
                            producers = Some(
                                __map
                                    .next_value::<::cynic::__private::Flattened<Vec<String>>>()?
                                    .into_inner(),
                            );
                        }
                        Field::__Other => {
                            __map.next_value::<::cynic::serde::de::IgnoredAny>()?;
                        }
                    }
                }
                let producers = producers
                    .ok_or_else(|| ::cynic::serde::de::Error::missing_field("producers"))?;
                Ok(Film { producers })
            }
        }
        const FIELDS: &'static [&'static str] = &["producers"];
        deserializer.deserialize_struct("Film", FIELDS, Visitor)
    }
}

