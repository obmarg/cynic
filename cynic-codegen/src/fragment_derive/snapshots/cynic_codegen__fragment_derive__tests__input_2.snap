---
source: cynic-codegen/src/fragment_derive/tests.rs
assertion_line: 94
expression: "format_code(format!(\"{}\", tokens))"

---
#[automatically_derived]
impl<'de> ::cynic::QueryFragment<'de> for BlogPostOutput {
    type SchemaType = schema::BlogPost;
    type Variables = ();
    const TYPE: Option<&'static str> = Some("BlogPost");
    fn query(mut builder: ::cynic::queries::SelectionBuilder<Self::SchemaType, Self::Variables>) {
        #![allow(unused_mut)]
        let mut field_builder = builder . select_field :: < schema :: blog_post_fields :: HasMetadata , < Option < bool > as :: cynic :: schema :: IsScalar < < schema :: blog_post_fields :: HasMetadata as :: cynic :: schema :: Field > :: Type >> :: SchemaType > () ;
        let mut field_builder = builder . select_field :: < schema :: blog_post_fields :: Author , < AuthorOutput as :: cynic :: QueryFragment > :: SchemaType > () ;
        <AuthorOutput as ::cynic::QueryFragment>::query(field_builder.select_children());
    }
}
#[automatically_derived]
impl<'de> ::cynic::serde::Deserialize<'de> for BlogPostOutput {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::cynic::serde::Deserializer<'de>,
    {
        #[derive(:: cynic :: serde :: Deserialize)]
        #[serde(field_identifier, crate = "::cynic::serde")]
        #[allow(non_camel_case_types)]
        enum Field {
            #[serde(rename = "hasMetadata")]
            has_metadata,
            #[serde(rename = "author")]
            author,
            #[serde(other)]
            __Other,
        }
        struct Visitor;
        impl<'de> ::cynic::serde::de::Visitor<'de> for Visitor {
            type Value = BlogPostOutput;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct BlogPostOutput")
            }
            fn visit_map<V>(self, mut map: V) -> Result<BlogPostOutput, V::Error>
            where
                V: ::cynic::serde::de::MapAccess<'de>,
            {
                let mut has_metadata = None;
                let mut author = None;
                while let Some(key) = map.next_key()? {
                    match key {
                        Field::has_metadata => {
                            if has_metadata.is_some() {
                                return Err(::cynic::serde::de::Error::duplicate_field(
                                    "hasMetadata",
                                ));
                            }
                            has_metadata = Some(map.next_value()?);
                        }
                        Field::author => {
                            if author.is_some() {
                                return Err(::cynic::serde::de::Error::duplicate_field("author"));
                            }
                            author = Some(map.next_value()?);
                        }
                        Field::__Other => {
                            map.next_value::<::cynic::serde::de::IgnoredAny>()?;
                        }
                    }
                }
                let has_metadata = has_metadata
                    .ok_or_else(|| ::cynic::serde::de::Error::missing_field("hasMetadata"))?;
                let author =
                    author.ok_or_else(|| ::cynic::serde::de::Error::missing_field("author"))?;
                Ok(BlogPostOutput {
                    has_metadata,
                    author,
                })
            }
        }
        const FIELDS: &'static [&'static str] = &["hasMetadata", "author"];
        deserializer.deserialize_struct("BlogPostOutput", FIELDS, Visitor)
    }
}

