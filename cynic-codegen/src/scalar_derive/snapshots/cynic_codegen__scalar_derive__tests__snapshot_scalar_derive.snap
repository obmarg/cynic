---
source: cynic-codegen/src/scalar_derive/tests.rs
expression: "format_code(format!(\"{}\", tokens))"
snapshot_kind: text
---
#[automatically_derived]
impl cynic::serde::Serialize for DateTime {
    fn serialize<__S>(&self, serializer: __S) -> Result<__S::Ok, __S::Error>
    where
        __S: cynic::serde::Serializer,
    {
        <String as cynic::serde::Serialize>::serialize(&self.0, serializer)
    }
}
#[automatically_derived]
impl<'de> cynic::serde::Deserialize<'de> for DateTime {
    fn deserialize<__D>(deserializer: __D) -> Result<Self, __D::Error>
    where
        __D: cynic::serde::Deserializer<'de>,
    {
        <String as cynic::serde::Deserialize<'de>>::deserialize(deserializer).map(Self)
    }
}
#[automatically_derived]
impl cynic::schema::InputScalar<schema::DateTime> for DateTime {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: cynic::serde::Serializer,
    {
        cynic::serde::Serialize::serialize(self, serializer)
    }
}
#[automatically_derived]
impl<'de> cynic::schema::OutputScalar<'de, schema::DateTime> for DateTime {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: cynic::serde::Deserializer<'de>,
    {
        <Self as cynic::serde::Deserialize>::deserialize(deserializer)
    }
}
#[automatically_derived]
impl schema::variable::Variable for DateTime {
    const TYPE: cynic::variables::VariableType = cynic::variables::VariableType::Named("DateTime");
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: cynic::serde::Serializer,
    {
        <Self as cynic::schema::InputScalar<schema::DateTime>>::serialize(self, serializer)
    }
}
cynic :: impl_coercions ! (DateTime [] [] , schema :: DateTime);
