---
source: cynic-codegen/tests/use-schema.rs
assertion_line: 25
expression: "format_code(format!(\"{}\", tokens))"

---
impl ::cynic::schema::QueryRoot for Query {}
pub struct AnInputType;
impl ::cynic::schema::InputObjectMarker for AnInputType {}
pub mod an_input_type_fields {
    pub struct FavouriteDessert;
    impl ::cynic::schema::Field for FavouriteDessert {
        type Type = Option<super::Dessert>;
        const NAME: &'static str = "favouriteDessert";
    }
    impl ::cynic::schema::HasInputField<FavouriteDessert, Option<super::Dessert>>
        for super::AnInputType
    {
    }
}
pub struct Dessert {}
pub struct Json {}
pub struct MyUnionType {}
pub struct Nested;
pub mod nested_fields {
    pub struct AString;
    impl ::cynic::schema::Field for AString {
        type Type = super::String;
        const NAME: &'static str = "aString";
    }
    impl ::cynic::schema::HasField<AString> for super::Nested {
        type Type = super::String;
    }
    pub struct OptString;
    impl ::cynic::schema::Field for OptString {
        type Type = Option<super::String>;
        const NAME: &'static str = "optString";
    }
    impl ::cynic::schema::HasField<OptString> for super::Nested {
        type Type = Option<super::String>;
    }
}
pub struct Query;
pub mod query_fields {
    pub struct TestStruct;
    impl ::cynic::schema::Field for TestStruct {
        type Type = Option<super::TestStruct>;
        const NAME: &'static str = "testStruct";
    }
    impl ::cynic::schema::HasField<TestStruct> for super::Query {
        type Type = Option<super::TestStruct>;
    }
    pub struct MyUnion;
    impl ::cynic::schema::Field for MyUnion {
        type Type = Option<super::MyUnionType>;
        const NAME: &'static str = "myUnion";
    }
    impl ::cynic::schema::HasField<MyUnion> for super::Query {
        type Type = Option<super::MyUnionType>;
    }
}
pub struct TestStruct;
pub mod test_struct_fields {
    pub struct FieldOne;
    impl ::cynic::schema::Field for FieldOne {
        type Type = super::String;
        const NAME: &'static str = "fieldOne";
    }
    impl ::cynic::schema::HasField<FieldOne> for super::TestStruct {
        type Type = super::String;
    }
    pub mod field_one_arguments {
        pub struct X;
        impl ::cynic::schema::HasArgument<X> for super::FieldOne {
            type ArgumentType = Option<super::super::Int>;
            const NAME: &'static str = "x";
        }
        pub struct Y;
        impl ::cynic::schema::HasArgument<Y> for super::FieldOne {
            type ArgumentType = Option<super::super::String>;
            const NAME: &'static str = "y";
        }
    }
    pub struct TastyCakes;
    impl ::cynic::schema::Field for TastyCakes {
        type Type = super::Dessert;
        const NAME: &'static str = "tastyCakes";
    }
    impl ::cynic::schema::HasField<TastyCakes> for super::TestStruct {
        type Type = super::Dessert;
    }
    pub mod tasty_cakes_arguments {
        pub struct First;
        impl ::cynic::schema::HasArgument<First> for super::TastyCakes {
            type ArgumentType = super::super::Dessert;
            const NAME: &'static str = "first";
        }
        pub struct Second;
        impl ::cynic::schema::HasArgument<Second> for super::TastyCakes {
            type ArgumentType = Option<super::super::Dessert>;
            const NAME: &'static str = "second";
        }
    }
    pub struct FieldWithInput;
    impl ::cynic::schema::Field for FieldWithInput {
        type Type = super::Dessert;
        const NAME: &'static str = "fieldWithInput";
    }
    impl ::cynic::schema::HasField<FieldWithInput> for super::TestStruct {
        type Type = super::Dessert;
    }
    pub mod field_with_input_arguments {
        pub struct Input;
        impl ::cynic::schema::HasArgument<Input> for super::FieldWithInput {
            type ArgumentType = super::super::AnInputType;
            const NAME: &'static str = "input";
        }
    }
    pub struct Nested;
    impl ::cynic::schema::Field for Nested {
        type Type = super::Nested;
        const NAME: &'static str = "nested";
    }
    impl ::cynic::schema::HasField<Nested> for super::TestStruct {
        type Type = super::Nested;
    }
    pub struct OptNested;
    impl ::cynic::schema::Field for OptNested {
        type Type = Option<super::Nested>;
        const NAME: &'static str = "optNested";
    }
    impl ::cynic::schema::HasField<OptNested> for super::TestStruct {
        type Type = Option<super::Nested>;
    }
    pub struct Dessert;
    impl ::cynic::schema::Field for Dessert {
        type Type = Option<super::Dessert>;
        const NAME: &'static str = "dessert";
    }
    impl ::cynic::schema::HasField<Dessert> for super::TestStruct {
        type Type = Option<super::Dessert>;
    }
    pub struct Json;
    impl ::cynic::schema::Field for Json {
        type Type = Option<super::Json>;
        const NAME: &'static str = "json";
    }
    impl ::cynic::schema::HasField<Json> for super::TestStruct {
        type Type = Option<super::Json>;
    }
}
impl ::cynic::schema::HasSubtype<Nested> for MyUnionType {}
impl ::cynic::schema::HasSubtype<TestStruct> for MyUnionType {}
impl ::cynic::schema::NamedType for MyUnionType {
    const NAME: &'static str = "MyUnionType";
}
impl ::cynic::schema::NamedType for Nested {
    const NAME: &'static str = "Nested";
}
impl ::cynic::schema::NamedType for Query {
    const NAME: &'static str = "Query";
}
impl ::cynic::schema::NamedType for TestStruct {
    const NAME: &'static str = "TestStruct";
}
pub type Boolean = bool;
pub type String = std::string::String;
pub type Float = f64;
pub type Int = i32;
pub type Id = ::cynic::Id;
pub mod variable {
    use cynic::variables::VariableType;
    #[doc = r" Used to determine the type of a given variable that"]
    #[doc = r" appears in an argument struct."]
    pub trait Variable {
        const TYPE: VariableType;
    }
    impl<T> Variable for &T
    where
        T: Variable,
    {
        const TYPE: VariableType = T::TYPE;
    }
    impl<T> Variable for Option<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = VariableType::Nullable(&T::TYPE);
    }
    impl<T> Variable for Vec<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = VariableType::List(&T::TYPE);
    }
    impl<T> Variable for Box<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = T::TYPE;
    }
    impl<T> Variable for std::rc::Rc<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = T::TYPE;
    }
    impl<T> Variable for std::sync::Arc<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = T::TYPE;
    }
    impl Variable for bool {
        const TYPE: VariableType = VariableType::Named("Boolean");
    }
    impl Variable for String {
        const TYPE: VariableType = VariableType::Named("String");
    }
    impl Variable for f64 {
        const TYPE: VariableType = VariableType::Named("Float");
    }
    impl Variable for i32 {
        const TYPE: VariableType = VariableType::Named("Int");
    }
    impl Variable for ::cynic::Id {
        const TYPE: VariableType = VariableType::Named("ID");
    }
}

