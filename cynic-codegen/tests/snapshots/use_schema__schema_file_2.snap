---
source: cynic-codegen/tests/use-schema.rs
expression: "format_code(format!(\"{}\", tokens))"

---
#[allow(dead_code)]
pub struct Book;
#[allow(dead_code)]
impl Book {
    pub fn id() -> book::IdSelectionBuilder {
        book::IdSelectionBuilder::new(vec![])
    }
    pub fn name() -> book::NameSelectionBuilder {
        book::NameSelectionBuilder::new(vec![])
    }
    pub fn author() -> book::AuthorSelectionBuilder {
        book::AuthorSelectionBuilder::new(vec![])
    }
}
#[allow(dead_code)]
pub struct BookChanged;
#[allow(dead_code)]
impl BookChanged {
    pub fn mutation_type() -> book_changed::MutationTypeSelectionBuilder {
        book_changed::MutationTypeSelectionBuilder::new(vec![])
    }
    pub fn id() -> book_changed::IdSelectionBuilder {
        book_changed::IdSelectionBuilder::new(vec![])
    }
    pub fn book() -> book_changed::BookSelectionBuilder {
        book_changed::BookSelectionBuilder::new(vec![])
    }
}
#[allow(dead_code)]
pub struct MutationRoot;
#[allow(dead_code)]
impl MutationRoot {
    pub fn create_book(
        name: impl ::cynic::InputType<String, ::cynic::inputs::NamedType>,
        author: impl ::cynic::InputType<String, ::cynic::inputs::NamedType>,
    ) -> mutation_root::CreateBookSelectionBuilder {
        mutation_root::CreateBookSelectionBuilder::new(vec![
            ::cynic::Argument::new("name", "String!", ::cynic::serde_json::to_value(&name)),
            ::cynic::Argument::new("author", "String!", ::cynic::serde_json::to_value(&author)),
        ])
    }
    pub fn delete_book(
        id: impl ::cynic::InputType<::cynic::Id, ::cynic::inputs::NamedType>,
    ) -> mutation_root::DeleteBookSelectionBuilder {
        mutation_root::DeleteBookSelectionBuilder::new(vec![::cynic::Argument::new(
            "id",
            "ID!",
            ::cynic::serde_json::to_value(&id),
        )])
    }
}
#[allow(dead_code)]
pub struct QueryRoot;
#[allow(dead_code)]
impl QueryRoot {
    pub fn books() -> query_root::BooksSelectionBuilder {
        query_root::BooksSelectionBuilder::new(vec![])
    }
}
#[allow(dead_code)]
pub struct SubscriptionRoot;
#[allow(dead_code)]
impl SubscriptionRoot {
    pub fn interval(
        n: impl ::cynic::InputType<i32, ::cynic::inputs::NamedType>,
    ) -> subscription_root::IntervalSelectionBuilder {
        subscription_root::IntervalSelectionBuilder::new(vec![::cynic::Argument::new(
            "n",
            "Int!",
            ::cynic::serde_json::to_value(&n),
        )])
    }
    pub fn books() -> subscription_root::BooksSelectionBuilder {
        subscription_root::BooksSelectionBuilder::new(vec![])
    }
}
#[allow(dead_code)]
pub mod book {
    pub struct IdSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl IdSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            IdSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, String>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::Book> {
            ::cynic::selection_set::field("id", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, String>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::Book> {
            ::cynic::selection_set::field_alias("id", alias, self.args, inner)
        }
    }
    pub struct NameSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl NameSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            NameSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, String>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::Book> {
            ::cynic::selection_set::field("name", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, String>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::Book> {
            ::cynic::selection_set::field_alias("name", alias, self.args, inner)
        }
    }
    pub struct AuthorSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl AuthorSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            AuthorSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, String>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::Book> {
            ::cynic::selection_set::field("author", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, String>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::Book> {
            ::cynic::selection_set::field_alias("author", alias, self.args, inner)
        }
    }
}
#[allow(dead_code)]
pub mod book_changed {
    pub struct MutationTypeSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl MutationTypeSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            MutationTypeSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, super::MutationType>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::BookChanged> {
            ::cynic::selection_set::field("mutationType", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, super::MutationType>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::BookChanged> {
            ::cynic::selection_set::field_alias("mutationType", alias, self.args, inner)
        }
    }
    pub struct IdSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl IdSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            IdSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, ::cynic::Id>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::BookChanged> {
            ::cynic::selection_set::field("id", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, ::cynic::Id>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::BookChanged> {
            ::cynic::selection_set::field_alias("id", alias, self.args, inner)
        }
    }
    pub struct BookSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl BookSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            BookSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            fields: ::cynic::selection_set::SelectionSet<'a, T, super::Book>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::BookChanged> {
            ::cynic::selection_set::field("book", self.args, ::cynic::selection_set::option(fields))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            fields: ::cynic::selection_set::SelectionSet<'a, T, super::Book>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::BookChanged> {
            ::cynic::selection_set::field_alias(
                "book",
                alias,
                self.args,
                ::cynic::selection_set::option(fields),
            )
        }
    }
}
#[allow(dead_code)]
pub mod mutation_root {
    pub struct CreateBookSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl CreateBookSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            CreateBookSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, ::cynic::Id>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::MutationRoot> {
            ::cynic::selection_set::field("createBook", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, ::cynic::Id>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::MutationRoot> {
            ::cynic::selection_set::field_alias("createBook", alias, self.args, inner)
        }
    }
    pub struct DeleteBookSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl DeleteBookSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            DeleteBookSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::MutationRoot> {
            ::cynic::selection_set::field("deleteBook", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::MutationRoot> {
            ::cynic::selection_set::field_alias("deleteBook", alias, self.args, inner)
        }
    }
}
#[allow(dead_code)]
pub mod query_root {
    pub struct BooksSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl BooksSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            BooksSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            fields: ::cynic::selection_set::SelectionSet<'a, T, super::Book>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Vec<T>, super::QueryRoot> {
            ::cynic::selection_set::field("books", self.args, ::cynic::selection_set::vec(fields))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            fields: ::cynic::selection_set::SelectionSet<'a, T, super::Book>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Vec<T>, super::QueryRoot> {
            ::cynic::selection_set::field_alias(
                "books",
                alias,
                self.args,
                ::cynic::selection_set::vec(fields),
            )
        }
    }
}
#[allow(dead_code)]
pub mod subscription_root {
    pub struct IntervalSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl IntervalSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            IntervalSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, i32>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::SubscriptionRoot> {
            ::cynic::selection_set::field("interval", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, i32>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::SubscriptionRoot> {
            ::cynic::selection_set::field_alias("interval", alias, self.args, inner)
        }
    }
    pub struct BooksSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl BooksSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            BooksSelectionBuilder { args }
        }
        pub fn mutation_type(
            mut self,
            mutation_type: impl ::cynic::InputType<
                super::MutationType,
                ::cynic::inputs::Nullable<::cynic::inputs::NamedType>,
            >,
        ) -> Self {
            self.args.push(::cynic::Argument::new(
                "mutationType",
                "MutationType",
                ::cynic::serde_json::to_value(&mutation_type),
            ));
            self
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            fields: ::cynic::selection_set::SelectionSet<'a, T, super::BookChanged>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::SubscriptionRoot> {
            ::cynic::selection_set::field("books", self.args, fields)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            fields: ::cynic::selection_set::SelectionSet<'a, T, super::BookChanged>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::SubscriptionRoot> {
            ::cynic::selection_set::field_alias("books", alias, self.args, fields)
        }
    }
}
#[allow(dead_code)]
pub enum MutationType {}
impl ::cynic::MutationRoot for MutationRoot {}
impl ::cynic::QueryRoot for QueryRoot {}
impl ::cynic::SubscriptionRoot for SubscriptionRoot {}

