---
source: cynic-codegen/tests/use-schema.rs
expression: "format_code(format!(\"{}\", tokens))"

---
#[allow(dead_code)]
pub struct Foo;
#[allow(dead_code)]
impl Foo {
    pub fn __underscore() -> foo::SelectionBuilder {
        foo::SelectionBuilder::new(vec![])
    }
    pub fn self_() -> foo::SelfSelectionBuilder {
        foo::SelfSelectionBuilder::new(vec![])
    }
    pub fn super_() -> foo::SuperSelectionBuilder {
        foo::SuperSelectionBuilder::new(vec![])
    }
    pub fn crate_() -> foo::CrateSelectionBuilder {
        foo::CrateSelectionBuilder::new(vec![])
    }
    pub fn r#async() -> foo::AsyncSelectionBuilder {
        foo::AsyncSelectionBuilder::new(vec![])
    }
    pub fn bar(
        id: impl ::cynic::InputType<Uuid, ::cynic::inputs::NamedType>,
    ) -> foo::BarSelectionBuilder {
        foo::BarSelectionBuilder::new(vec![::cynic::Argument::new(
            "id",
            "UUID!",
            ::cynic::serde_json::to_value(&id),
        )])
    }
}
#[allow(dead_code)]
pub struct Bar;
#[allow(dead_code)]
impl Bar {
    pub fn id() -> bar::IdSelectionBuilder {
        bar::IdSelectionBuilder::new(vec![])
    }
    pub fn name() -> bar::NameSelectionBuilder {
        bar::NameSelectionBuilder::new(vec![])
    }
}
#[allow(dead_code)]
pub mod foo {
    pub struct SelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl SelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            SelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field("_", self.args, ::cynic::selection_set::option(inner))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field_alias(
                "_",
                alias,
                self.args,
                ::cynic::selection_set::option(inner),
            )
        }
    }
    pub struct SelfSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl SelfSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            SelfSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field("self", self.args, ::cynic::selection_set::option(inner))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field_alias(
                "self",
                alias,
                self.args,
                ::cynic::selection_set::option(inner),
            )
        }
    }
    pub struct SuperSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl SuperSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            SuperSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field("super", self.args, ::cynic::selection_set::option(inner))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field_alias(
                "super",
                alias,
                self.args,
                ::cynic::selection_set::option(inner),
            )
        }
    }
    pub struct CrateSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl CrateSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            CrateSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field("crate", self.args, ::cynic::selection_set::option(inner))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field_alias(
                "crate",
                alias,
                self.args,
                ::cynic::selection_set::option(inner),
            )
        }
    }
    pub struct AsyncSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl AsyncSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            AsyncSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field("async", self.args, ::cynic::selection_set::option(inner))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, bool>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field_alias(
                "async",
                alias,
                self.args,
                ::cynic::selection_set::option(inner),
            )
        }
    }
    pub struct BarSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl BarSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            BarSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            fields: ::cynic::selection_set::SelectionSet<'a, T, super::Bar>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field("bar", self.args, ::cynic::selection_set::option(fields))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            fields: ::cynic::selection_set::SelectionSet<'a, T, super::Bar>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Foo> {
            ::cynic::selection_set::field_alias(
                "bar",
                alias,
                self.args,
                ::cynic::selection_set::option(fields),
            )
        }
    }
}
#[allow(dead_code)]
pub mod bar {
    pub struct IdSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl IdSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            IdSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, super::Uuid>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::Bar> {
            ::cynic::selection_set::field("id", self.args, inner)
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, super::Uuid>,
        ) -> ::cynic::selection_set::SelectionSet<'a, T, super::Bar> {
            ::cynic::selection_set::field_alias("id", alias, self.args, inner)
        }
    }
    pub struct NameSelectionBuilder {
        args: Vec<::cynic::Argument>,
    }
    impl NameSelectionBuilder {
        pub(super) fn new(args: Vec<::cynic::Argument>) -> Self {
            NameSelectionBuilder { args }
        }
        pub fn select<'a, T: 'a + Send + Sync>(
            self,
            inner: ::cynic::selection_set::SelectionSet<'a, T, String>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Bar> {
            ::cynic::selection_set::field("name", self.args, ::cynic::selection_set::option(inner))
        }
        pub fn select_aliased<'a, T: 'a + Send + Sync>(
            self,
            alias: &str,
            inner: ::cynic::selection_set::SelectionSet<'a, T, String>,
        ) -> ::cynic::selection_set::SelectionSet<'a, Option<T>, super::Bar> {
            ::cynic::selection_set::field_alias(
                "name",
                alias,
                self.args,
                ::cynic::selection_set::option(inner),
            )
        }
    }
}
#[allow(dead_code)]
pub enum Uuid {}
impl ::cynic::QueryRoot for Foo {}

