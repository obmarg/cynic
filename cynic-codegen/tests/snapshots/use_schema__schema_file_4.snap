---
source: cynic-codegen/tests/use-schema.rs
assertion_line: 25
expression: "format_code(format!(\"{}\", tokens))"

---
impl ::cynic::schema::QueryRoot for Foo {}
pub struct Bar;
pub mod bar_fields {
    pub struct id;
    impl ::cynic::schema::Field for id {
        type Type = super::UUID;
        const NAME: &'static str = "id";
    }
    impl ::cynic::schema::HasField<id> for super::Bar {
        type Type = super::UUID;
    }
    pub struct name;
    impl ::cynic::schema::Field for name {
        type Type = Option<super::String>;
        const NAME: &'static str = "name";
    }
    impl ::cynic::schema::HasField<name> for super::Bar {
        type Type = Option<super::String>;
    }
}
pub struct Foo;
pub mod foo_fields {
    pub struct _Underscore;
    impl ::cynic::schema::Field for _Underscore {
        type Type = Option<super::Boolean>;
        const NAME: &'static str = "_";
    }
    impl ::cynic::schema::HasField<_Underscore> for super::Foo {
        type Type = Option<super::Boolean>;
    }
    pub struct self_;
    impl ::cynic::schema::Field for self_ {
        type Type = Option<super::Boolean>;
        const NAME: &'static str = "self";
    }
    impl ::cynic::schema::HasField<self_> for super::Foo {
        type Type = Option<super::Boolean>;
    }
    pub struct super_;
    impl ::cynic::schema::Field for super_ {
        type Type = Option<super::Boolean>;
        const NAME: &'static str = "super";
    }
    impl ::cynic::schema::HasField<super_> for super::Foo {
        type Type = Option<super::Boolean>;
    }
    pub struct crate_;
    impl ::cynic::schema::Field for crate_ {
        type Type = Option<super::Boolean>;
        const NAME: &'static str = "crate";
    }
    impl ::cynic::schema::HasField<crate_> for super::Foo {
        type Type = Option<super::Boolean>;
    }
    pub struct r#async;
    impl ::cynic::schema::Field for r#async {
        type Type = Option<super::Boolean>;
        const NAME: &'static str = "async";
    }
    impl ::cynic::schema::HasField<r#async> for super::Foo {
        type Type = Option<super::Boolean>;
    }
    pub struct bar;
    impl ::cynic::schema::Field for bar {
        type Type = Option<super::Bar>;
        const NAME: &'static str = "bar";
    }
    impl ::cynic::schema::HasField<bar> for super::Foo {
        type Type = Option<super::Bar>;
    }
    pub mod bar_arguments {
        pub struct id;
        impl ::cynic::schema::HasArgument<id> for super::bar {
            type ArgumentType = super::super::UUID;
            const NAME: &'static str = "id";
        }
    }
    pub struct fieldWithKeywordArg;
    impl ::cynic::schema::Field for fieldWithKeywordArg {
        type Type = Vec<super::Int>;
        const NAME: &'static str = "fieldWithKeywordArg";
    }
    impl ::cynic::schema::HasField<fieldWithKeywordArg> for super::Foo {
        type Type = Vec<super::Int>;
    }
    pub mod field_with_keyword_arg_arguments {
        pub struct r#where;
        impl ::cynic::schema::HasArgument<r#where> for super::fieldWithKeywordArg {
            type ArgumentType = Option<super::super::Int>;
            const NAME: &'static str = "where";
        }
    }
}
pub struct States {}
pub struct UUID {}
impl ::cynic::schema::NamedType for Bar {
    const NAME: &'static str = "Bar";
}
impl ::cynic::schema::NamedType for Foo {
    const NAME: &'static str = "Foo";
}
pub type Boolean = bool;
pub type String = std::string::String;
pub type Float = f64;
pub type Int = i32;
pub type ID = ::cynic::Id;
pub mod variable {
    use cynic::variables::VariableType;
    #[doc = r" Used to determine the type of a given variable that"]
    #[doc = r" appears in an argument struct."]
    pub trait Variable {
        const TYPE: VariableType;
    }
    impl<T> Variable for &T
    where
        T: Variable,
    {
        const TYPE: VariableType = T::TYPE;
    }
    impl<T> Variable for Option<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = VariableType::Nullable(&T::TYPE);
    }
    impl<T> Variable for Vec<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = VariableType::List(&T::TYPE);
    }
    impl<T> Variable for Box<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = T::TYPE;
    }
    impl<T> Variable for std::rc::Rc<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = T::TYPE;
    }
    impl<T> Variable for std::sync::Arc<T>
    where
        T: Variable,
    {
        const TYPE: VariableType = T::TYPE;
    }
    impl Variable for bool {
        const TYPE: VariableType = VariableType::Named("Boolean");
    }
    impl Variable for String {
        const TYPE: VariableType = VariableType::Named("String");
    }
    impl Variable for f64 {
        const TYPE: VariableType = VariableType::Named("Float");
    }
    impl Variable for i32 {
        const TYPE: VariableType = VariableType::Named("Int");
    }
    impl Variable for ::cynic::Id {
        const TYPE: VariableType = VariableType::Named("ID");
    }
}

