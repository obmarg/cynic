---
source: cynic-parser/tests/actual_schemas.rs
assertion_line: 34
expression: parsed.to_sdl()
---
directive @requiredCapabilities(requiredCapabilities: [String!]
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

""""""
directive @preview(
  """  The identifier of the API preview that toggles this field."""
  toggledBy: String!
) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

""""""
directive @possibleTypes(
  """  Abstract type of accepted global ID"""
  abstractType: String
  
  """  Accepted types of global IDs."""
  concreteTypes: [String!]!
) on INPUT_FIELD_DEFINITION

""""""
input AbortQueuedMigrationsInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the organization that is running the migrations."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type AbortQueuedMigrationsPayload {
  clientMutationId: String
  success: Boolean
}

""""""
input AcceptEnterpriseAdministratorInvitationInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The id of the invitation being accepted"""
  invitationId: ID! @possibleTypes(concreteTypes: [
      "EnterpriseAdministratorInvitation"
    ])
}

""""""
type AcceptEnterpriseAdministratorInvitationPayload {
  clientMutationId: String
  invitation: EnterpriseAdministratorInvitation
  message: String
}

""""""
input AcceptTopicSuggestionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of the suggested topic."""
  name: String!
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type AcceptTopicSuggestionPayload {
  clientMutationId: String
  topic: Topic
}

""""""
interface Actor {
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  login: String!
  resourcePath: URI!
  url: URI!
}

""""""
type ActorLocation {
  city: String
  country: String
  countryCode: String
  region: String
  regionCode: String
}

""""""
enum ActorType {
  TEAM
  USER
}

""""""
input AddAssigneesToAssignableInput {
  
  """  The id of the assignable object to add assignees to."""
  assignableId: ID! @possibleTypes(concreteTypes: [
      "Issue", "PullRequest"
    ]
    abstractType: "Assignable")
  
  """  The id of users to add as assignees."""
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

""""""
type AddAssigneesToAssignablePayload {
  assignable: Assignable
  clientMutationId: String
}

""""""
input AddCommentInput {
  
  """  The contents of the comment."""
  body: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: [
      "Issue", "PullRequest"
    ]
    abstractType: "IssueOrPullRequest")
}

""""""
type AddCommentPayload {
  clientMutationId: String
  commentEdge: IssueCommentEdge
  subject: Node
  timelineEdge: IssueTimelineItemEdge
}

""""""
input AddDiscussionCommentInput {
  
  """  The contents of the comment."""
  body: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion to comment on."""
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
  
  """  The Node ID of the discussion comment within this discussion to reply to."""
  replyToId: ID @possibleTypes(concreteTypes: ["DiscussionComment"])
}

""""""
type AddDiscussionCommentPayload {
  clientMutationId: String
  comment: DiscussionComment
}

""""""
input AddDiscussionPollVoteInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion poll option to vote for."""
  pollOptionId: ID! @possibleTypes(concreteTypes: ["DiscussionPollOption"])
}

""""""
type AddDiscussionPollVotePayload {
  clientMutationId: String
  pollOption: DiscussionPollOption
}

""""""
input AddEnterpriseOrganizationMemberInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise which owns the organization."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The ID of the organization the users will be added to."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
  
  """  The role to assign the users in the organization"""
  role: OrganizationMemberRole
  
  """  The IDs of the enterprise members to add."""
  userIds: [ID!]!
}

""""""
type AddEnterpriseOrganizationMemberPayload {
  clientMutationId: String
  users: [User!]
}

""""""
input AddEnterpriseSupportEntitlementInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The login of a member who will receive the support entitlement."""
  login: String!
}

""""""
type AddEnterpriseSupportEntitlementPayload {
  clientMutationId: String
  message: String
}

""""""
input AddLabelsToLabelableInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ids of the labels to add."""
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])
  
  """  The id of the labelable object to add labels to."""
  labelableId: ID! @possibleTypes(concreteTypes: [
      "Discussion", "Issue", "PullRequest"
    ]
    abstractType: "Labelable")
}

""""""
type AddLabelsToLabelablePayload {
  clientMutationId: String
  labelable: Labelable
}

""""""
input AddProjectCardInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The content of the card. Must be a member of the ProjectCardItem union"""
  contentId: ID @possibleTypes(concreteTypes: [
      "Issue", "PullRequest"
    ]
    abstractType: "ProjectCardItem")
  
  """  The note on the card."""
  note: String
  
  """  The Node ID of the ProjectColumn."""
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

""""""
type AddProjectCardPayload {
  cardEdge: ProjectCardEdge
  clientMutationId: String
  projectColumn: ProjectColumn
}

""""""
input AddProjectColumnInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of the column."""
  name: String!
  
  """  The Node ID of the project."""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

""""""
type AddProjectColumnPayload {
  clientMutationId: String
  columnEdge: ProjectColumnEdge
  project: Project
}

""""""
input AddProjectV2DraftIssueInput {
  
  """  The IDs of the assignees of the draft issue."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  
  """  The body of the draft issue."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Project to add the draft issue to."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  The title of the draft issue. A project item can also be created by providing
  the URL of an Issue or Pull Request if you have access."""
  title: String!
}

""""""
type AddProjectV2DraftIssuePayload {
  clientMutationId: String
  projectItem: ProjectV2Item
}

""""""
input AddProjectV2ItemByIdInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The id of the Issue or Pull Request to add."""
  contentId: ID! @possibleTypes(concreteTypes: [
      "DraftIssue", "Issue", "PullRequest"
    ]
    abstractType: "ProjectV2ItemContent")
  
  """  The ID of the Project to add the item to."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type AddProjectV2ItemByIdPayload {
  clientMutationId: String
  item: ProjectV2Item
}

""""""
input AddPullRequestReviewCommentInput {
  
  """  The text of the comment. This field is required

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation"""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The SHA of the commit to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation"""
  commitOID: GitObjectID
  
  """  The comment id to reply to.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation"""
  inReplyTo: ID @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
  
  """  The relative path of the file to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation"""
  path: String
  
  """  The line index in the diff to comment on.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation"""
  position: Int
  
  """  The node ID of the pull request reviewing

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation"""
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])
  
  """  The Node ID of the review to modify.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `pullRequestReviewId` will be removed. use
  addPullRequestReviewThread or addPullRequestReviewThreadReply instead
  **Reason:** We are deprecating the addPullRequestReviewComment mutation"""
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

""""""
type AddPullRequestReviewCommentPayload {
  clientMutationId: String
  comment: PullRequestReviewComment
  commentEdge: PullRequestReviewCommentEdge
}

""""""
input AddPullRequestReviewInput {
  
  """  The contents of the review body comment."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The review line comments.

  **Upcoming Change on 2023-10-01 UTC**
  **Description:** `comments` will be removed. use the `threads` argument instead
  **Reason:** We are deprecating comment fields that use diff-relative positioning"""
  comments: [DraftPullRequestReviewComment]
  
  """  The commit OID the review pertains to."""
  commitOID: GitObjectID
  
  """  The event to perform on the pull request review."""
  event: PullRequestReviewEvent
  
  """  The Node ID of the pull request to modify."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  
  """  The review line comment threads."""
  threads: [DraftPullRequestReviewThread]
}

""""""
type AddPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
  reviewEdge: PullRequestReviewEdge
}

""""""
input AddPullRequestReviewThreadInput {
  
  """  Body of the thread's first comment."""
  body: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The line of the blob to which the thread refers, required for line-level
  threads. The end of the line range for multi-line comments."""
  line: Int
  
  """  Path to the file being commented on."""
  path: String!
  
  """  The node ID of the pull request reviewing"""
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])
  
  """  The Node ID of the review to modify."""
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
  
  """  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range."""
  side: DiffSide = RIGHT
  
  """  The first line of the range to which the comment refers."""
  startLine: Int
  
  """  The side of the diff on which the start line resides."""
  startSide: DiffSide = RIGHT
  
  """  The level at which the comments in the corresponding thread are targeted, can be a diff line or a file"""
  subjectType: PullRequestReviewThreadSubjectType = LINE
}

""""""
type AddPullRequestReviewThreadPayload {
  clientMutationId: String
  thread: PullRequestReviewThread
}

""""""
input AddPullRequestReviewThreadReplyInput {
  
  """  The text of the reply."""
  body: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the pending review to which the reply will belong."""
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
  
  """  The Node ID of the thread to which this reply is being written."""
  pullRequestReviewThreadId: ID! @possibleTypes(concreteTypes: [
      "PullRequestReviewThread"
    ])
}

""""""
type AddPullRequestReviewThreadReplyPayload {
  clientMutationId: String
  comment: PullRequestReviewComment
}

""""""
input AddReactionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of the emoji to react with."""
  content: ReactionContent!
  
  """  The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: [
      "CommitComment",
      "Discussion",
      "DiscussionComment",
      "Issue",
      "IssueComment",
      "PullRequest",
      "PullRequestReview",
      "PullRequestReviewComment",
      "Release",
      "TeamDiscussion",
      "TeamDiscussionComment"
    ]
    abstractType: "Reactable")
}

""""""
type AddReactionPayload {
  clientMutationId: String
  reaction: Reaction
  reactionGroups: [ReactionGroup!]
  subject: Reactable
}

""""""
input AddStarInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Starrable ID to star."""
  starrableId: ID! @possibleTypes(concreteTypes: [
      "Gist", "Repository", "Topic"
    ]
    abstractType: "Starrable")
}

""""""
type AddStarPayload {
  clientMutationId: String
  starrable: Starrable
}

""""""
input AddUpvoteInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion or comment to upvote."""
  subjectId: ID! @possibleTypes(concreteTypes: [
      "Discussion", "DiscussionComment"
    ]
    abstractType: "Votable")
}

""""""
type AddUpvotePayload {
  clientMutationId: String
  subject: Votable
}

""""""
input AddVerifiableDomainInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The URL of the domain"""
  domain: URI!
  
  """  The ID of the owner to add the domain to"""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "Enterprise", "Organization"
    ]
    abstractType: "VerifiableDomainOwner")
}

""""""
type AddVerifiableDomainPayload {
  clientMutationId: String
  domain: VerifiableDomain
}

""""""
type AddedToMergeQueueEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  enqueuer: User
  id: ID!
  mergeQueue: MergeQueue
  pullRequest: PullRequest
}

""""""
type AddedToProjectEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  project: Project @preview(toggledBy: "starfox-preview")
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

""""""
interface AnnouncementBanner {
  announcement: String
  announcementExpiresAt: DateTime
  announcementUserDismissible: Boolean
}

""""""
type App implements Node {
  createdAt: DateTime!
  databaseId: Int
  description: String
  id: ID!
  ipAllowListEntries(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for IP allow list entries returned."""
    orderBy: IpAllowListEntryOrder = { field: ALLOW_LIST_VALUE, direction: ASC }
  ): IpAllowListEntryConnection!
  logoBackgroundColor: String!
  logoUrl(
    """    The size of the resulting image."""
    size: Int
  ): URI!
  name: String!
  slug: String!
  updatedAt: DateTime!
  url: URI!
}

""""""
input ApproveDeploymentsInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Optional comment for approving deployments"""
  comment: String = ""
  
  """  The ids of environments to reject deployments"""
  environmentIds: [ID!]!
  
  """  The node ID of the workflow run containing the pending deployments."""
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

""""""
type ApproveDeploymentsPayload {
  clientMutationId: String
  deployments: [Deployment!]
}

""""""
input ApproveVerifiableDomainInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the verifiable domain to approve."""
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

""""""
type ApproveVerifiableDomainPayload {
  clientMutationId: String
  domain: VerifiableDomain
}

""""""
input ArchiveProjectV2ItemInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the ProjectV2Item to archive."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  
  """  The ID of the Project to archive the item from."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type ArchiveProjectV2ItemPayload {
  clientMutationId: String
  item: ProjectV2Item
}

""""""
input ArchiveRepositoryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the repository to mark as archived."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type ArchiveRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

""""""
interface Assignable {
  assignees(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
}

""""""
type AssignedEvent implements Node {
  actor: Actor
  assignable: Assignable!
  assignee: Assignee
  createdAt: DateTime!
  id: ID!
  user: User @deprecated(
    reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC."
  )
}

""""""
union Assignee = Bot | Mannequin | Organization | User

""""""
interface AuditEntry {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  operationType: OperationType
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
union AuditEntryActor = Bot | Organization | User

""""""
input AuditLogOrder {
  
  """  The ordering direction."""
  direction: OrderDirection
  
  """  The field to order Audit Logs by."""
  field: AuditLogOrderField
}

""""""
enum AuditLogOrderField {
  CREATED_AT
}

""""""
type AutoMergeDisabledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  disabler: User
  id: ID!
  pullRequest: PullRequest
  reason: String
  reasonCode: String
}

""""""
type AutoMergeEnabledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  enabler: User
  id: ID!
  pullRequest: PullRequest
}

""""""
type AutoMergeRequest {
  authorEmail: String
  commitBody: String
  commitHeadline: String
  enabledAt: DateTime
  enabledBy: Actor
  mergeMethod: PullRequestMergeMethod!
  pullRequest: PullRequest!
}

""""""
type AutoRebaseEnabledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  enabler: User
  id: ID!
  pullRequest: PullRequest
}

""""""
type AutoSquashEnabledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  enabler: User
  id: ID!
  pullRequest: PullRequest
}

""""""
type AutomaticBaseChangeFailedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  newBase: String!
  oldBase: String!
  pullRequest: PullRequest!
}

""""""
type AutomaticBaseChangeSucceededEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  newBase: String!
  oldBase: String!
  pullRequest: PullRequest!
}

""""""
scalar Base64String

""""""
type BaseRefChangedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  currentRefName: String!
  databaseId: Int
  id: ID!
  previousRefName: String!
  pullRequest: PullRequest!
}

""""""
type BaseRefDeletedEvent implements Node {
  actor: Actor
  baseRefName: String
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest
}

""""""
type BaseRefForcePushedEvent implements Node {
  actor: Actor
  afterCommit: Commit
  beforeCommit: Commit
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  ref: Ref
}

""""""
scalar BigInt

""""""
type Blame {
  ranges: [BlameRange!]!
}

""""""
type BlameRange {
  age: Int!
  commit: Commit!
  endingLine: Int!
  startingLine: Int!
}

""""""
type Blob implements GitObject & Node {
  abbreviatedOid: String!
  byteSize: Int!
  commitResourcePath: URI!
  commitUrl: URI!
  id: ID!
  isBinary: Boolean
  isTruncated: Boolean!
  oid: GitObjectID!
  repository: Repository!
  text: String
}

""""""
type Bot implements Actor & Node & UniformResourceLocatable {
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  login: String!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
}

""""""
union BranchActorAllowanceActor = App | Team | User

""""""
type BranchNamePatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

""""""
input BranchNamePatternParametersInput {
  
  """  How this rule will appear to users."""
  name: String
  
  """  If true, the rule will fail if the pattern matches."""
  negate: Boolean
  
  """  The operator to use for matching."""
  operator: String!
  
  """  The pattern to match with."""
  pattern: String!
}

""""""
type BranchProtectionRule implements Node {
  allowsDeletions: Boolean!
  allowsForcePushes: Boolean!
  blocksCreations: Boolean!
  branchProtectionRuleConflicts(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): BranchProtectionRuleConflictConnection!
  bypassForcePushAllowances(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): BypassForcePushAllowanceConnection!
  bypassPullRequestAllowances(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): BypassPullRequestAllowanceConnection!
  creator: Actor
  databaseId: Int
  dismissesStaleReviews: Boolean!
  id: ID!
  isAdminEnforced: Boolean!
  lockAllowsFetchAndMerge: Boolean!
  lockBranch: Boolean!
  matchingRefs(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filters refs with query on name"""
    query: String
  ): RefConnection!
  pattern: String!
  pushAllowances(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PushAllowanceConnection!
  repository: Repository
  requireLastPushApproval: Boolean!
  requiredApprovingReviewCount: Int
  requiredDeploymentEnvironments: [String]
  requiredStatusCheckContexts: [String]
  requiredStatusChecks: [RequiredStatusCheckDescription!]
  requiresApprovingReviews: Boolean!
  requiresCodeOwnerReviews: Boolean!
  requiresCommitSignatures: Boolean!
  requiresConversationResolution: Boolean!
  requiresDeployments: Boolean!
  requiresLinearHistory: Boolean!
  requiresStatusChecks: Boolean!
  requiresStrictStatusChecks: Boolean!
  restrictsPushes: Boolean!
  restrictsReviewDismissals: Boolean!
  reviewDismissalAllowances(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ReviewDismissalAllowanceConnection!
}

""""""
type BranchProtectionRuleConflict {
  branchProtectionRule: BranchProtectionRule
  conflictingBranchProtectionRule: BranchProtectionRule
  ref: Ref
}

""""""
type BranchProtectionRuleConflictConnection {
  edges: [BranchProtectionRuleConflictEdge]
  nodes: [BranchProtectionRuleConflict]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type BranchProtectionRuleConflictEdge {
  cursor: String!
  node: BranchProtectionRuleConflict
}

""""""
type BranchProtectionRuleConnection {
  edges: [BranchProtectionRuleEdge]
  nodes: [BranchProtectionRule]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type BranchProtectionRuleEdge {
  cursor: String!
  node: BranchProtectionRule
}

""""""
input BulkSponsorship {
  
  """  The amount to pay to the sponsorable in US dollars. Valid values: 1-12000."""
  amount: Int!
  
  """  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given."""
  sponsorableId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "Sponsorable")
  
  """  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given."""
  sponsorableLogin: String
}

""""""
union BypassActor = App | Team

""""""
type BypassForcePushAllowance implements Node {
  actor: BranchActorAllowanceActor
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

""""""
type BypassForcePushAllowanceConnection {
  edges: [BypassForcePushAllowanceEdge]
  nodes: [BypassForcePushAllowance]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type BypassForcePushAllowanceEdge {
  cursor: String!
  node: BypassForcePushAllowance
}

""""""
type BypassPullRequestAllowance implements Node {
  actor: BranchActorAllowanceActor
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

""""""
type BypassPullRequestAllowanceConnection {
  edges: [BypassPullRequestAllowanceEdge]
  nodes: [BypassPullRequestAllowance]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type BypassPullRequestAllowanceEdge {
  cursor: String!
  node: BypassPullRequestAllowance
}

""""""
type CVSS {
  score: Float!
  vectorString: String
}

""""""
type CWE implements Node {
  cweId: String!
  description: String!
  id: ID!
  name: String!
}

""""""
type CWEConnection {
  edges: [CWEEdge]
  nodes: [CWE]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CWEEdge {
  cursor: String!
  node: CWE
}

""""""
input CancelEnterpriseAdminInvitationInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the pending enterprise administrator invitation."""
  invitationId: ID! @possibleTypes(concreteTypes: [
      "EnterpriseAdministratorInvitation"
    ])
}

""""""
type CancelEnterpriseAdminInvitationPayload {
  clientMutationId: String
  invitation: EnterpriseAdministratorInvitation
  message: String
}

""""""
input CancelSponsorshipInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given."""
  sponsorId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "Sponsor")
  
  """  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given."""
  sponsorLogin: String
  
  """  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given."""
  sponsorableId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "Sponsorable")
  
  """  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given."""
  sponsorableLogin: String
}

""""""
type CancelSponsorshipPayload {
  clientMutationId: String
  sponsorsTier: SponsorsTier
}

""""""
input ChangeUserStatusInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:."""
  emoji: String
  
  """  If set, the user status will not be shown after this date."""
  expiresAt: DateTime
  
  """  Whether this status should indicate you are not fully available on GitHub, e.g., you are away."""
  limitedAvailability: Boolean = false
  
  """  A short description of your current status."""
  message: String
  
  """  The ID of the organization whose members will be allowed to see the status. If
  omitted, the status will be publicly visible."""
  organizationId: ID @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type ChangeUserStatusPayload {
  clientMutationId: String
  status: UserStatus
}

""""""
type CheckAnnotation {
  annotationLevel: CheckAnnotationLevel
  blobUrl: URI!
  databaseId: Int
  location: CheckAnnotationSpan!
  message: String!
  path: String!
  rawDetails: String
  title: String
}

""""""
type CheckAnnotationConnection {
  edges: [CheckAnnotationEdge]
  nodes: [CheckAnnotation]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
input CheckAnnotationData {
  
  """  Represents an annotation's information level"""
  annotationLevel: CheckAnnotationLevel!
  
  """  The location of the annotation"""
  location: CheckAnnotationRange!
  
  """  A short description of the feedback for these lines of code."""
  message: String!
  
  """  The path of the file to add an annotation to."""
  path: String!
  
  """  Details about this annotation."""
  rawDetails: String
  
  """  The title that represents the annotation."""
  title: String
}

""""""
type CheckAnnotationEdge {
  cursor: String!
  node: CheckAnnotation
}

""""""
enum CheckAnnotationLevel {
  FAILURE
  NOTICE
  WARNING
}

""""""
type CheckAnnotationPosition {
  column: Int
  line: Int!
}

""""""
input CheckAnnotationRange {
  
  """  The ending column of the range."""
  endColumn: Int
  
  """  The ending line of the range."""
  endLine: Int!
  
  """  The starting column of the range."""
  startColumn: Int
  
  """  The starting line of the range."""
  startLine: Int!
}

""""""
type CheckAnnotationSpan {
  end: CheckAnnotationPosition!
  start: CheckAnnotationPosition!
}

""""""
enum CheckConclusionState {
  ACTION_REQUIRED
  CANCELLED
  FAILURE
  NEUTRAL
  SKIPPED
  STALE
  STARTUP_FAILURE
  SUCCESS
  TIMED_OUT
}

""""""
type CheckRun implements Node & RequirableByPullRequest & UniformResourceLocatable {
  annotations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CheckAnnotationConnection
  checkSuite: CheckSuite!
  completedAt: DateTime
  conclusion: CheckConclusionState
  databaseId: Int
  deployment: Deployment
  detailsUrl: URI
  externalId: String
  id: ID!
  isRequired(
    """    The id of the pull request this is required for"""
    pullRequestId: ID
    
    """    The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!
  name: String!
  pendingDeploymentRequest: DeploymentRequest
  permalink: URI!
  repository: Repository!
  resourcePath: URI!
  startedAt: DateTime
  status: CheckStatusState!
  steps(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Step number"""
    number: Int
  ): CheckStepConnection
  summary: String
  text: String
  title: String
  url: URI!
}

""""""
input CheckRunAction {
  
  """  A short explanation of what this action would do."""
  description: String!
  
  """  A reference for the action on the integrator's system."""
  identifier: String!
  
  """  The text to be displayed on a button in the web UI."""
  label: String!
}

""""""
type CheckRunConnection {
  edges: [CheckRunEdge]
  nodes: [CheckRun]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CheckRunEdge {
  cursor: String!
  node: CheckRun
}

""""""
input CheckRunFilter {
  
  """  Filters the check runs created by this application ID."""
  appId: Int
  
  """  Filters the check runs by this name."""
  checkName: String
  
  """  Filters the check runs by this type."""
  checkType: CheckRunType
  
  """  Filters the check runs by these conclusions."""
  conclusions: [CheckConclusionState!]
  
  """  Filters the check runs by this status. Superceded by statuses."""
  status: CheckStatusState
  
  """  Filters the check runs by this status. Overrides status."""
  statuses: [CheckStatusState!]
}

""""""
input CheckRunOutput {
  
  """  The annotations that are made as part of the check run."""
  annotations: [CheckAnnotationData!]
  
  """  Images attached to the check run output displayed in the GitHub pull request UI."""
  images: [CheckRunOutputImage!]
  
  """  The summary of the check run (supports Commonmark)."""
  summary: String!
  
  """  The details of the check run (supports Commonmark)."""
  text: String
  
  """  A title to provide for this check run."""
  title: String!
}

""""""
input CheckRunOutputImage {
  
  """  The alternative text for the image."""
  alt: String!
  
  """  A short image description."""
  caption: String
  
  """  The full URL of the image."""
  imageUrl: URI!
}

""""""
enum CheckRunState {
  ACTION_REQUIRED
  CANCELLED
  COMPLETED
  FAILURE
  IN_PROGRESS
  NEUTRAL
  PENDING
  QUEUED
  SKIPPED
  STALE
  STARTUP_FAILURE
  SUCCESS
  TIMED_OUT
  WAITING
}

""""""
type CheckRunStateCount {
  count: Int!
  state: CheckRunState!
}

""""""
enum CheckRunType {
  ALL
  LATEST
}

""""""
enum CheckStatusState {
  COMPLETED
  IN_PROGRESS
  PENDING
  QUEUED
  REQUESTED
  WAITING
}

""""""
type CheckStep {
  completedAt: DateTime
  conclusion: CheckConclusionState
  externalId: String
  name: String!
  number: Int!
  secondsToCompletion: Int
  startedAt: DateTime
  status: CheckStatusState!
}

""""""
type CheckStepConnection {
  edges: [CheckStepEdge]
  nodes: [CheckStep]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CheckStepEdge {
  cursor: String!
  node: CheckStep
}

""""""
type CheckSuite implements Node {
  app: App
  branch: Ref
  checkRuns(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filters the check runs by this type."""
    filterBy: CheckRunFilter
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CheckRunConnection
  commit: Commit!
  conclusion: CheckConclusionState
  createdAt: DateTime!
  creator: User
  databaseId: Int
  id: ID!
  matchingPullRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    The base ref name to filter the pull requests by."""
    baseRefName: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    The head ref name to filter the pull requests by."""
    headRefName: String
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the pull requests by."""
    states: [PullRequestState!]
  ): PullRequestConnection
  push: Push
  repository: Repository!
  resourcePath: URI!
  status: CheckStatusState!
  updatedAt: DateTime!
  url: URI!
  workflowRun: WorkflowRun
}

""""""
input CheckSuiteAutoTriggerPreference {
  
  """  The node ID of the application that owns the check suite."""
  appId: ID!
  
  """  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository."""
  setting: Boolean!
}

""""""
type CheckSuiteConnection {
  edges: [CheckSuiteEdge]
  nodes: [CheckSuite]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CheckSuiteEdge {
  cursor: String!
  node: CheckSuite
}

""""""
input CheckSuiteFilter {
  
  """  Filters the check suites created by this application ID."""
  appId: Int
  
  """  Filters the check suites by this name."""
  checkName: String
}

""""""
union Claimable = Mannequin | User

""""""
input ClearLabelsFromLabelableInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The id of the labelable object to clear the labels from."""
  labelableId: ID! @possibleTypes(concreteTypes: [
      "Discussion", "Issue", "PullRequest"
    ]
    abstractType: "Labelable")
}

""""""
type ClearLabelsFromLabelablePayload {
  clientMutationId: String
  labelable: Labelable
}

""""""
input ClearProjectV2ItemFieldValueInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the field to be cleared."""
  fieldId: ID! @possibleTypes(concreteTypes: [
      "ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"
    ]
    abstractType: "ProjectV2FieldConfiguration")
  
  """  The ID of the item to be cleared."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  
  """  The ID of the Project."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type ClearProjectV2ItemFieldValuePayload {
  clientMutationId: String
  projectV2Item: ProjectV2Item
}

""""""
input CloneProjectInput {
  
  """  The description of the project."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Whether or not to clone the source project's workflows."""
  includeWorkflows: Boolean!
  
  """  The name of the project."""
  name: String!
  
  """  The visibility of the project, defaults to false (private)."""
  public: Boolean
  
  """  The source project to clone."""
  sourceId: ID! @possibleTypes(concreteTypes: ["Project"])
  
  """  The owner ID to create the project under."""
  targetOwnerId: ID! @possibleTypes(concreteTypes: [
      "Organization", "Repository", "User"
    ]
    abstractType: "ProjectOwner")
}

""""""
type CloneProjectPayload {
  clientMutationId: String
  jobStatusId: String
  project: Project
}

""""""
input CloneTemplateRepositoryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A short description of the new repository."""
  description: String
  
  """  Whether to copy all branches from the template to the new repository. Defaults
  to copying only the default branch of the template."""
  includeAllBranches: Boolean = false
  
  """  The name of the new repository."""
  name: String!
  
  """  The ID of the owner for the new repository."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "RepositoryOwner")
  
  """  The Node ID of the template repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  Indicates the repository's visibility level."""
  visibility: RepositoryVisibility!
}

""""""
type CloneTemplateRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

""""""
interface Closable {
  closed: Boolean!
  closedAt: DateTime
  viewerCanClose: Boolean!
  viewerCanReopen: Boolean!
}

""""""
input CloseDiscussionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the discussion to be closed."""
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
  
  """  The reason why the discussion is being closed."""
  reason: DiscussionCloseReason = RESOLVED
}

""""""
type CloseDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

""""""
input CloseIssueInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the issue to be closed."""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
  
  """  The reason the issue is to be closed."""
  stateReason: IssueClosedStateReason
}

""""""
type CloseIssuePayload {
  clientMutationId: String
  issue: Issue
}

""""""
input ClosePullRequestInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the pull request to be closed."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type ClosePullRequestPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
type ClosedEvent implements Node & UniformResourceLocatable {
  actor: Actor
  closable: Closable!
  closer: Closer
  createdAt: DateTime!
  id: ID!
  resourcePath: URI!
  stateReason: IssueStateReason
  url: URI!
}

""""""
union Closer = Commit | PullRequest

""""""
type CodeOfConduct implements Node {
  body: String
  id: ID!
  key: String!
  name: String!
  resourcePath: URI
  url: URI
}

""""""
enum CollaboratorAffiliation {
  ALL
  DIRECT
  OUTSIDE
}

""""""
interface Comment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerDidAuthor: Boolean!
}

""""""
enum CommentAuthorAssociation {
  COLLABORATOR
  CONTRIBUTOR
  FIRST_TIMER
  FIRST_TIME_CONTRIBUTOR
  MANNEQUIN
  MEMBER
  NONE
  OWNER
}

""""""
enum CommentCannotUpdateReason {
  ARCHIVED
  DENIED
  INSUFFICIENT_ACCESS
  LOCKED
  LOGIN_REQUIRED
  MAINTENANCE
  VERIFIED_EMAIL_REQUIRED
}

""""""
type CommentDeletedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  deletedCommentAuthor: Actor
  id: ID!
}

""""""
type Commit implements GitObject & Node & Subscribable & UniformResourceLocatable {
  abbreviatedOid: String!
  additions: Int!
  associatedPullRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pull requests."""
    orderBy: PullRequestOrder = { field: CREATED_AT, direction: ASC }
  ): PullRequestConnection
  author: GitActor
  authoredByCommitter: Boolean!
  authoredDate: DateTime!
  authors(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): GitActorConnection!
  blame(
    """    The file whose Git blame information you want."""
    path: String!
  ): Blame!
  changedFiles: Int! @deprecated(
    reason: "`changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC."
  )
  changedFilesIfAvailable: Int
  checkSuites(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filters the check suites by this type."""
    filterBy: CheckSuiteFilter
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CheckSuiteConnection
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CommitCommentConnection!
  commitResourcePath: URI!
  commitUrl: URI!
  committedDate: DateTime!
  committedViaWeb: Boolean!
  committer: GitActor
  deletions: Int!
  deployments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Environments to list deployments for"""
    environments: [String!]
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for deployments returned from the connection."""
    orderBy: DeploymentOrder = { field: CREATED_AT, direction: ASC }
  ): DeploymentConnection
  file(
    """    The path for the file"""
    path: String!
  ): TreeEntry
  history(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    If non-null, filters history to only show commits with matching authorship."""
    author: CommitAuthor
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    If non-null, filters history to only show commits touching files under this path."""
    path: String
    
    """    Allows specifying a beginning time or date for fetching commits."""
    since: GitTimestamp
    
    """    Allows specifying an ending time or date for fetching commits."""
    until: GitTimestamp
  ): CommitHistoryConnection!
  id: ID!
  message: String!
  messageBody: String!
  messageBodyHTML: HTML!
  messageHeadline: String!
  messageHeadlineHTML: HTML!
  oid: GitObjectID!
  onBehalfOf: Organization
  parents(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CommitConnection!
  pushedDate: DateTime @deprecated(
    reason: "`pushedDate` is no longer supported. Removal on 2023-07-01 UTC.")
  repository: Repository!
  resourcePath: URI!
  signature: GitSignature
  status: Status
  statusCheckRollup: StatusCheckRollup
  submodules(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): SubmoduleConnection!
  tarballUrl: URI!
  tree: Tree!
  treeResourcePath: URI!
  treeUrl: URI!
  url: URI!
  viewerCanSubscribe: Boolean!
  viewerSubscription: SubscriptionState
  zipballUrl: URI!
}

""""""
input CommitAuthor {
  
  """  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned."""
  emails: [String!]
  
  """  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails."""
  id: ID
}

""""""
type CommitAuthorEmailPatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

""""""
input CommitAuthorEmailPatternParametersInput {
  
  """  How this rule will appear to users."""
  name: String
  
  """  If true, the rule will fail if the pattern matches."""
  negate: Boolean
  
  """  The operator to use for matching."""
  operator: String!
  
  """  The pattern to match with."""
  pattern: String!
}

""""""
type CommitComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  commit: Commit
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: DateTime
  minimizedReason: String
  path: String
  position: Int
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

""""""
type CommitCommentConnection {
  edges: [CommitCommentEdge]
  nodes: [CommitComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CommitCommentEdge {
  cursor: String!
  node: CommitComment
}

""""""
type CommitCommentThread implements Node & RepositoryNode {
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CommitCommentConnection!
  commit: Commit
  id: ID!
  path: String
  position: Int
  repository: Repository!
}

""""""
type CommitConnection {
  edges: [CommitEdge]
  nodes: [Commit]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
input CommitContributionOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field by which to order commit contributions."""
  field: CommitContributionOrderField!
}

""""""
enum CommitContributionOrderField {
  COMMIT_COUNT
  OCCURRED_AT
}

""""""
type CommitContributionsByRepository {
  contributions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for commit contributions returned from the connection."""
    orderBy: CommitContributionOrder = { field: OCCURRED_AT, direction: DESC }
  ): CreatedCommitContributionConnection!
  repository: Repository!
  resourcePath: URI!
  url: URI!
}

""""""
type CommitEdge {
  cursor: String!
  node: Commit
}

""""""
type CommitHistoryConnection {
  edges: [CommitEdge]
  nodes: [Commit]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
input CommitMessage {
  
  """  The body of the message."""
  body: String
  
  """  The headline of the message."""
  headline: String!
}

""""""
type CommitMessagePatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

""""""
input CommitMessagePatternParametersInput {
  
  """  How this rule will appear to users."""
  name: String
  
  """  If true, the rule will fail if the pattern matches."""
  negate: Boolean
  
  """  The operator to use for matching."""
  operator: String!
  
  """  The pattern to match with."""
  pattern: String!
}

"""    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }"""
input CommittableBranch {
  
  """  The unqualified name of the branch to append the commit to."""
  branchName: String
  
  """  The Node ID of the Ref to be updated."""
  id: ID
  
  """  The nameWithOwner of the repository to commit to."""
  repositoryNameWithOwner: String
}

""""""
type CommitterEmailPatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

""""""
input CommitterEmailPatternParametersInput {
  
  """  How this rule will appear to users."""
  name: String
  
  """  If true, the rule will fail if the pattern matches."""
  negate: Boolean
  
  """  The operator to use for matching."""
  operator: String!
  
  """  The pattern to match with."""
  pattern: String!
}

""""""
type Comparison implements Node {
  aheadBy: Int!
  baseTarget: GitObject!
  behindBy: Int!
  commits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ComparisonCommitConnection!
  headTarget: GitObject!
  id: ID!
  status: ComparisonStatus!
}

""""""
type ComparisonCommitConnection {
  authorCount: Int!
  edges: [CommitEdge]
  nodes: [Commit]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
enum ComparisonStatus {
  AHEAD
  BEHIND
  DIVERGED
  IDENTICAL
}

""""""
type ConnectedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  isCrossRepository: Boolean!
  source: ReferencedSubject!
  subject: ReferencedSubject!
}

""""""
type ContributingGuidelines {
  body: String
  resourcePath: URI
  url: URI
}

""""""
interface Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  resourcePath: URI!
  url: URI!
  user: User!
}

""""""
type ContributionCalendar {
  colors: [String!]!
  isHalloween: Boolean!
  months: [ContributionCalendarMonth!]!
  totalContributions: Int!
  weeks: [ContributionCalendarWeek!]!
}

""""""
type ContributionCalendarDay {
  color: String!
  contributionCount: Int!
  contributionLevel: ContributionLevel!
  date: Date!
  weekday: Int!
}

""""""
type ContributionCalendarMonth {
  firstDay: Date!
  name: String!
  totalWeeks: Int!
  year: Int!
}

""""""
type ContributionCalendarWeek {
  contributionDays: [ContributionCalendarDay!]!
  firstDay: Date!
}

""""""
enum ContributionLevel {
  FIRST_QUARTILE
  FOURTH_QUARTILE
  NONE
  SECOND_QUARTILE
  THIRD_QUARTILE
}

""""""
input ContributionOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
}

""""""
type ContributionsCollection {
  commitContributionsByRepository(
    """    How many repositories should be included."""
    maxRepositories: Int = 25
  ): [CommitContributionsByRepository!]!
  contributionCalendar: ContributionCalendar!
  contributionYears: [Int!]!
  doesEndInCurrentMonth: Boolean!
  earliestRestrictedContributionDate: Date
  endedAt: DateTime!
  firstIssueContribution: CreatedIssueOrRestrictedContribution
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution
  hasActivityInThePast: Boolean!
  hasAnyContributions: Boolean!
  hasAnyRestrictedContributions: Boolean!
  isSingleDay: Boolean!
  issueContributions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Should the user's first issue ever be excluded from the result."""
    excludeFirst: Boolean = false
    
    """    Should the user's most commented issue be excluded from the result."""
    excludePopular: Boolean = false
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = { direction: DESC }
  ): CreatedIssueContributionConnection!
  issueContributionsByRepository(
    """    Should the user's first issue ever be excluded from the result."""
    excludeFirst: Boolean = false
    
    """    Should the user's most commented issue be excluded from the result."""
    excludePopular: Boolean = false
    
    """    How many repositories should be included."""
    maxRepositories: Int = 25
  ): [IssueContributionsByRepository!]!
  joinedGitHubContribution: JoinedGitHubContribution
  latestRestrictedContributionDate: Date
  mostRecentCollectionWithActivity: ContributionsCollection
  mostRecentCollectionWithoutActivity: ContributionsCollection
  popularIssueContribution: CreatedIssueContribution
  popularPullRequestContribution: CreatedPullRequestContribution
  pullRequestContributions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Should the user's first pull request ever be excluded from the result."""
    excludeFirst: Boolean = false
    
    """    Should the user's most commented pull request be excluded from the result."""
    excludePopular: Boolean = false
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = { direction: DESC }
  ): CreatedPullRequestContributionConnection!
  pullRequestContributionsByRepository(
    """    Should the user's first pull request ever be excluded from the result."""
    excludeFirst: Boolean = false
    
    """    Should the user's most commented pull request be excluded from the result."""
    excludePopular: Boolean = false
    
    """    How many repositories should be included."""
    maxRepositories: Int = 25
  ): [PullRequestContributionsByRepository!]!
  pullRequestReviewContributions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = { direction: DESC }
  ): CreatedPullRequestReviewContributionConnection!
  pullRequestReviewContributionsByRepository(
    """    How many repositories should be included."""
    maxRepositories: Int = 25
  ): [PullRequestReviewContributionsByRepository!]!
  repositoryContributions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Should the user's first repository ever be excluded from the result."""
    excludeFirst: Boolean = false
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = { direction: DESC }
  ): CreatedRepositoryContributionConnection!
  restrictedContributionsCount: Int!
  startedAt: DateTime!
  totalCommitContributions: Int!
  totalIssueContributions(
    """    Should the user's first issue ever be excluded from this count."""
    excludeFirst: Boolean = false
    
    """    Should the user's most commented issue be excluded from this count."""
    excludePopular: Boolean = false
  ): Int!
  totalPullRequestContributions(
    """    Should the user's first pull request ever be excluded from this count."""
    excludeFirst: Boolean = false
    
    """    Should the user's most commented pull request be excluded from this count."""
    excludePopular: Boolean = false
  ): Int!
  totalPullRequestReviewContributions: Int!
  totalRepositoriesWithContributedCommits: Int!
  totalRepositoriesWithContributedIssues(
    """    Should the user's first issue ever be excluded from this count."""
    excludeFirst: Boolean = false
    
    """    Should the user's most commented issue be excluded from this count."""
    excludePopular: Boolean = false
  ): Int!
  totalRepositoriesWithContributedPullRequestReviews: Int!
  totalRepositoriesWithContributedPullRequests(
    """    Should the user's first pull request ever be excluded from this count."""
    excludeFirst: Boolean = false
    
    """    Should the user's most commented pull request be excluded from this count."""
    excludePopular: Boolean = false
  ): Int!
  totalRepositoryContributions(
    """    Should the user's first repository ever be excluded from this count."""
    excludeFirst: Boolean = false
  ): Int!
  user: User!
}

""""""
input ConvertProjectCardNoteToIssueInput {
  
  """  The body of the newly created issue."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ProjectCard ID to convert."""
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
  
  """  The ID of the repository to create the issue in."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  The title of the newly created issue. Defaults to the card's note text."""
  title: String
}

""""""
type ConvertProjectCardNoteToIssuePayload {
  clientMutationId: String
  projectCard: ProjectCard
}

""""""
input ConvertPullRequestToDraftInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the pull request to convert to draft"""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type ConvertPullRequestToDraftPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
type ConvertToDraftEvent implements Node & UniformResourceLocatable {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
}

""""""
type ConvertedNoteToIssueEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  project: Project @preview(toggledBy: "starfox-preview")
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

""""""
type ConvertedToDiscussionEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  discussion: Discussion
  id: ID!
}

""""""
input CopyProjectV2Input {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Include draft issues in the new project"""
  includeDraftIssues: Boolean = false
  
  """  The owner ID of the new project."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "OrganizationOrUser")
  
  """  The ID of the source Project to copy."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  The title of the project."""
  title: String!
}

""""""
type CopyProjectV2Payload {
  clientMutationId: String
  projectV2: ProjectV2
}

""""""
input CreateAttributionInvitationInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the owner scoping the reattributable data."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "Bot", "Enterprise", "Mannequin", "Organization", "User"
    ])
  
  """  The Node ID of the account owning the data to reattribute."""
  sourceId: ID! @possibleTypes(concreteTypes: [
      "Bot", "Enterprise", "Mannequin", "Organization", "User"
    ])
  
  """  The Node ID of the account which may claim the data."""
  targetId: ID! @possibleTypes(concreteTypes: [
      "Bot", "Enterprise", "Mannequin", "Organization", "User"
    ])
}

""""""
type CreateAttributionInvitationPayload {
  clientMutationId: String
  owner: Organization
  source: Claimable
  target: Claimable
}

""""""
input CreateBranchProtectionRuleInput {
  
  """  Can this branch be deleted."""
  allowsDeletions: Boolean
  
  """  Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean
  
  """  Is branch creation a protected operation."""
  blocksCreations: Boolean
  
  """  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches."""
  bypassForcePushActorIds: [ID!]
  
  """  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches."""
  bypassPullRequestActorIds: [ID!]
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Will new commits pushed to matching branches dismiss pull request review approvals."""
  dismissesStaleReviews: Boolean
  
  """  Can admins overwrite branch protection."""
  isAdminEnforced: Boolean
  
  """  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing."""
  lockAllowsFetchAndMerge: Boolean
  
  """  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch."""
  lockBranch: Boolean
  
  """  The glob-like pattern used to determine matching branches."""
  pattern: String!
  
  """  A list of User, Team, or App IDs allowed to push to matching branches."""
  pushActorIds: [ID!]
  
  """  The global relay id of the repository in which a new branch protection rule should be created in."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  Whether the most recent push must be approved by someone other than the person who pushed it"""
  requireLastPushApproval: Boolean
  
  """  Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int
  
  """  The list of required deployment environments"""
  requiredDeploymentEnvironments: [String!]
  
  """  List of required status check contexts that must pass for commits to be accepted to matching branches."""
  requiredStatusCheckContexts: [String!]
  
  """  The list of required status checks"""
  requiredStatusChecks: [RequiredStatusCheckInput!]
  
  """  Are approving reviews required to update matching branches."""
  requiresApprovingReviews: Boolean
  
  """  Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean
  
  """  Are commits required to be signed."""
  requiresCommitSignatures: Boolean
  
  """  Are conversations required to be resolved before merging."""
  requiresConversationResolution: Boolean
  
  """  Are successful deployments required before merging."""
  requiresDeployments: Boolean
  
  """  Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean
  
  """  Are status checks required to update matching branches."""
  requiresStatusChecks: Boolean
  
  """  Are branches required to be up to date before merging."""
  requiresStrictStatusChecks: Boolean
  
  """  Is pushing to matching branches restricted."""
  restrictsPushes: Boolean
  
  """  Is dismissal of pull request reviews restricted."""
  restrictsReviewDismissals: Boolean
  
  """  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches."""
  reviewDismissalActorIds: [ID!]
}

""""""
type CreateBranchProtectionRulePayload {
  branchProtectionRule: BranchProtectionRule
  clientMutationId: String
}

""""""
input CreateCheckRunInput {
  
  """  Possible further actions the integrator can perform, which a user may trigger."""
  actions: [CheckRunAction!]
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The time that the check run finished."""
  completedAt: DateTime
  
  """  The final conclusion of the check."""
  conclusion: CheckConclusionState
  
  """  The URL of the integrator's site that has the full details of the check."""
  detailsUrl: URI
  
  """  A reference for the run on the integrator's system."""
  externalId: String
  
  """  The SHA of the head commit."""
  headSha: GitObjectID!
  
  """  The name of the check."""
  name: String!
  
  """  Descriptive details about the run."""
  output: CheckRunOutput
  
  """  The node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  The time that the check run began."""
  startedAt: DateTime
  
  """  The current status."""
  status: RequestableCheckStatusState
}

""""""
type CreateCheckRunPayload {
  checkRun: CheckRun
  clientMutationId: String
}

""""""
input CreateCheckSuiteInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The SHA of the head commit."""
  headSha: GitObjectID!
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type CreateCheckSuitePayload {
  checkSuite: CheckSuite
  clientMutationId: String
}

""""""
input CreateCommitOnBranchInput {
  
  """  The Ref to be updated.  Must be a branch."""
  branch: CommittableBranch!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The git commit oid expected at the head of the branch prior to the commit"""
  expectedHeadOid: GitObjectID!
  
  """  A description of changes to files in this commit."""
  fileChanges: FileChanges
  
  """  The commit message the be included with the commit."""
  message: CommitMessage!
}

""""""
type CreateCommitOnBranchPayload {
  clientMutationId: String
  commit: Commit
  ref: Ref
}

""""""
input CreateDeploymentInput @preview(toggledBy: "flash-preview") {
  
  """  Attempt to automatically merge the default branch into the requested ref, defaults to true."""
  autoMerge: Boolean = true
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Short description of the deployment."""
  description: String = ""
  
  """  Name for the target deployment environment."""
  environment: String = "production"
  
  """  JSON payload with extra information about the deployment."""
  payload: String = "{}"
  
  """  The node ID of the ref to be deployed."""
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
  
  """  The node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  The status contexts to verify against commit status checks. To bypass required
  contexts, pass an empty array. Defaults to all unique contexts."""
  requiredContexts: [String!]
  
  """  Specifies a task to execute."""
  task: String = "deploy"
}

""""""
type CreateDeploymentPayload @preview(toggledBy: "flash-preview") {
  autoMerged: Boolean
  clientMutationId: String
  deployment: Deployment
}

""""""
input CreateDeploymentStatusInput @preview(toggledBy: "flash-preview") {
  
  """  Adds a new inactive status to all non-transient, non-production environment
  deployments with the same repository and environment name as the created
  status's deployment."""
  autoInactive: Boolean = true
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The node ID of the deployment."""
  deploymentId: ID! @possibleTypes(concreteTypes: ["Deployment"])
  
  """  A short description of the status. Maximum length of 140 characters."""
  description: String = ""
  
  """  If provided, updates the environment of the deploy. Otherwise, does not modify the environment."""
  environment: String
  
  """  Sets the URL for accessing your environment."""
  environmentUrl: String = ""
  
  """  The log URL to associate with this status.       This URL should contain
  output to keep the user updated while the task is running       or serve as
  historical information for what happened in the deployment."""
  logUrl: String = ""
  
  """  The state of the deployment."""
  state: DeploymentStatusState!
}

""""""
type CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview") {
  clientMutationId: String
  deploymentStatus: DeploymentStatus
}

""""""
input CreateDiscussionInput {
  
  """  The body of the discussion."""
  body: String!
  
  """  The id of the discussion category to associate with this discussion."""
  categoryId: ID! @possibleTypes(concreteTypes: ["DiscussionCategory"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The id of the repository on which to create the discussion."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  The title of the discussion."""
  title: String!
}

""""""
type CreateDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

""""""
input CreateEnterpriseOrganizationInput {
  
  """  The logins for the administrators of the new organization."""
  adminLogins: [String!]!
  
  """  The email used for sending billing receipts."""
  billingEmail: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise owning the new organization."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The login of the new organization."""
  login: String!
  
  """  The profile name of the new organization."""
  profileName: String!
}

""""""
type CreateEnterpriseOrganizationPayload {
  clientMutationId: String
  enterprise: Enterprise
  organization: Organization
}

""""""
input CreateEnvironmentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of the environment."""
  name: String!
  
  """  The node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type CreateEnvironmentPayload {
  clientMutationId: String
  environment: Environment
}

""""""
input CreateIpAllowListEntryInput {
  
  """  An IP address or range of addresses in CIDR notation."""
  allowListValue: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Whether the IP allow list entry is active when an IP allow list is enabled."""
  isActive: Boolean!
  
  """  An optional name for the IP allow list entry."""
  name: String
  
  """  The ID of the owner for which to create the new IP allow list entry."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "App", "Enterprise", "Organization"
    ]
    abstractType: "IpAllowListOwner")
}

""""""
type CreateIpAllowListEntryPayload {
  clientMutationId: String
  ipAllowListEntry: IpAllowListEntry
}

""""""
input CreateIssueInput {
  
  """  The Node ID for the user assignee for this issue."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  
  """  The body for the issue description."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of an issue template in the repository, assigns labels and assignees from the template to the issue"""
  issueTemplate: String
  
  """  An array of Node IDs of labels for this issue."""
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])
  
  """  The Node ID of the milestone for this issue."""
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])
  
  """  An array of Node IDs for projects associated with this issue."""
  projectIds: [ID!] @possibleTypes(concreteTypes: ["Project"])
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  The title for the issue."""
  title: String!
}

""""""
type CreateIssuePayload {
  clientMutationId: String
  issue: Issue
}

""""""
input CreateLabelInput @preview(toggledBy: "bane-preview") {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A 6 character hex code, without the leading #, identifying the color of the label."""
  color: String!
  
  """  A brief description of the label, such as its purpose."""
  description: String
  
  """  The name of the label."""
  name: String!
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type CreateLabelPayload @preview(toggledBy: "bane-preview") {
  clientMutationId: String
  label: Label
}

""""""
input CreateLinkedBranchInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the issue to link to."""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
  
  """  The name of the new branch. Defaults to issue number and title."""
  name: String
  
  """  The commit SHA to base the new branch on."""
  oid: GitObjectID!
  
  """  ID of the repository to create the branch in. Defaults to the issue repository."""
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type CreateLinkedBranchPayload {
  clientMutationId: String
  issue: Issue
  linkedBranch: LinkedBranch
}

""""""
input CreateMigrationSourceInput {
  
  """  The migration source access token."""
  accessToken: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The GitHub personal access token of the user importing to the target repository."""
  githubPat: String
  
  """  The migration source name."""
  name: String!
  
  """  The ID of the organization that will own the migration source."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
  
  """  The migration source type."""
  type: MigrationSourceType!
  
  """  The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`."""
  url: String
}

""""""
type CreateMigrationSourcePayload {
  clientMutationId: String
  migrationSource: MigrationSource
}

""""""
input CreateProjectInput {
  
  """  The description of project."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of project."""
  name: String!
  
  """  The owner ID to create the project under."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "Organization", "Repository", "User"
    ]
    abstractType: "ProjectOwner")
  
  """  A list of repository IDs to create as linked repositories for the project"""
  repositoryIds: [ID!] @possibleTypes(concreteTypes: ["Repository"])
  
  """  The name of the GitHub-provided template."""
  template: ProjectTemplate
}

""""""
type CreateProjectPayload {
  clientMutationId: String
  project: Project
}

""""""
input CreateProjectV2FieldInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The data type of the field."""
  dataType: ProjectV2CustomFieldType!
  
  """  The name of the field."""
  name: String!
  
  """  The ID of the Project to create the field in."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  Options for a single select field. At least one value is required if data_type is SINGLE_SELECT"""
  singleSelectOptions: [ProjectV2SingleSelectFieldOptionInput!]
}

""""""
type CreateProjectV2FieldPayload {
  clientMutationId: String
  projectV2Field: ProjectV2FieldConfiguration
}

""""""
input CreateProjectV2Input {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The owner ID to create the project under."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "OrganizationOrUser")
  
  """  The repository to link the project to."""
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
  
  """  The team to link the project to. The team will be granted read permissions."""
  teamId: ID @possibleTypes(concreteTypes: ["Team"])
  
  """  The title of the project."""
  title: String!
}

""""""
type CreateProjectV2Payload {
  clientMutationId: String
  projectV2: ProjectV2
}

""""""
input CreatePullRequestInput {
  
  """  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository."""
  baseRefName: String!
  
  """  The contents of the pull request."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Indicates whether this pull request should be a draft."""
  draft: Boolean = false
  
  """  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace `head_ref_name` with a user like this: `username:branch`."""
  headRefName: String!
  
  """  The Node ID of the head repository."""
  headRepositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
  
  """  Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean = true
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  The title of the pull request."""
  title: String!
}

""""""
type CreatePullRequestPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
input CreateRefInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`)."""
  name: String!
  
  """  The GitObjectID that the new Ref shall target. Must point to a commit."""
  oid: GitObjectID!
  
  """  The Node ID of the Repository to create the Ref in."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type CreateRefPayload {
  clientMutationId: String
  ref: Ref
}

""""""
input CreateRepositoryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A short description of the new repository."""
  description: String
  
  """  Indicates if the repository should have the issues feature enabled."""
  hasIssuesEnabled: Boolean = true
  
  """  Indicates if the repository should have the wiki feature enabled."""
  hasWikiEnabled: Boolean = false
  
  """  The URL for a web page about this repository."""
  homepageUrl: URI
  
  """  The name of the new repository."""
  name: String!
  
  """  The ID of the owner for the new repository."""
  ownerId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "RepositoryOwner")
  
  """  When an organization is specified as the owner, this ID identifies the team
  that should be granted access to the new repository."""
  teamId: ID @possibleTypes(concreteTypes: ["Team"])
  
  """  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure."""
  template: Boolean = false
  
  """  Indicates the repository's visibility level."""
  visibility: RepositoryVisibility!
}

""""""
type CreateRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

""""""
input CreateRepositoryRulesetInput {
  
  """  A list of actors that are allowed to bypass rules in this ruleset."""
  bypassActors: [RepositoryRulesetBypassActorInput!]
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The set of conditions for this ruleset"""
  conditions: RepositoryRuleConditionsInput!
  
  """  The enforcement level for this ruleset"""
  enforcement: RuleEnforcement!
  
  """  The name of the ruleset."""
  name: String!
  
  """  The list of rules for this ruleset"""
  rules: [RepositoryRuleInput!]
  
  """  The global relay id of the source in which a new ruleset should be created in."""
  sourceId: ID! @possibleTypes(concreteTypes: [
      "Organization", "Repository"
    ]
    abstractType: "RuleSource")
  
  """  The target of the ruleset."""
  target: RepositoryRulesetTarget
}

""""""
type CreateRepositoryRulesetPayload {
  clientMutationId: String
  ruleset: RepositoryRuleset
}

""""""
input CreateSponsorsListingInput {
  
  """  The country or region where the sponsorable's bank account is located.
  Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified."""
  billingCountryOrRegionCode: SponsorsCountryOrRegionCode
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The email address we should use to contact you about the GitHub Sponsors
  profile being created. This will not be shared publicly. Must be a verified
  email address already on your GitHub account. Only relevant when the
  sponsorable is yourself. Defaults to your primary email address on file if omitted."""
  contactEmail: String
  
  """  The username of the supported fiscal host's GitHub organization, if you want
  to receive sponsorship payouts through a fiscal host rather than directly to a
  bank account. For example, 'Open-Source-Collective' for Open Source Collective
  or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts
  for more information."""
  fiscalHostLogin: String
  
  """  The URL for your profile page on the fiscal host's website, e.g.,
  https://opencollective.com/babel or https://numfocus.org/project/bokeh.
  Required if fiscalHostLogin is specified."""
  fiscallyHostedProjectProfileUrl: String
  
  """  Provide an introduction to serve as the main focus that appears on your GitHub
  Sponsors profile. It's a great opportunity to help potential sponsors learn
  more about you, your work, and why their sponsorship is important to you.
  GitHub-flavored Markdown is supported."""
  fullDescription: String
  
  """  The country or region where the sponsorable resides. This is for tax purposes.
  Required if the sponsorable is yourself, ignored when sponsorableLogin
  specifies an organization."""
  residenceCountryOrRegionCode: SponsorsCountryOrRegionCode
  
  """  The username of the organization to create a GitHub Sponsors profile for, if
  desired. Defaults to creating a GitHub Sponsors profile for the authenticated
  user if omitted."""
  sponsorableLogin: String
}

""""""
type CreateSponsorsListingPayload {
  clientMutationId: String
  sponsorsListing: SponsorsListing
}

""""""
input CreateSponsorsTierInput {
  
  """  The value of the new tier in US dollars. Valid values: 1-12000."""
  amount: Int!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc."""
  description: String!
  
  """  Whether sponsorships using this tier should happen monthly/yearly or just once."""
  isRecurring: Boolean = true
  
  """  Whether to make the tier available immediately for sponsors to choose.
  Defaults to creating a draft tier that will not be publicly visible."""
  publish: Boolean = false
  
  """  Optional ID of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization."""
  repositoryId: ID @possibleTypes(concreteTypes: ["Repository"])
  
  """  Optional name of the private repository that sponsors at this tier should gain
  read-only access to. Must be owned by an organization. Necessary if
  repositoryOwnerLogin is given. Will be ignored if repositoryId is given."""
  repositoryName: String
  
  """  Optional login of the organization owner of the private repository that
  sponsors at this tier should gain read-only access to. Necessary if
  repositoryName is given. Will be ignored if repositoryId is given."""
  repositoryOwnerLogin: String
  
  """  The ID of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableLogin is not given."""
  sponsorableId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "Sponsorable")
  
  """  The username of the user or organization who owns the GitHub Sponsors profile.
  Defaults to the current user if omitted and sponsorableId is not given."""
  sponsorableLogin: String
  
  """  Optional message new sponsors at this tier will receive."""
  welcomeMessage: String
}

""""""
type CreateSponsorsTierPayload {
  clientMutationId: String
  sponsorsTier: SponsorsTier
}

""""""
input CreateSponsorshipInput {
  
  """  The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000."""
  amount: Int
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified."""
  isRecurring: Boolean
  
  """  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used."""
  privacyLevel: SponsorshipPrivacy = PUBLIC
  
  """  Whether the sponsor should receive email updates from the sponsorable."""
  receiveEmails: Boolean = true
  
  """  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given."""
  sponsorId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "Sponsor")
  
  """  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given."""
  sponsorLogin: String
  
  """  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given."""
  sponsorableId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "Sponsorable")
  
  """  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given."""
  sponsorableLogin: String
  
  """  The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified."""
  tierId: ID @possibleTypes(concreteTypes: ["SponsorsTier"])
}

""""""
type CreateSponsorshipPayload {
  clientMutationId: String
  sponsorship: Sponsorship
}

""""""
input CreateSponsorshipsInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorables. Public visibility still does not reveal the dollar value of
  the sponsorship."""
  privacyLevel: SponsorshipPrivacy = PUBLIC
  
  """  Whether the sponsor should receive email updates from the sponsorables."""
  receiveEmails: Boolean = false
  
  """  The username of the user or organization who is acting as the sponsor, paying for the sponsorships."""
  sponsorLogin: String!
  
  """  The list of maintainers to sponsor and for how much apiece."""
  sponsorships: [BulkSponsorship!]!
}

""""""
type CreateSponsorshipsPayload {
  clientMutationId: String
  sponsorables: [Sponsorable!]
}

""""""
input CreateTeamDiscussionCommentInput {
  
  """  The content of the comment. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the discussion to which the comment belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `discussionId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions."""
  discussionId: ID @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

""""""
type CreateTeamDiscussionCommentPayload {
  clientMutationId: String
  teamDiscussionComment: TeamDiscussionComment @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
}

""""""
input CreateTeamDiscussionInput {
  
  """  The content of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `body` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  If true, restricts the visibility of this discussion to team members and
  organization admins. If false or not specified, allows any organization member
  to view this discussion.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `private` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions."""
  private: Boolean
  
  """  The ID of the team to which the discussion belongs. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `teamId` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions."""
  teamId: ID @possibleTypes(concreteTypes: ["Team"])
  
  """  The title of the discussion. This field is required.

  **Upcoming Change on 2024-07-01 UTC**
  **Description:** `title` will be removed. Follow the guide at
  https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to
  find a suitable replacement.
  **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions."""
  title: String
}

""""""
type CreateTeamDiscussionPayload {
  clientMutationId: String
  teamDiscussion: TeamDiscussion @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
}

""""""
type CreatedCommitContribution implements Contribution {
  commitCount: Int!
  isRestricted: Boolean!
  occurredAt: DateTime!
  repository: Repository!
  resourcePath: URI!
  url: URI!
  user: User!
}

""""""
type CreatedCommitContributionConnection {
  edges: [CreatedCommitContributionEdge]
  nodes: [CreatedCommitContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CreatedCommitContributionEdge {
  cursor: String!
  node: CreatedCommitContribution
}

""""""
type CreatedIssueContribution implements Contribution {
  isRestricted: Boolean!
  issue: Issue!
  occurredAt: DateTime!
  resourcePath: URI!
  url: URI!
  user: User!
}

""""""
type CreatedIssueContributionConnection {
  edges: [CreatedIssueContributionEdge]
  nodes: [CreatedIssueContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CreatedIssueContributionEdge {
  cursor: String!
  node: CreatedIssueContribution
}

""""""
union CreatedIssueOrRestrictedContribution = CreatedIssueContribution
  | RestrictedContribution

""""""
type CreatedPullRequestContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
  user: User!
}

""""""
type CreatedPullRequestContributionConnection {
  edges: [CreatedPullRequestContributionEdge]
  nodes: [CreatedPullRequestContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CreatedPullRequestContributionEdge {
  cursor: String!
  node: CreatedPullRequestContribution
}

""""""
union CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution
  | RestrictedContribution

""""""
type CreatedPullRequestReviewContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  pullRequest: PullRequest!
  pullRequestReview: PullRequestReview!
  repository: Repository!
  resourcePath: URI!
  url: URI!
  user: User!
}

""""""
type CreatedPullRequestReviewContributionConnection {
  edges: [CreatedPullRequestReviewContributionEdge]
  nodes: [CreatedPullRequestReviewContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CreatedPullRequestReviewContributionEdge {
  cursor: String!
  node: CreatedPullRequestReviewContribution
}

""""""
type CreatedRepositoryContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  repository: Repository!
  resourcePath: URI!
  url: URI!
  user: User!
}

""""""
type CreatedRepositoryContributionConnection {
  edges: [CreatedRepositoryContributionEdge]
  nodes: [CreatedRepositoryContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type CreatedRepositoryContributionEdge {
  cursor: String!
  node: CreatedRepositoryContribution
}

""""""
union CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution
  | RestrictedContribution

""""""
type CrossReferencedEvent implements Node & UniformResourceLocatable {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  isCrossRepository: Boolean!
  referencedAt: DateTime!
  resourcePath: URI!
  source: ReferencedSubject!
  target: ReferencedSubject!
  url: URI!
  willCloseTarget: Boolean!
}

""""""
scalar Date

""""""
scalar DateTime

""""""
input DeclineTopicSuggestionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of the suggested topic."""
  name: String!
  
  """  The reason why the suggested topic is declined."""
  reason: TopicSuggestionDeclineReason!
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type DeclineTopicSuggestionPayload {
  clientMutationId: String
  topic: Topic
}

""""""
enum DefaultRepositoryPermissionField {
  ADMIN
  NONE
  READ
  WRITE
}

""""""
interface Deletable {
  viewerCanDelete: Boolean!
}

""""""
input DeleteBranchProtectionRuleInput {
  
  """  The global relay id of the branch protection rule to be deleted."""
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: [
      "BranchProtectionRule"
    ])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

""""""
type DeleteBranchProtectionRulePayload {
  clientMutationId: String
}

""""""
input DeleteDeploymentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the deployment to be deleted."""
  id: ID! @possibleTypes(concreteTypes: ["Deployment"])
}

""""""
type DeleteDeploymentPayload {
  clientMutationId: String
}

""""""
input DeleteDiscussionCommentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node id of the discussion comment to delete."""
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

""""""
type DeleteDiscussionCommentPayload {
  clientMutationId: String
  comment: DiscussionComment
}

""""""
input DeleteDiscussionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The id of the discussion to delete."""
  id: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

""""""
type DeleteDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

""""""
input DeleteEnvironmentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the environment to be deleted."""
  id: ID! @possibleTypes(concreteTypes: ["Environment"])
}

""""""
type DeleteEnvironmentPayload {
  clientMutationId: String
}

""""""
input DeleteIpAllowListEntryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the IP allow list entry to delete."""
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
}

""""""
type DeleteIpAllowListEntryPayload {
  clientMutationId: String
  ipAllowListEntry: IpAllowListEntry
}

""""""
input DeleteIssueCommentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the comment to delete."""
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

""""""
type DeleteIssueCommentPayload {
  clientMutationId: String
}

""""""
input DeleteIssueInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the issue to delete."""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

""""""
type DeleteIssuePayload {
  clientMutationId: String
  repository: Repository
}

""""""
input DeleteLabelInput @preview(toggledBy: "bane-preview") {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the label to be deleted."""
  id: ID! @possibleTypes(concreteTypes: ["Label"])
}

""""""
type DeleteLabelPayload @preview(toggledBy: "bane-preview") {
  clientMutationId: String
}

""""""
input DeleteLinkedBranchInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the linked branch"""
  linkedBranchId: ID! @possibleTypes(concreteTypes: ["LinkedBranch"])
}

""""""
type DeleteLinkedBranchPayload {
  clientMutationId: String
  issue: Issue
}

""""""
input DeletePackageVersionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the package version to be deleted."""
  packageVersionId: ID! @possibleTypes(concreteTypes: ["PackageVersion"])
}

""""""
type DeletePackageVersionPayload {
  clientMutationId: String
  success: Boolean
}

""""""
input DeleteProjectCardInput {
  
  """  The id of the card to delete."""
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

""""""
type DeleteProjectCardPayload {
  clientMutationId: String
  column: ProjectColumn
  deletedCardId: ID
}

""""""
input DeleteProjectColumnInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The id of the column to delete."""
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

""""""
type DeleteProjectColumnPayload {
  clientMutationId: String
  deletedColumnId: ID
  project: Project
}

""""""
input DeleteProjectInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Project ID to update."""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
}

""""""
type DeleteProjectPayload {
  clientMutationId: String
  owner: ProjectOwner
}

""""""
input DeleteProjectV2FieldInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the field to delete."""
  fieldId: ID! @possibleTypes(concreteTypes: [
      "ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"
    ]
    abstractType: "ProjectV2FieldConfiguration")
}

""""""
type DeleteProjectV2FieldPayload {
  clientMutationId: String
  projectV2Field: ProjectV2FieldConfiguration
}

""""""
input DeleteProjectV2Input {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Project to delete."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
input DeleteProjectV2ItemInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the item to be removed."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  
  """  The ID of the Project from which the item should be removed."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type DeleteProjectV2ItemPayload {
  clientMutationId: String
  deletedItemId: ID
}

""""""
type DeleteProjectV2Payload {
  clientMutationId: String
  projectV2: ProjectV2
}

""""""
input DeleteProjectV2WorkflowInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the workflow to be removed."""
  workflowId: ID! @possibleTypes(concreteTypes: ["ProjectV2Workflow"])
}

""""""
type DeleteProjectV2WorkflowPayload {
  clientMutationId: String
  deletedWorkflowId: ID
  projectV2: ProjectV2
}

""""""
input DeletePullRequestReviewCommentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the comment to delete."""
  id: ID! @possibleTypes(concreteTypes: ["PullRequestReviewComment"])
}

""""""
type DeletePullRequestReviewCommentPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
  pullRequestReviewComment: PullRequestReviewComment
}

""""""
input DeletePullRequestReviewInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the pull request review to delete."""
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

""""""
type DeletePullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
}

""""""
input DeleteRefInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the Ref to be deleted."""
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

""""""
type DeleteRefPayload {
  clientMutationId: String
}

""""""
input DeleteRepositoryRulesetInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The global relay id of the repository ruleset to be deleted."""
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])
}

""""""
type DeleteRepositoryRulesetPayload {
  clientMutationId: String
}

""""""
input DeleteTeamDiscussionCommentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the comment to delete."""
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

""""""
type DeleteTeamDiscussionCommentPayload {
  clientMutationId: String
}

""""""
input DeleteTeamDiscussionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The discussion ID to delete."""
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
}

""""""
type DeleteTeamDiscussionPayload {
  clientMutationId: String
}

""""""
input DeleteVerifiableDomainInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the verifiable domain to delete."""
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

""""""
type DeleteVerifiableDomainPayload {
  clientMutationId: String
  owner: VerifiableDomainOwner
}

""""""
type DemilestonedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  milestoneTitle: String!
  subject: MilestoneItem!
}

""""""
type DependabotUpdate implements RepositoryNode {
  error: DependabotUpdateError
  pullRequest: PullRequest
  repository: Repository!
}

""""""
type DependabotUpdateError {
  body: String!
  errorType: String!
  title: String!
}

""""""
type DependencyGraphDependency @preview(toggledBy: "hawkgirl-preview") {
  hasDependencies: Boolean!
  packageLabel: String! @deprecated(
    reason: "`packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC."
  )
  packageManager: String
  packageName: String!
  repository: Repository
  requirements: String!
}

""""""
type DependencyGraphDependencyConnection @preview(toggledBy: "hawkgirl-preview"
) {
  edges: [DependencyGraphDependencyEdge]
  nodes: [DependencyGraphDependency]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DependencyGraphDependencyEdge @preview(toggledBy: "hawkgirl-preview") {
  cursor: String!
  node: DependencyGraphDependency
}

""""""
enum DependencyGraphEcosystem {
  ACTIONS
  COMPOSER
  GO
  MAVEN
  NPM
  NUGET
  PIP
  PUB
  RUBYGEMS
  RUST
  SWIFT
}

""""""
type DependencyGraphManifest implements Node @preview(
  toggledBy: "hawkgirl-preview") {
  blobPath: String!
  dependencies(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DependencyGraphDependencyConnection
  dependenciesCount: Int
  exceedsMaxSize: Boolean!
  filename: String!
  id: ID!
  parseable: Boolean!
  repository: Repository!
}

""""""
type DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview") {
  edges: [DependencyGraphManifestEdge]
  nodes: [DependencyGraphManifest]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DependencyGraphManifestEdge @preview(toggledBy: "hawkgirl-preview") {
  cursor: String!
  node: DependencyGraphManifest
}

""""""
type DeployKey implements Node {
  createdAt: DateTime!
  id: ID!
  key: String!
  readOnly: Boolean!
  title: String!
  verified: Boolean!
}

""""""
type DeployKeyConnection {
  edges: [DeployKeyEdge]
  nodes: [DeployKey]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DeployKeyEdge {
  cursor: String!
  node: DeployKey
}

""""""
type DeployedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  deployment: Deployment!
  id: ID!
  pullRequest: PullRequest!
  ref: Ref
}

""""""
type Deployment implements Node {
  commit: Commit
  commitOid: String!
  createdAt: DateTime!
  creator: Actor!
  databaseId: Int
  description: String
  environment: String
  id: ID!
  latestEnvironment: String
  latestStatus: DeploymentStatus
  originalEnvironment: String
  payload: String
  ref: Ref
  repository: Repository!
  state: DeploymentState
  statuses(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DeploymentStatusConnection
  task: String
  updatedAt: DateTime!
}

""""""
type DeploymentConnection {
  edges: [DeploymentEdge]
  nodes: [Deployment]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DeploymentEdge {
  cursor: String!
  node: Deployment
}

""""""
type DeploymentEnvironmentChangedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  deploymentStatus: DeploymentStatus!
  id: ID!
  pullRequest: PullRequest!
}

""""""
input DeploymentOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order deployments by."""
  field: DeploymentOrderField!
}

""""""
enum DeploymentOrderField {
  CREATED_AT
}

""""""
type DeploymentProtectionRule {
  databaseId: Int
  reviewers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DeploymentReviewerConnection!
  timeout: Int!
  type: DeploymentProtectionRuleType!
}

""""""
type DeploymentProtectionRuleConnection {
  edges: [DeploymentProtectionRuleEdge]
  nodes: [DeploymentProtectionRule]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DeploymentProtectionRuleEdge {
  cursor: String!
  node: DeploymentProtectionRule
}

""""""
enum DeploymentProtectionRuleType {
  REQUIRED_REVIEWERS
  WAIT_TIMER
}

""""""
type DeploymentRequest {
  currentUserCanApprove: Boolean!
  environment: Environment!
  reviewers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DeploymentReviewerConnection!
  waitTimer: Int!
  waitTimerStartedAt: DateTime
}

""""""
type DeploymentRequestConnection {
  edges: [DeploymentRequestEdge]
  nodes: [DeploymentRequest]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DeploymentRequestEdge {
  cursor: String!
  node: DeploymentRequest
}

""""""
type DeploymentReview implements Node {
  comment: String!
  databaseId: Int
  environments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): EnvironmentConnection!
  id: ID!
  state: DeploymentReviewState!
  user: User!
}

""""""
type DeploymentReviewConnection {
  edges: [DeploymentReviewEdge]
  nodes: [DeploymentReview]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DeploymentReviewEdge {
  cursor: String!
  node: DeploymentReview
}

""""""
enum DeploymentReviewState {
  APPROVED
  REJECTED
}

""""""
union DeploymentReviewer = Team | User

""""""
type DeploymentReviewerConnection {
  edges: [DeploymentReviewerEdge]
  nodes: [DeploymentReviewer]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DeploymentReviewerEdge {
  cursor: String!
  node: DeploymentReviewer
}

""""""
enum DeploymentState {
  ABANDONED
  ACTIVE
  DESTROYED
  ERROR
  FAILURE
  INACTIVE
  IN_PROGRESS
  PENDING
  QUEUED
  SUCCESS
  WAITING
}

""""""
type DeploymentStatus implements Node {
  createdAt: DateTime!
  creator: Actor!
  deployment: Deployment!
  description: String
  environment: String @preview(toggledBy: "flash-preview")
  environmentUrl: URI
  id: ID!
  logUrl: URI
  state: DeploymentStatusState!
  updatedAt: DateTime!
}

""""""
type DeploymentStatusConnection {
  edges: [DeploymentStatusEdge]
  nodes: [DeploymentStatus]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DeploymentStatusEdge {
  cursor: String!
  node: DeploymentStatus
}

""""""
enum DeploymentStatusState {
  ERROR
  FAILURE
  INACTIVE
  IN_PROGRESS
  PENDING
  QUEUED
  SUCCESS
  WAITING
}

""""""
input DequeuePullRequestInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the pull request to be dequeued."""
  id: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type DequeuePullRequestPayload {
  clientMutationId: String
  mergeQueueEntry: MergeQueueEntry
}

""""""
enum DiffSide {
  LEFT
  RIGHT
}

""""""
input DisablePullRequestAutoMergeInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the pull request to disable auto merge on."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type DisablePullRequestAutoMergePayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
type DisconnectedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  isCrossRepository: Boolean!
  source: ReferencedSubject!
  subject: ReferencedSubject!
}

""""""
type Discussion implements Closable & Comment & Deletable & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & Updatable & Votable {
  activeLockReason: LockReason
  answer: DiscussionComment
  answerChosenAt: DateTime
  answerChosenBy: Actor
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  category: DiscussionCategory!
  closed: Boolean!
  closedAt: DateTime
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DiscussionCommentConnection!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isAnswered: Boolean
  labels(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for labels returned from the connection."""
    orderBy: LabelOrder = { field: CREATED_AT, direction: ASC }
  ): LabelConnection
  lastEditedAt: DateTime
  locked: Boolean!
  number: Int!
  poll: DiscussionPoll
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  stateReason: DiscussionStateReason
  title: String!
  updatedAt: DateTime!
  upvoteCount: Int!
  url: URI!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanClose: Boolean!
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanReopen: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCanUpvote: Boolean!
  viewerDidAuthor: Boolean!
  viewerHasUpvoted: Boolean!
  viewerSubscription: SubscriptionState
}

""""""
type DiscussionCategory implements Node & RepositoryNode {
  createdAt: DateTime!
  description: String
  emoji: String!
  emojiHTML: HTML!
  id: ID!
  isAnswerable: Boolean!
  name: String!
  repository: Repository!
  slug: String!
  updatedAt: DateTime!
}

""""""
type DiscussionCategoryConnection {
  edges: [DiscussionCategoryEdge]
  nodes: [DiscussionCategory]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DiscussionCategoryEdge {
  cursor: String!
  node: DiscussionCategory
}

""""""
enum DiscussionCloseReason {
  DUPLICATE
  OUTDATED
  RESOLVED
}

""""""
type DiscussionComment implements Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment & Votable {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  deletedAt: DateTime
  discussion: Discussion
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isAnswer: Boolean!
  isMinimized: Boolean!
  lastEditedAt: DateTime
  minimizedReason: String
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  replies(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DiscussionCommentConnection!
  replyTo: DiscussionComment
  resourcePath: URI!
  updatedAt: DateTime!
  upvoteCount: Int!
  url: URI!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMarkAsAnswer: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUnmarkAsAnswer: Boolean!
  viewerCanUpdate: Boolean!
  viewerCanUpvote: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerHasUpvoted: Boolean!
}

""""""
type DiscussionCommentConnection {
  edges: [DiscussionCommentEdge]
  nodes: [DiscussionComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DiscussionCommentEdge {
  cursor: String!
  node: DiscussionComment
}

""""""
type DiscussionConnection {
  edges: [DiscussionEdge]
  nodes: [Discussion]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DiscussionEdge {
  cursor: String!
  node: Discussion
}

""""""
input DiscussionOrder {
  
  """  The direction in which to order discussions by the specified field."""
  direction: OrderDirection!
  
  """  The field by which to order discussions."""
  field: DiscussionOrderField!
}

""""""
enum DiscussionOrderField {
  CREATED_AT
  UPDATED_AT
}

""""""
type DiscussionPoll implements Node {
  discussion: Discussion
  id: ID!
  options(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    How to order the options for the discussion poll."""
    orderBy: DiscussionPollOptionOrder = { field: AUTHORED_ORDER, direction: ASC }
  ): DiscussionPollOptionConnection
  question: String!
  totalVoteCount: Int!
  viewerCanVote: Boolean!
  viewerHasVoted: Boolean!
}

""""""
type DiscussionPollOption implements Node {
  id: ID!
  option: String!
  poll: DiscussionPoll
  totalVoteCount: Int!
  viewerHasVoted: Boolean!
}

""""""
type DiscussionPollOptionConnection {
  edges: [DiscussionPollOptionEdge]
  nodes: [DiscussionPollOption]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type DiscussionPollOptionEdge {
  cursor: String!
  node: DiscussionPollOption
}

""""""
input DiscussionPollOptionOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order poll options by."""
  field: DiscussionPollOptionOrderField!
}

""""""
enum DiscussionPollOptionOrderField {
  AUTHORED_ORDER
  VOTE_COUNT
}

""""""
enum DiscussionState {
  CLOSED
  OPEN
}

""""""
enum DiscussionStateReason {
  DUPLICATE
  OUTDATED
  REOPENED
  RESOLVED
}

""""""
input DismissPullRequestReviewInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The contents of the pull request review dismissal message."""
  message: String!
  
  """  The Node ID of the pull request review to modify."""
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

""""""
type DismissPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
}

""""""
enum DismissReason {
  FIX_STARTED
  INACCURATE
  NOT_USED
  NO_BANDWIDTH
  TOLERABLE_RISK
}

""""""
input DismissRepositoryVulnerabilityAlertInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The reason the Dependabot alert is being dismissed."""
  dismissReason: DismissReason!
  
  """  The Dependabot alert ID to dismiss."""
  repositoryVulnerabilityAlertId: ID! @possibleTypes(concreteTypes: [
      "RepositoryVulnerabilityAlert"
    ])
}

""""""
type DismissRepositoryVulnerabilityAlertPayload {
  clientMutationId: String
  repositoryVulnerabilityAlert: RepositoryVulnerabilityAlert
}

""""""
type DraftIssue implements Node {
  assignees(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  creator: Actor
  id: ID!
  projectV2Items(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2ItemConnection!
  projectsV2(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2Connection!
  title: String!
  updatedAt: DateTime!
}

""""""
input DraftPullRequestReviewComment {
  
  """  Body of the comment to leave."""
  body: String!
  
  """  Path to the file being commented on."""
  path: String!
  
  """  Position in the file to leave a comment on."""
  position: Int!
}

""""""
input DraftPullRequestReviewThread {
  
  """  Body of the comment to leave."""
  body: String!
  
  """  The line of the blob to which the thread refers. The end of the line range for multi-line comments."""
  line: Int!
  
  """  Path to the file being commented on."""
  path: String!
  
  """  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range."""
  side: DiffSide = RIGHT
  
  """  The first line of the range to which the comment refers."""
  startLine: Int
  
  """  The side of the diff on which the start line resides."""
  startSide: DiffSide = RIGHT
}

""""""
input EnablePullRequestAutoMergeInput {
  
  """  The email address to associate with this merge."""
  authorEmail: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Commit body to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit message is ignored."""
  commitBody: String
  
  """  Commit headline to use for the commit when the PR is mergable; if omitted, a
  default message will be used. NOTE: when merging with a merge queue any input
  value for commit headline is ignored."""
  commitHeadline: String
  
  """  The expected head OID of the pull request."""
  expectedHeadOid: GitObjectID
  
  """  The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging
  with a merge queue any input value for merge method is ignored."""
  mergeMethod: PullRequestMergeMethod = MERGE
  
  """  ID of the pull request to enable auto-merge on."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type EnablePullRequestAutoMergePayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
input EnqueuePullRequestInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The expected head OID of the pull request."""
  expectedHeadOid: GitObjectID
  
  """  Add the pull request to the front of the queue."""
  jump: Boolean
  
  """  The ID of the pull request to enqueue."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type EnqueuePullRequestPayload {
  clientMutationId: String
  mergeQueueEntry: MergeQueueEntry
}

""""""
type Enterprise implements AnnouncementBanner & Node {
  announcement: String
  announcementExpiresAt: DateTime
  announcementUserDismissible: Boolean
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  billingInfo: EnterpriseBillingInfo
  createdAt: DateTime!
  databaseId: Int
  description: String
  descriptionHTML: HTML!
  id: ID!
  location: String
  members(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Only return members within the selected GitHub Enterprise deployment"""
    deployment: EnterpriseUserDeployment
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Only return members with this two-factor authentication status. Does not
    include members who only have an account on a GitHub Enterprise Server instance."""
    hasTwoFactorEnabled: Boolean = null
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for members returned from the connection."""
    orderBy: EnterpriseMemberOrder = { field: LOGIN, direction: ASC }
    
    """    Only return members within the organizations with these logins"""
    organizationLogins: [String!]
    
    """    The search string to look for."""
    query: String
    
    """    The role of the user in the enterprise organization or server."""
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseMemberConnection!
  name: String!
  organizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations returned from the connection."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The search string to look for."""
    query: String
    
    """    The viewer's role in an organization."""
    viewerOrganizationRole: RoleInOrganization
  ): OrganizationConnection!
  ownerInfo: EnterpriseOwnerInfo
  resourcePath: URI!
  slug: String!
  url: URI!
  viewerIsAdmin: Boolean!
  websiteUrl: URI
}

""""""
type EnterpriseAdministratorConnection {
  edges: [EnterpriseAdministratorEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseAdministratorEdge {
  cursor: String!
  node: User
  role: EnterpriseAdministratorRole!
}

""""""
type EnterpriseAdministratorInvitation implements Node {
  createdAt: DateTime!
  email: String
  enterprise: Enterprise!
  id: ID!
  invitee: User
  inviter: User
  role: EnterpriseAdministratorRole!
}

""""""
type EnterpriseAdministratorInvitationConnection {
  edges: [EnterpriseAdministratorInvitationEdge]
  nodes: [EnterpriseAdministratorInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseAdministratorInvitationEdge {
  cursor: String!
  node: EnterpriseAdministratorInvitation
}

""""""
input EnterpriseAdministratorInvitationOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order enterprise administrator invitations by."""
  field: EnterpriseAdministratorInvitationOrderField!
}

""""""
enum EnterpriseAdministratorInvitationOrderField {
  CREATED_AT
}

""""""
enum EnterpriseAdministratorRole {
  BILLING_MANAGER
  OWNER
}

""""""
enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {
  ENTERPRISE_ORGANIZATIONS
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS
  EVERYWHERE
  SAME_ORGANIZATION
  SAME_ORGANIZATION_USER_ACCOUNTS
  USER_ACCOUNTS
}

""""""
interface EnterpriseAuditEntryData {
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
}

""""""
type EnterpriseBillingInfo {
  allLicensableUsersCount: Int!
  assetPacks: Int!
  bandwidthQuota: Float!
  bandwidthUsage: Float!
  bandwidthUsagePercentage: Int!
  storageQuota: Float!
  storageUsage: Float!
  storageUsagePercentage: Int!
  totalAvailableLicenses: Int!
  totalLicenses: Int!
}

""""""
type EnterpriseConnection {
  edges: [EnterpriseEdge]
  nodes: [Enterprise]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
enum EnterpriseDefaultRepositoryPermissionSettingValue {
  ADMIN
  NONE
  NO_POLICY
  READ
  WRITE
}

""""""
type EnterpriseEdge {
  cursor: String!
  node: Enterprise
}

""""""
enum EnterpriseEnabledDisabledSettingValue {
  DISABLED
  ENABLED
  NO_POLICY
}

""""""
enum EnterpriseEnabledSettingValue {
  ENABLED
  NO_POLICY
}

""""""
type EnterpriseFailedInvitationConnection {
  edges: [EnterpriseFailedInvitationEdge]
  nodes: [OrganizationInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
  totalUniqueUserCount: Int!
}

""""""
type EnterpriseFailedInvitationEdge {
  cursor: String!
  node: OrganizationInvitation
}

""""""
type EnterpriseIdentityProvider implements Node {
  digestMethod: SamlDigestAlgorithm
  enterprise: Enterprise
  externalIdentities(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter to external identities with the users login"""
    login: String
    
    """    Filter to external identities with valid org membership only"""
    membersOnly: Boolean
    
    """    Filter to external identities with the users userName/NameID attribute"""
    userName: String
  ): ExternalIdentityConnection!
  id: ID!
  idpCertificate: X509Certificate
  issuer: String
  recoveryCodes: [String!]
  signatureMethod: SamlSignatureAlgorithm
  ssoUrl: URI
}

""""""
union EnterpriseMember = EnterpriseUserAccount | User

""""""
type EnterpriseMemberConnection {
  edges: [EnterpriseMemberEdge]
  nodes: [EnterpriseMember]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseMemberEdge {
  cursor: String!
  node: EnterpriseMember
}

""""""
input EnterpriseMemberOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order enterprise members by."""
  field: EnterpriseMemberOrderField!
}

""""""
enum EnterpriseMemberOrderField {
  CREATED_AT
  LOGIN
}

""""""
enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  ALL
  DISABLED
  NO_POLICY
  PRIVATE
  PUBLIC
}

""""""
enum EnterpriseMembersCanMakePurchasesSettingValue {
  DISABLED
  ENABLED
}

""""""
enum EnterpriseMembershipType {
  ADMIN
  ALL
  BILLING_MANAGER
  ORG_MEMBERSHIP
}

""""""
input EnterpriseOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order enterprises by."""
  field: EnterpriseOrderField!
}

""""""
enum EnterpriseOrderField {
  NAME
}

""""""
type EnterpriseOrganizationMembershipConnection {
  edges: [EnterpriseOrganizationMembershipEdge]
  nodes: [Organization]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseOrganizationMembershipEdge {
  cursor: String!
  node: Organization
  role: EnterpriseUserAccountMembershipRole!
}

""""""
type EnterpriseOutsideCollaboratorConnection {
  edges: [EnterpriseOutsideCollaboratorEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseOutsideCollaboratorEdge {
  cursor: String!
  node: User
  repositories(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories."""
    orderBy: RepositoryOrder = { field: NAME, direction: ASC }
  ): EnterpriseRepositoryInfoConnection!
}

""""""
type EnterpriseOwnerInfo {
  admins(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Only return administrators with this two-factor authentication status."""
    hasTwoFactorEnabled: Boolean = null
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for administrators returned from the connection."""
    orderBy: EnterpriseMemberOrder = { field: LOGIN, direction: ASC }
    
    """    Only return members within the organizations with these logins"""
    organizationLogins: [String!]
    
    """    The search string to look for."""
    query: String
    
    """    The role to filter by."""
    role: EnterpriseAdministratorRole
  ): EnterpriseAdministratorConnection!
  affiliatedUsersWithTwoFactorDisabled(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue!
  allowPrivateRepositoryForkingSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  allowPrivateRepositoryForkingSettingPolicyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue!
  defaultRepositoryPermissionSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The permission to find organizations for."""
    value: DefaultRepositoryPermissionField!
  ): OrganizationConnection!
  domains(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Filter whether or not the domain is approved."""
    isApproved: Boolean = null
    
    """    Filter whether or not the domain is verified."""
    isVerified: Boolean = null
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for verifiable domains returned."""
    orderBy: VerifiableDomainOrder = { field: DOMAIN, direction: ASC }
  ): VerifiableDomainConnection!
  enterpriseServerInstallations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Whether or not to only return installations discovered via GitHub Connect."""
    connectedOnly: Boolean = false
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for Enterprise Server installations returned."""
    orderBy: EnterpriseServerInstallationOrder = { field: HOST_NAME, direction: ASC }
  ): EnterpriseServerInstallationConnection!
  failedInvitations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    The search string to look for."""
    query: String
  ): EnterpriseFailedInvitationConnection!
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!
  ipAllowListEntries(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for IP allow list entries returned."""
    orderBy: IpAllowListEntryOrder = { field: ALLOW_LIST_VALUE, direction: ASC }
  ): IpAllowListEntryConnection!
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue!
  isUpdatingDefaultRepositoryPermission: Boolean!
  isUpdatingTwoFactorRequirement: Boolean!
  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue!
  membersCanChangeRepositoryVisibilitySettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  membersCanCreateInternalRepositoriesSetting: Boolean
  membersCanCreatePrivateRepositoriesSetting: Boolean
  membersCanCreatePublicRepositoriesSetting: Boolean
  membersCanCreateRepositoriesSetting: EnterpriseMembersCanCreateRepositoriesSettingValue
  membersCanCreateRepositoriesSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting to find organizations for."""
    value: OrganizationMembersCanCreateRepositoriesSettingValue!
  ): OrganizationConnection!
  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanDeleteIssuesSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanDeleteRepositoriesSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanInviteCollaboratorsSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue!
  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanUpdateProtectedBranchesSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanViewDependencyInsightsSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue!
  oidcProvider: OIDCProvider
  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue!
  organizationProjectsSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  outsideCollaborators(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Only return outside collaborators with this two-factor authentication status."""
    hasTwoFactorEnabled: Boolean = null
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    The login of one specific outside collaborator."""
    login: String
    
    """    Ordering options for outside collaborators returned from the connection."""
    orderBy: EnterpriseMemberOrder = { field: LOGIN, direction: ASC }
    
    """    Only return outside collaborators within the organizations with these logins"""
    organizationLogins: [String!]
    
    """    The search string to look for."""
    query: String
    
    """    Only return outside collaborators on repositories with this visibility."""
    visibility: RepositoryVisibility
  ): EnterpriseOutsideCollaboratorConnection!
  pendingAdminInvitations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pending enterprise administrator invitations returned from the connection."""
    orderBy: EnterpriseAdministratorInvitationOrder = { field: CREATED_AT, direction: DESC }
    
    """    The search string to look for."""
    query: String
    
    """    The role to filter by."""
    role: EnterpriseAdministratorRole
  ): EnterpriseAdministratorInvitationConnection!
  pendingCollaboratorInvitations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pending repository collaborator invitations returned from the connection."""
    orderBy: RepositoryInvitationOrder = { field: CREATED_AT, direction: DESC }
    
    """    The search string to look for."""
    query: String
  ): RepositoryInvitationConnection!
  pendingMemberInvitations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Only return invitations matching this invitation source"""
    invitationSource: OrganizationInvitationSource
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Only return invitations within the organizations with these logins"""
    organizationLogins: [String!]
    
    """    The search string to look for."""
    query: String
  ): EnterprisePendingMemberInvitationConnection!
  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue!
  repositoryProjectsSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  samlIdentityProvider: EnterpriseIdentityProvider
  samlIdentityProviderSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: IdentityProviderConfigurationState!
  ): OrganizationConnection!
  supportEntitlements(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for support entitlement users returned from the connection."""
    orderBy: EnterpriseMemberOrder = { field: LOGIN, direction: ASC }
  ): EnterpriseMemberConnection!
  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue!
  teamDiscussionsSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
  twoFactorRequiredSetting: EnterpriseEnabledSettingValue!
  twoFactorRequiredSettingOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations with this setting."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The setting value to find organizations for."""
    value: Boolean!
  ): OrganizationConnection!
}

""""""
type EnterprisePendingMemberInvitationConnection {
  edges: [EnterprisePendingMemberInvitationEdge]
  nodes: [OrganizationInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
  totalUniqueUserCount: Int!
}

""""""
type EnterprisePendingMemberInvitationEdge {
  cursor: String!
  node: OrganizationInvitation
}

""""""
type EnterpriseRepositoryInfo implements Node {
  id: ID!
  isPrivate: Boolean!
  name: String!
  nameWithOwner: String!
}

""""""
type EnterpriseRepositoryInfoConnection {
  edges: [EnterpriseRepositoryInfoEdge]
  nodes: [EnterpriseRepositoryInfo]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseRepositoryInfoEdge {
  cursor: String!
  node: EnterpriseRepositoryInfo
}

""""""
type EnterpriseServerInstallation implements Node {
  createdAt: DateTime!
  customerName: String!
  hostName: String!
  id: ID!
  isConnected: Boolean!
  updatedAt: DateTime!
  userAccounts(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for Enterprise Server user accounts returned from the connection."""
    orderBy: EnterpriseServerUserAccountOrder = { field: LOGIN, direction: ASC }
  ): EnterpriseServerUserAccountConnection!
  userAccountsUploads(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for Enterprise Server user accounts uploads returned from the connection."""
    orderBy: EnterpriseServerUserAccountsUploadOrder = { field: CREATED_AT, direction: DESC }
  ): EnterpriseServerUserAccountsUploadConnection!
}

""""""
type EnterpriseServerInstallationConnection {
  edges: [EnterpriseServerInstallationEdge]
  nodes: [EnterpriseServerInstallation]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseServerInstallationEdge {
  cursor: String!
  node: EnterpriseServerInstallation
}

""""""
type EnterpriseServerInstallationMembershipConnection {
  edges: [EnterpriseServerInstallationMembershipEdge]
  nodes: [EnterpriseServerInstallation]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseServerInstallationMembershipEdge {
  cursor: String!
  node: EnterpriseServerInstallation
  role: EnterpriseUserAccountMembershipRole!
}

""""""
input EnterpriseServerInstallationOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order Enterprise Server installations by."""
  field: EnterpriseServerInstallationOrderField!
}

""""""
enum EnterpriseServerInstallationOrderField {
  CREATED_AT
  CUSTOMER_NAME
  HOST_NAME
}

""""""
type EnterpriseServerUserAccount implements Node {
  createdAt: DateTime!
  emails(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for Enterprise Server user account emails returned from the connection."""
    orderBy: EnterpriseServerUserAccountEmailOrder = { field: EMAIL, direction: ASC }
  ): EnterpriseServerUserAccountEmailConnection!
  enterpriseServerInstallation: EnterpriseServerInstallation!
  id: ID!
  isSiteAdmin: Boolean!
  login: String!
  profileName: String
  remoteCreatedAt: DateTime!
  remoteUserId: Int!
  updatedAt: DateTime!
}

""""""
type EnterpriseServerUserAccountConnection {
  edges: [EnterpriseServerUserAccountEdge]
  nodes: [EnterpriseServerUserAccount]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseServerUserAccountEdge {
  cursor: String!
  node: EnterpriseServerUserAccount
}

""""""
type EnterpriseServerUserAccountEmail implements Node {
  createdAt: DateTime!
  email: String!
  id: ID!
  isPrimary: Boolean!
  updatedAt: DateTime!
  userAccount: EnterpriseServerUserAccount!
}

""""""
type EnterpriseServerUserAccountEmailConnection {
  edges: [EnterpriseServerUserAccountEmailEdge]
  nodes: [EnterpriseServerUserAccountEmail]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseServerUserAccountEmailEdge {
  cursor: String!
  node: EnterpriseServerUserAccountEmail
}

""""""
input EnterpriseServerUserAccountEmailOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order emails by."""
  field: EnterpriseServerUserAccountEmailOrderField!
}

""""""
enum EnterpriseServerUserAccountEmailOrderField {
  EMAIL
}

""""""
input EnterpriseServerUserAccountOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order user accounts by."""
  field: EnterpriseServerUserAccountOrderField!
}

""""""
enum EnterpriseServerUserAccountOrderField {
  LOGIN
  REMOTE_CREATED_AT
}

""""""
type EnterpriseServerUserAccountsUpload implements Node {
  createdAt: DateTime!
  enterprise: Enterprise!
  enterpriseServerInstallation: EnterpriseServerInstallation!
  id: ID!
  name: String!
  syncState: EnterpriseServerUserAccountsUploadSyncState!
  updatedAt: DateTime!
}

""""""
type EnterpriseServerUserAccountsUploadConnection {
  edges: [EnterpriseServerUserAccountsUploadEdge]
  nodes: [EnterpriseServerUserAccountsUpload]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnterpriseServerUserAccountsUploadEdge {
  cursor: String!
  node: EnterpriseServerUserAccountsUpload
}

""""""
input EnterpriseServerUserAccountsUploadOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order user accounts uploads by."""
  field: EnterpriseServerUserAccountsUploadOrderField!
}

""""""
enum EnterpriseServerUserAccountsUploadOrderField {
  CREATED_AT
}

""""""
enum EnterpriseServerUserAccountsUploadSyncState {
  FAILURE
  PENDING
  SUCCESS
}

""""""
type EnterpriseUserAccount implements Actor & Node {
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  createdAt: DateTime!
  enterprise: Enterprise!
  enterpriseInstallations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for installations returned from the connection."""
    orderBy: EnterpriseServerInstallationOrder = { field: HOST_NAME, direction: ASC }
    
    """    The search string to look for."""
    query: String
    
    """    The role of the user in the installation."""
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseServerInstallationMembershipConnection!
  id: ID!
  login: String!
  name: String
  organizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for organizations returned from the connection."""
    orderBy: OrganizationOrder = { field: LOGIN, direction: ASC }
    
    """    The search string to look for."""
    query: String
    
    """    The role of the user in the enterprise organization."""
    role: EnterpriseUserAccountMembershipRole
  ): EnterpriseOrganizationMembershipConnection!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
  user: User
}

""""""
enum EnterpriseUserAccountMembershipRole {
  MEMBER
  OWNER
  UNAFFILIATED
}

""""""
enum EnterpriseUserDeployment {
  CLOUD
  SERVER
}

""""""
type Environment implements Node {
  databaseId: Int
  id: ID!
  name: String!
  protectionRules(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DeploymentProtectionRuleConnection!
}

""""""
type EnvironmentConnection {
  edges: [EnvironmentEdge]
  nodes: [Environment]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type EnvironmentEdge {
  cursor: String!
  node: Environment
}

""""""
enum EnvironmentOrderField {
  NAME
}

""""""
input Environments {
  
  """  The direction in which to order environments by the specified field."""
  direction: OrderDirection!
  
  """  The field to order environments by."""
  field: EnvironmentOrderField!
}

""""""
type ExternalIdentity implements Node {
  guid: String!
  id: ID!
  organizationInvitation: OrganizationInvitation
  samlIdentity: ExternalIdentitySamlAttributes
  scimIdentity: ExternalIdentityScimAttributes
  user: User
}

""""""
type ExternalIdentityAttribute {
  metadata: String
  name: String!
  value: String!
}

""""""
type ExternalIdentityConnection {
  edges: [ExternalIdentityEdge]
  nodes: [ExternalIdentity]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ExternalIdentityEdge {
  cursor: String!
  node: ExternalIdentity
}

""""""
type ExternalIdentitySamlAttributes {
  attributes: [ExternalIdentityAttribute!]!
  emails: [UserEmailMetadata!]
  familyName: String
  givenName: String
  groups: [String!]
  nameId: String
  username: String
}

""""""
type ExternalIdentityScimAttributes {
  emails: [UserEmailMetadata!]
  familyName: String
  givenName: String
  groups: [String!]
  username: String
}

""""""
input FileAddition {
  
  """  The base64 encoded contents of the file"""
  contents: Base64String!
  
  """  The path in the repository where the file will be located"""
  path: String!
}

"""       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       }"""
input FileChanges {
  
  """  File to add or change."""
  additions: [FileAddition!] = [
    
  ]
  
  """  Files to delete."""
  deletions: [FileDeletion!] = [
    
  ]
}

""""""
input FileDeletion {
  
  """  The path to delete"""
  path: String!
}

""""""
enum FileViewedState {
  DISMISSED
  UNVIEWED
  VIEWED
}

""""""
input FollowOrganizationInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the organization to follow."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type FollowOrganizationPayload {
  clientMutationId: String
  organization: Organization
}

""""""
input FollowUserInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the user to follow."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

""""""
type FollowUserPayload {
  clientMutationId: String
  user: User
}

""""""
type FollowerConnection {
  edges: [UserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type FollowingConnection {
  edges: [UserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type FundingLink {
  platform: FundingPlatform!
  url: URI!
}

""""""
enum FundingPlatform {
  COMMUNITY_BRIDGE
  CUSTOM
  GITHUB
  ISSUEHUNT
  KO_FI
  LFX_CROWDFUNDING
  LIBERAPAY
  OPEN_COLLECTIVE
  OTECHIE
  PATREON
  TIDELIFT
}

""""""
type GenericHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
}

""""""
type Gist implements Node & Starrable & UniformResourceLocatable {
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): GistCommentConnection!
  createdAt: DateTime!
  description: String
  files(
    """    The maximum number of files to return."""
    limit: Int = 10
    
    """    The oid of the files to return"""
    oid: GitObjectID
  ): [GistFile]
  forks(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for gists returned from the connection"""
    orderBy: GistOrder
  ): GistConnection!
  id: ID!
  isFork: Boolean!
  isPublic: Boolean!
  name: String!
  owner: RepositoryOwner
  pushedAt: DateTime
  resourcePath: URI!
  stargazerCount: Int!
  stargazers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: StarOrder
  ): StargazerConnection!
  updatedAt: DateTime!
  url: URI!
  viewerHasStarred: Boolean!
}

""""""
type GistComment implements Comment & Deletable & Minimizable & Node & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  gist: Gist!
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: DateTime
  minimizedReason: String
  publishedAt: DateTime
  updatedAt: DateTime!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

""""""
type GistCommentConnection {
  edges: [GistCommentEdge]
  nodes: [GistComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type GistCommentEdge {
  cursor: String!
  node: GistComment
}

""""""
type GistConnection {
  edges: [GistEdge]
  nodes: [Gist]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type GistEdge {
  cursor: String!
  node: Gist
}

""""""
type GistFile {
  encodedName: String
  encoding: String
  extension: String
  isImage: Boolean!
  isTruncated: Boolean!
  language: Language
  name: String
  size: Int
  text(
    """    Optionally truncate the returned file to this length."""
    truncate: Int
  ): String
}

""""""
input GistOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order repositories by."""
  field: GistOrderField!
}

""""""
enum GistOrderField {
  CREATED_AT
  PUSHED_AT
  UPDATED_AT
}

""""""
enum GistPrivacy {
  ALL
  PUBLIC
  SECRET
}

""""""
type GitActor {
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  date: GitTimestamp
  email: String
  name: String
  user: User
}

""""""
type GitActorConnection {
  edges: [GitActorEdge]
  nodes: [GitActor]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type GitActorEdge {
  cursor: String!
  node: GitActor
}

""""""
type GitHubMetadata {
  gitHubServicesSha: GitObjectID!
  gitIpAddresses: [String!]
  githubEnterpriseImporterIpAddresses: [String!]
  hookIpAddresses: [String!]
  importerIpAddresses: [String!]
  isPasswordAuthenticationVerifiable: Boolean!
  pagesIpAddresses: [String!]
}

""""""
interface GitObject {
  abbreviatedOid: String!
  commitResourcePath: URI!
  commitUrl: URI!
  id: ID!
  oid: GitObjectID!
  repository: Repository!
}

""""""
scalar GitObjectID

""""""
scalar GitRefname @preview(toggledBy: "update-refs-preview")

""""""
scalar GitSSHRemote

""""""
interface GitSignature {
  email: String!
  isValid: Boolean!
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

""""""
enum GitSignatureState {
  BAD_CERT
  BAD_EMAIL
  EXPIRED_KEY
  GPGVERIFY_ERROR
  GPGVERIFY_UNAVAILABLE
  INVALID
  MALFORMED_SIG
  NOT_SIGNING_KEY
  NO_USER
  OCSP_ERROR
  OCSP_PENDING
  OCSP_REVOKED
  UNKNOWN_KEY
  UNKNOWN_SIG_TYPE
  UNSIGNED
  UNVERIFIED_EMAIL
  VALID
}

""""""
scalar GitTimestamp

""""""
type GpgSignature implements GitSignature {
  email: String!
  isValid: Boolean!
  keyId: String
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

""""""
input GrantEnterpriseOrganizationsMigratorRoleInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise to which all organizations managed by it will be granted the migrator role."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The login of the user to grant the migrator role"""
  login: String!
}

""""""
type GrantEnterpriseOrganizationsMigratorRolePayload {
  clientMutationId: String
  organizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): OrganizationConnection
}

""""""
input GrantMigratorRoleInput {
  
  """  The user login or Team slug to grant the migrator role."""
  actor: String!
  
  """  Specifies the type of the actor, can be either USER or TEAM."""
  actorType: ActorType!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the organization that the user/team belongs to."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type GrantMigratorRolePayload {
  clientMutationId: String
  success: Boolean
}

""""""
scalar HTML

""""""
type HeadRefDeletedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  headRef: Ref
  headRefName: String!
  id: ID!
  pullRequest: PullRequest!
}

""""""
type HeadRefForcePushedEvent implements Node {
  actor: Actor
  afterCommit: Commit
  beforeCommit: Commit
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  ref: Ref
}

""""""
type HeadRefRestoredEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
}

""""""
type Hovercard {
  contexts: [HovercardContext!]!
}

""""""
interface HovercardContext {
  message: String!
  octicon: String!
}

""""""
enum IdentityProviderConfigurationState {
  CONFIGURED
  ENFORCED
  UNCONFIGURED
}

""""""
input ImportProjectInput {
  
  """  The description of Project."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A list of columns containing issues and pull requests."""
  columnImports: [ProjectColumnImport!]!
  
  """  The name of Project."""
  name: String!
  
  """  The name of the Organization or User to create the Project under."""
  ownerName: String!
  
  """  Whether the Project is public or not."""
  public: Boolean = false
}

""""""
type ImportProjectPayload {
  clientMutationId: String
  project: Project
}

""""""
input InviteEnterpriseAdminInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The email of the person to invite as an administrator."""
  email: String
  
  """  The ID of the enterprise to which you want to invite an administrator."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The login of a user to invite as an administrator."""
  invitee: String
  
  """  The role of the administrator."""
  role: EnterpriseAdministratorRole
}

""""""
type InviteEnterpriseAdminPayload {
  clientMutationId: String
  invitation: EnterpriseAdministratorInvitation
}

""""""
enum IpAllowListEnabledSettingValue {
  DISABLED
  ENABLED
}

""""""
type IpAllowListEntry implements Node {
  allowListValue: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  name: String
  owner: IpAllowListOwner!
  updatedAt: DateTime!
}

""""""
type IpAllowListEntryConnection {
  edges: [IpAllowListEntryEdge]
  nodes: [IpAllowListEntry]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type IpAllowListEntryEdge {
  cursor: String!
  node: IpAllowListEntry
}

""""""
input IpAllowListEntryOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order IP allow list entries by."""
  field: IpAllowListEntryOrderField!
}

""""""
enum IpAllowListEntryOrderField {
  ALLOW_LIST_VALUE
  CREATED_AT
}

""""""
enum IpAllowListForInstalledAppsEnabledSettingValue {
  DISABLED
  ENABLED
}

""""""
union IpAllowListOwner = App | Enterprise | Organization

""""""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  activeLockReason: LockReason
  assignees(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyResourcePath: URI!
  bodyText: String!
  bodyUrl: URI!
  closed: Boolean!
  closedAt: DateTime
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for issue comments returned from the connection."""
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  fullDatabaseId: BigInt
  hovercard(
    """    Whether or not to include notification contexts"""
    includeNotificationContexts: Boolean = true
  ): Hovercard!
  id: ID!
  includesCreatedEdit: Boolean!
  isPinned: Boolean
  isReadByViewer: Boolean
  labels(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for labels returned from the connection."""
    orderBy: LabelOrder = { field: CREATED_AT, direction: ASC }
  ): LabelConnection
  lastEditedAt: DateTime
  linkedBranches(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): LinkedBranchConnection!
  locked: Boolean!
  milestone: Milestone
  number: Int!
  participants(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  projectCards(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    A list of archived states to filter the cards by"""
    archivedStates: [ProjectCardArchivedState] = [
      ARCHIVED, NOT_ARCHIVED
    ]
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectCardConnection!
  projectItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Include archived items."""
    includeArchived: Boolean = true
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2ItemConnection!
  projectV2(
    """    The project number."""
    number: Int!
  ): ProjectV2
  projectsV2(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    How to order the returned projects."""
    orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }
    
    """    A project to search for under the the owner."""
    query: String
  ): ProjectV2Connection!
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  state: IssueState!
  stateReason: IssueStateReason
  timeline(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows filtering timeline events by a `since` timestamp."""
    since: DateTime
  ): IssueTimelineConnection! @deprecated(
    reason: "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC."
  )
  timelineItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Filter timeline items by type."""
    itemTypes: [IssueTimelineItemsItemType!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter timeline items by a `since` timestamp."""
    since: DateTime
    
    """    Skips the first _n_ elements in the list."""
    skip: Int
  ): IssueTimelineItemsConnection!
  title: String!
  titleHTML: String!
  trackedInIssues(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  trackedIssues(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): IssueConnection!
  trackedIssuesCount(
    """    Limit the count to tracked issues with the specified states."""
    states: [TrackedIssueStates]
  ): Int!
  updatedAt: DateTime!
  url: URI!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanClose: Boolean!
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanReopen: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerSubscription: SubscriptionState
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

""""""
enum IssueClosedStateReason {
  COMPLETED
  NOT_PLANNED
}

""""""
type IssueComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  fullDatabaseId: BigInt
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  issue: Issue!
  lastEditedAt: DateTime
  minimizedReason: String
  publishedAt: DateTime
  pullRequest: PullRequest
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

""""""
type IssueCommentConnection {
  edges: [IssueCommentEdge]
  nodes: [IssueComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type IssueCommentEdge {
  cursor: String!
  node: IssueComment
}

""""""
input IssueCommentOrder {
  
  """  The direction in which to order issue comments by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order issue comments by."""
  field: IssueCommentOrderField!
}

""""""
enum IssueCommentOrderField {
  UPDATED_AT
}

""""""
type IssueConnection {
  edges: [IssueEdge]
  nodes: [Issue]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type IssueContributionsByRepository {
  contributions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = { direction: DESC }
  ): CreatedIssueContributionConnection!
  repository: Repository!
}

""""""
type IssueEdge {
  cursor: String!
  node: Issue
}

""""""
input IssueFilters {
  
  """  List issues assigned to given name. Pass in `null` for issues with no assigned
  user, and `*` for issues assigned to any user."""
  assignee: String
  
  """  List issues created by given name."""
  createdBy: String
  
  """  List issues where the list of label names exist on the issue."""
  labels: [String!]
  
  """  List issues where the given name is mentioned in the issue."""
  mentioned: String
  
  """  List issues by given milestone argument. If an string representation of an
  integer is passed, it should refer to a milestone by its database ID. Pass in
  `null` for issues with no milestone, and `*` for issues that are assigned to any milestone."""
  milestone: String
  
  """  List issues by given milestone argument. If an string representation of an
  integer is passed, it should refer to a milestone by its number field. Pass in
  `null` for issues with no milestone, and `*` for issues that are assigned to any milestone."""
  milestoneNumber: String
  
  """  List issues that have been updated at or after the given date."""
  since: DateTime
  
  """  List issues filtered by the list of states given."""
  states: [IssueState!]
  
  """  List issues subscribed to by viewer."""
  viewerSubscribed: Boolean = false
}

""""""
union IssueOrPullRequest = Issue | PullRequest

""""""
input IssueOrder {
  
  """  The direction in which to order issues by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order issues by."""
  field: IssueOrderField!
}

""""""
enum IssueOrderField {
  COMMENTS
  CREATED_AT
  UPDATED_AT
}

""""""
enum IssueState {
  CLOSED
  OPEN
}

""""""
enum IssueStateReason {
  COMPLETED
  NOT_PLANNED
  REOPENED
}

""""""
type IssueTemplate {
  about: String
  assignees(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  body: String
  filename: String!
  labels(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for labels returned from the connection."""
    orderBy: LabelOrder = { field: CREATED_AT, direction: ASC }
  ): LabelConnection
  name: String!
  title: String
}

""""""
type IssueTimelineConnection {
  edges: [IssueTimelineItemEdge]
  nodes: [IssueTimelineItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
union IssueTimelineItem = AssignedEvent
  | ClosedEvent
  | Commit
  | CrossReferencedEvent
  | DemilestonedEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MilestonedEvent
  | ReferencedEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

""""""
type IssueTimelineItemEdge {
  cursor: String!
  node: IssueTimelineItem
}

""""""
union IssueTimelineItems = AddedToProjectEvent
  | AssignedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DisconnectedEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | ReferencedEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

""""""
type IssueTimelineItemsConnection {
  edges: [IssueTimelineItemsEdge]
  filteredCount: Int!
  nodes: [IssueTimelineItems]
  pageCount: Int!
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: DateTime!
}

""""""
type IssueTimelineItemsEdge {
  cursor: String!
  node: IssueTimelineItems
}

""""""
enum IssueTimelineItemsItemType {
  ADDED_TO_PROJECT_EVENT
  ASSIGNED_EVENT
  CLOSED_EVENT
  COMMENT_DELETED_EVENT
  CONNECTED_EVENT
  CONVERTED_NOTE_TO_ISSUE_EVENT
  CONVERTED_TO_DISCUSSION_EVENT
  CROSS_REFERENCED_EVENT
  DEMILESTONED_EVENT
  DISCONNECTED_EVENT
  ISSUE_COMMENT
  LABELED_EVENT
  LOCKED_EVENT
  MARKED_AS_DUPLICATE_EVENT
  MENTIONED_EVENT
  MILESTONED_EVENT
  MOVED_COLUMNS_IN_PROJECT_EVENT
  PINNED_EVENT
  REFERENCED_EVENT
  REMOVED_FROM_PROJECT_EVENT
  RENAMED_TITLE_EVENT
  REOPENED_EVENT
  SUBSCRIBED_EVENT
  TRANSFERRED_EVENT
  UNASSIGNED_EVENT
  UNLABELED_EVENT
  UNLOCKED_EVENT
  UNMARKED_AS_DUPLICATE_EVENT
  UNPINNED_EVENT
  UNSUBSCRIBED_EVENT
  USER_BLOCKED_EVENT
}

""""""
type JoinedGitHubContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  resourcePath: URI!
  url: URI!
  user: User!
}

""""""
type Label implements Node {
  color: String!
  createdAt: DateTime
  description: String
  id: ID!
  isDefault: Boolean!
  issues(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filtering options for issues returned from the connection."""
    filterBy: IssueFilters
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for issues returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the issues by."""
    states: [IssueState!]
  ): IssueConnection!
  name: String!
  pullRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    The base ref name to filter the pull requests by."""
    baseRefName: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    The head ref name to filter the pull requests by."""
    headRefName: String
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the pull requests by."""
    states: [PullRequestState!]
  ): PullRequestConnection!
  repository: Repository!
  resourcePath: URI!
  updatedAt: DateTime
  url: URI!
}

""""""
type LabelConnection {
  edges: [LabelEdge]
  nodes: [Label]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type LabelEdge {
  cursor: String!
  node: Label
}

""""""
input LabelOrder {
  
  """  The direction in which to order labels by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order labels by."""
  field: LabelOrderField!
}

""""""
enum LabelOrderField {
  CREATED_AT
  NAME
}

""""""
interface Labelable {
  labels(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for labels returned from the connection."""
    orderBy: LabelOrder = { field: CREATED_AT, direction: ASC }
  ): LabelConnection
}

""""""
type LabeledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  label: Label!
  labelable: Labelable!
}

""""""
type Language implements Node {
  color: String
  id: ID!
  name: String!
}

""""""
type LanguageConnection {
  edges: [LanguageEdge]
  nodes: [Language]
  pageInfo: PageInfo!
  totalCount: Int!
  totalSize: Int!
}

""""""
type LanguageEdge {
  cursor: String!
  node: Language!
  size: Int!
}

""""""
input LanguageOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order languages by."""
  field: LanguageOrderField!
}

""""""
enum LanguageOrderField {
  SIZE
}

""""""
type License implements Node {
  body: String!
  conditions: [LicenseRule]!
  description: String
  featured: Boolean!
  hidden: Boolean!
  id: ID!
  implementation: String
  key: String!
  limitations: [LicenseRule]!
  name: String!
  nickname: String
  permissions: [LicenseRule]!
  pseudoLicense: Boolean!
  spdxId: String
  url: URI
}

""""""
type LicenseRule {
  description: String!
  key: String!
  label: String!
}

""""""
input LinkProjectV2ToRepositoryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the project to link to the repository."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  The ID of the repository to link to the project."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type LinkProjectV2ToRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

""""""
input LinkProjectV2ToTeamInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the project to link to the team."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  The ID of the team to link to the project."""
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

""""""
type LinkProjectV2ToTeamPayload {
  clientMutationId: String
  team: Team
}

""""""
input LinkRepositoryToProjectInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Project to link to a Repository"""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
  
  """  The ID of the Repository to link to a Project."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type LinkRepositoryToProjectPayload {
  clientMutationId: String
  project: Project
  repository: Repository
}

""""""
type LinkedBranch implements Node {
  id: ID!
  ref: Ref
}

""""""
type LinkedBranchConnection {
  edges: [LinkedBranchEdge]
  nodes: [LinkedBranch]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type LinkedBranchEdge {
  cursor: String!
  node: LinkedBranch
}

""""""
input LockLockableInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A reason for why the item will be locked."""
  lockReason: LockReason
  
  """  ID of the item to be locked."""
  lockableId: ID! @possibleTypes(concreteTypes: [
      "Discussion", "Issue", "PullRequest"
    ]
    abstractType: "Lockable")
}

""""""
type LockLockablePayload {
  actor: Actor
  clientMutationId: String
  lockedRecord: Lockable
}

""""""
enum LockReason {
  OFF_TOPIC
  RESOLVED
  SPAM
  TOO_HEATED
}

""""""
interface Lockable {
  activeLockReason: LockReason
  locked: Boolean!
}

""""""
type LockedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  lockReason: LockReason
  lockable: Lockable!
}

""""""
type Mannequin implements Actor & Node & UniformResourceLocatable {
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  claimant: User
  createdAt: DateTime!
  databaseId: Int
  email: String
  id: ID!
  login: String!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
}

""""""
type MannequinConnection {
  edges: [MannequinEdge]
  nodes: [Mannequin]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type MannequinEdge {
  cursor: String!
  node: Mannequin
}

""""""
input MannequinOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order mannequins by."""
  field: MannequinOrderField!
}

""""""
enum MannequinOrderField {
  CREATED_AT
  LOGIN
}

""""""
input MarkDiscussionCommentAsAnswerInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion comment to mark as an answer."""
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

""""""
type MarkDiscussionCommentAsAnswerPayload {
  clientMutationId: String
  discussion: Discussion
}

""""""
input MarkFileAsViewedInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The path of the file to mark as viewed"""
  path: String!
  
  """  The Node ID of the pull request."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type MarkFileAsViewedPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
input MarkProjectV2AsTemplateInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Project to mark as a template."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type MarkProjectV2AsTemplatePayload {
  clientMutationId: String
  projectV2: ProjectV2
}

""""""
input MarkPullRequestReadyForReviewInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the pull request to be marked as ready for review."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type MarkPullRequestReadyForReviewPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
type MarkedAsDuplicateEvent implements Node {
  actor: Actor
  canonical: IssueOrPullRequest
  createdAt: DateTime!
  duplicate: IssueOrPullRequest
  id: ID!
  isCrossRepository: Boolean!
}

""""""
type MarketplaceCategory implements Node {
  description: String
  howItWorks: String
  id: ID!
  name: String!
  primaryListingCount: Int!
  resourcePath: URI!
  secondaryListingCount: Int!
  slug: String!
  url: URI!
}

""""""
type MarketplaceListing implements Node {
  app: App
  companyUrl: URI
  configurationResourcePath: URI!
  configurationUrl: URI!
  documentationUrl: URI
  extendedDescription: String
  extendedDescriptionHTML: HTML!
  fullDescription: String!
  fullDescriptionHTML: HTML!
  hasPublishedFreeTrialPlans: Boolean!
  hasTermsOfService: Boolean!
  hasVerifiedOwner: Boolean!
  howItWorks: String
  howItWorksHTML: HTML!
  id: ID!
  installationUrl: URI
  installedForViewer: Boolean!
  isArchived: Boolean!
  isDraft: Boolean!
  isPaid: Boolean!
  isPublic: Boolean!
  isRejected: Boolean!
  isUnverified: Boolean!
  isUnverifiedPending: Boolean!
  isVerificationPendingFromDraft: Boolean!
  isVerificationPendingFromUnverified: Boolean!
  isVerified: Boolean!
  logoBackgroundColor: String!
  logoUrl(
    """    The size in pixels of the resulting square image."""
    size: Int = 400
  ): URI
  name: String!
  normalizedShortDescription: String!
  pricingUrl: URI
  primaryCategory: MarketplaceCategory!
  privacyPolicyUrl: URI!
  resourcePath: URI!
  screenshotUrls: [String]!
  secondaryCategory: MarketplaceCategory
  shortDescription: String!
  slug: String!
  statusUrl: URI
  supportEmail: String
  supportUrl: URI!
  termsOfServiceUrl: URI
  url: URI!
  viewerCanAddPlans: Boolean!
  viewerCanApprove: Boolean!
  viewerCanDelist: Boolean!
  viewerCanEdit: Boolean!
  viewerCanEditCategories: Boolean!
  viewerCanEditPlans: Boolean!
  viewerCanRedraft: Boolean!
  viewerCanReject: Boolean!
  viewerCanRequestApproval: Boolean!
  viewerHasPurchased: Boolean!
  viewerHasPurchasedForAllOrganizations: Boolean!
  viewerIsListingAdmin: Boolean!
}

""""""
type MarketplaceListingConnection {
  edges: [MarketplaceListingEdge]
  nodes: [MarketplaceListing]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type MarketplaceListingEdge {
  cursor: String!
  node: MarketplaceListing
}

""""""
interface MemberStatusable {
  memberStatuses(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for user statuses returned from the connection."""
    orderBy: UserStatusOrder = { field: UPDATED_AT, direction: DESC }
  ): UserStatusConnection!
}

""""""
type MembersCanDeleteReposClearAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type MembersCanDeleteReposDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type MembersCanDeleteReposEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type MentionedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
}

""""""
input MergeBranchInput {
  
  """  The email address to associate with this commit."""
  authorEmail: String
  
  """  The name of the base branch that the provided head will be merged into."""
  base: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Message to use for the merge commit. If omitted, a default will be used."""
  commitMessage: String
  
  """  The head to merge into the base branch. This can be a branch name or a commit GitObjectID."""
  head: String!
  
  """  The Node ID of the Repository containing the base branch that will be modified."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type MergeBranchPayload {
  clientMutationId: String
  mergeCommit: Commit
}

""""""
enum MergeCommitMessage {
  BLANK
  PR_BODY
  PR_TITLE
}

""""""
enum MergeCommitTitle {
  MERGE_MESSAGE
  PR_TITLE
}

""""""
input MergePullRequestInput {
  
  """  The email address to associate with this merge."""
  authorEmail: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Commit body to use for the merge commit; if omitted, a default message will be used"""
  commitBody: String
  
  """  Commit headline to use for the merge commit; if omitted, a default message will be used."""
  commitHeadline: String
  
  """  OID that the pull request head ref must match to allow merge; if omitted, no check is performed."""
  expectedHeadOid: GitObjectID
  
  """  The merge method to use. If omitted, defaults to 'MERGE'"""
  mergeMethod: PullRequestMergeMethod = MERGE
  
  """  ID of the pull request to be merged."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type MergePullRequestPayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
type MergeQueue implements Node {
  configuration: MergeQueueConfiguration
  entries(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): MergeQueueEntryConnection
  id: ID!
  nextEntryEstimatedTimeToMerge: Int
  repository: Repository
  resourcePath: URI!
  url: URI!
}

""""""
type MergeQueueConfiguration {
  checkResponseTimeout: Int
  maximumEntriesToBuild: Int
  maximumEntriesToMerge: Int
  mergeMethod: PullRequestMergeMethod
  mergingStrategy: MergeQueueMergingStrategy
  minimumEntriesToMerge: Int
  minimumEntriesToMergeWaitTime: Int
}

""""""
type MergeQueueEntry implements Node {
  baseCommit: Commit
  enqueuedAt: DateTime!
  enqueuer: Actor!
  estimatedTimeToMerge: Int
  headCommit: Commit
  id: ID!
  jump: Boolean!
  mergeQueue: MergeQueue
  position: Int!
  pullRequest: PullRequest
  solo: Boolean!
  state: MergeQueueEntryState!
}

""""""
type MergeQueueEntryConnection {
  edges: [MergeQueueEntryEdge]
  nodes: [MergeQueueEntry]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type MergeQueueEntryEdge {
  cursor: String!
  node: MergeQueueEntry
}

""""""
enum MergeQueueEntryState {
  AWAITING_CHECKS
  LOCKED
  MERGEABLE
  QUEUED
  UNMERGEABLE
}

""""""
enum MergeQueueMergingStrategy {
  ALLGREEN
  HEADGREEN
}

""""""
enum MergeStateStatus {
  BEHIND
  BLOCKED
  CLEAN
  DIRTY
  DRAFT @deprecated(
    reason: "DRAFT state will be removed from this enum and `isDraft` should be used instead Use PullRequest.isDraft instead. Removal on 2021-01-01 UTC."
  )
  HAS_HOOKS
  UNKNOWN
  UNSTABLE
}

""""""
enum MergeableState {
  CONFLICTING
  MERGEABLE
  UNKNOWN
}

""""""
type MergedEvent implements Node & UniformResourceLocatable {
  actor: Actor
  commit: Commit
  createdAt: DateTime!
  id: ID!
  mergeRef: Ref
  mergeRefName: String!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
}

""""""
interface Migration {
  continueOnError: Boolean!
  createdAt: DateTime!
  databaseId: String
  failureReason: String
  id: ID!
  migrationLogUrl: URI
  migrationSource: MigrationSource!
  repositoryName: String!
  sourceUrl: URI!
  state: MigrationState!
  warningsCount: Int!
}

""""""
type MigrationSource implements Node {
  id: ID!
  name: String!
  type: MigrationSourceType!
  url: URI!
}

""""""
enum MigrationSourceType {
  AZURE_DEVOPS
  BITBUCKET_SERVER
  GITHUB_ARCHIVE
}

""""""
enum MigrationState {
  FAILED
  FAILED_VALIDATION
  IN_PROGRESS
  NOT_STARTED
  PENDING_VALIDATION
  QUEUED
  SUCCEEDED
}

""""""
type Milestone implements Closable & Node & UniformResourceLocatable {
  closed: Boolean!
  closedAt: DateTime
  createdAt: DateTime!
  creator: Actor
  description: String
  dueOn: DateTime
  id: ID!
  issues(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filtering options for issues returned from the connection."""
    filterBy: IssueFilters
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for issues returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the issues by."""
    states: [IssueState!]
  ): IssueConnection!
  number: Int!
  progressPercentage: Float!
  pullRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    The base ref name to filter the pull requests by."""
    baseRefName: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    The head ref name to filter the pull requests by."""
    headRefName: String
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the pull requests by."""
    states: [PullRequestState!]
  ): PullRequestConnection!
  repository: Repository!
  resourcePath: URI!
  state: MilestoneState!
  title: String!
  updatedAt: DateTime!
  url: URI!
  viewerCanClose: Boolean!
  viewerCanReopen: Boolean!
}

""""""
type MilestoneConnection {
  edges: [MilestoneEdge]
  nodes: [Milestone]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type MilestoneEdge {
  cursor: String!
  node: Milestone
}

""""""
union MilestoneItem = Issue | PullRequest

""""""
input MilestoneOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order milestones by."""
  field: MilestoneOrderField!
}

""""""
enum MilestoneOrderField {
  CREATED_AT
  DUE_DATE
  NUMBER
  UPDATED_AT
}

""""""
enum MilestoneState {
  CLOSED
  OPEN
}

""""""
type MilestonedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  milestoneTitle: String!
  subject: MilestoneItem!
}

""""""
interface Minimizable {
  isMinimized: Boolean!
  minimizedReason: String
  viewerCanMinimize: Boolean!
}

""""""
input MinimizeCommentInput {
  
  """  The classification of comment"""
  classifier: ReportedContentClassifiers!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: [
      "CommitComment",
      "DiscussionComment",
      "GistComment",
      "IssueComment",
      "PullRequestReviewComment"
    ]
    abstractType: "Minimizable")
}

""""""
type MinimizeCommentPayload {
  clientMutationId: String
  minimizedComment: Minimizable
}

""""""
input MoveProjectCardInput {
  
  """  Place the new card after the card with this id. Pass null to place it at the top."""
  afterCardId: ID @possibleTypes(concreteTypes: ["ProjectCard"])
  
  """  The id of the card to move."""
  cardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The id of the column to move it into."""
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

""""""
type MoveProjectCardPayload {
  cardEdge: ProjectCardEdge
  clientMutationId: String
}

""""""
input MoveProjectColumnInput {
  
  """  Place the new column after the column with this id. Pass null to place it at the front."""
  afterColumnId: ID @possibleTypes(concreteTypes: ["ProjectColumn"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The id of the column to move."""
  columnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

""""""
type MoveProjectColumnPayload {
  clientMutationId: String
  columnEdge: ProjectColumnEdge
}

""""""
type MovedColumnsInProjectEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  previousProjectColumnName: String! @preview(toggledBy: "starfox-preview")
  project: Project @preview(toggledBy: "starfox-preview")
  projectCard: ProjectCard @preview(toggledBy: "starfox-preview")
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

""""""
type Mutation {
  abortQueuedMigrations(
    """    Parameters for AbortQueuedMigrations"""
    input: AbortQueuedMigrationsInput!
  ): AbortQueuedMigrationsPayload
  acceptEnterpriseAdministratorInvitation(
    """    Parameters for AcceptEnterpriseAdministratorInvitation"""
    input: AcceptEnterpriseAdministratorInvitationInput!
  ): AcceptEnterpriseAdministratorInvitationPayload
  acceptTopicSuggestion(
    """    Parameters for AcceptTopicSuggestion"""
    input: AcceptTopicSuggestionInput!
  ): AcceptTopicSuggestionPayload
  addAssigneesToAssignable(
    """    Parameters for AddAssigneesToAssignable"""
    input: AddAssigneesToAssignableInput!
  ): AddAssigneesToAssignablePayload
  addComment(
    """    Parameters for AddComment"""
    input: AddCommentInput!
  ): AddCommentPayload
  addDiscussionComment(
    """    Parameters for AddDiscussionComment"""
    input: AddDiscussionCommentInput!
  ): AddDiscussionCommentPayload
  addDiscussionPollVote(
    """    Parameters for AddDiscussionPollVote"""
    input: AddDiscussionPollVoteInput!
  ): AddDiscussionPollVotePayload
  addEnterpriseOrganizationMember(
    """    Parameters for AddEnterpriseOrganizationMember"""
    input: AddEnterpriseOrganizationMemberInput!
  ): AddEnterpriseOrganizationMemberPayload
  addEnterpriseSupportEntitlement(
    """    Parameters for AddEnterpriseSupportEntitlement"""
    input: AddEnterpriseSupportEntitlementInput!
  ): AddEnterpriseSupportEntitlementPayload
  addLabelsToLabelable(
    """    Parameters for AddLabelsToLabelable"""
    input: AddLabelsToLabelableInput!
  ): AddLabelsToLabelablePayload
  addProjectCard(
    """    Parameters for AddProjectCard"""
    input: AddProjectCardInput!
  ): AddProjectCardPayload
  addProjectColumn(
    """    Parameters for AddProjectColumn"""
    input: AddProjectColumnInput!
  ): AddProjectColumnPayload
  addProjectV2DraftIssue(
    """    Parameters for AddProjectV2DraftIssue"""
    input: AddProjectV2DraftIssueInput!
  ): AddProjectV2DraftIssuePayload
  addProjectV2ItemById(
    """    Parameters for AddProjectV2ItemById"""
    input: AddProjectV2ItemByIdInput!
  ): AddProjectV2ItemByIdPayload
  addPullRequestReview(
    """    Parameters for AddPullRequestReview"""
    input: AddPullRequestReviewInput!
  ): AddPullRequestReviewPayload
  addPullRequestReviewComment(
    """    Parameters for AddPullRequestReviewComment"""
    input: AddPullRequestReviewCommentInput!
  ): AddPullRequestReviewCommentPayload
  addPullRequestReviewThread(
    """    Parameters for AddPullRequestReviewThread"""
    input: AddPullRequestReviewThreadInput!
  ): AddPullRequestReviewThreadPayload
  addPullRequestReviewThreadReply(
    """    Parameters for AddPullRequestReviewThreadReply"""
    input: AddPullRequestReviewThreadReplyInput!
  ): AddPullRequestReviewThreadReplyPayload
  addReaction(
    """    Parameters for AddReaction"""
    input: AddReactionInput!
  ): AddReactionPayload
  addStar(
    """    Parameters for AddStar"""
    input: AddStarInput!
  ): AddStarPayload
  addUpvote(
    """    Parameters for AddUpvote"""
    input: AddUpvoteInput!
  ): AddUpvotePayload
  addVerifiableDomain(
    """    Parameters for AddVerifiableDomain"""
    input: AddVerifiableDomainInput!
  ): AddVerifiableDomainPayload
  approveDeployments(
    """    Parameters for ApproveDeployments"""
    input: ApproveDeploymentsInput!
  ): ApproveDeploymentsPayload
  approveVerifiableDomain(
    """    Parameters for ApproveVerifiableDomain"""
    input: ApproveVerifiableDomainInput!
  ): ApproveVerifiableDomainPayload
  archiveProjectV2Item(
    """    Parameters for ArchiveProjectV2Item"""
    input: ArchiveProjectV2ItemInput!
  ): ArchiveProjectV2ItemPayload
  archiveRepository(
    """    Parameters for ArchiveRepository"""
    input: ArchiveRepositoryInput!
  ): ArchiveRepositoryPayload
  cancelEnterpriseAdminInvitation(
    """    Parameters for CancelEnterpriseAdminInvitation"""
    input: CancelEnterpriseAdminInvitationInput!
  ): CancelEnterpriseAdminInvitationPayload
  cancelSponsorship(
    """    Parameters for CancelSponsorship"""
    input: CancelSponsorshipInput!
  ): CancelSponsorshipPayload
  changeUserStatus(
    """    Parameters for ChangeUserStatus"""
    input: ChangeUserStatusInput!
  ): ChangeUserStatusPayload
  clearLabelsFromLabelable(
    """    Parameters for ClearLabelsFromLabelable"""
    input: ClearLabelsFromLabelableInput!
  ): ClearLabelsFromLabelablePayload
  clearProjectV2ItemFieldValue(
    """    Parameters for ClearProjectV2ItemFieldValue"""
    input: ClearProjectV2ItemFieldValueInput!
  ): ClearProjectV2ItemFieldValuePayload
  cloneProject(
    """    Parameters for CloneProject"""
    input: CloneProjectInput!
  ): CloneProjectPayload
  cloneTemplateRepository(
    """    Parameters for CloneTemplateRepository"""
    input: CloneTemplateRepositoryInput!
  ): CloneTemplateRepositoryPayload
  closeDiscussion(
    """    Parameters for CloseDiscussion"""
    input: CloseDiscussionInput!
  ): CloseDiscussionPayload
  closeIssue(
    """    Parameters for CloseIssue"""
    input: CloseIssueInput!
  ): CloseIssuePayload
  closePullRequest(
    """    Parameters for ClosePullRequest"""
    input: ClosePullRequestInput!
  ): ClosePullRequestPayload
  convertProjectCardNoteToIssue(
    """    Parameters for ConvertProjectCardNoteToIssue"""
    input: ConvertProjectCardNoteToIssueInput!
  ): ConvertProjectCardNoteToIssuePayload
  convertPullRequestToDraft(
    """    Parameters for ConvertPullRequestToDraft"""
    input: ConvertPullRequestToDraftInput!
  ): ConvertPullRequestToDraftPayload
  copyProjectV2(
    """    Parameters for CopyProjectV2"""
    input: CopyProjectV2Input!
  ): CopyProjectV2Payload
  createAttributionInvitation(
    """    Parameters for CreateAttributionInvitation"""
    input: CreateAttributionInvitationInput!
  ): CreateAttributionInvitationPayload
  createBranchProtectionRule(
    """    Parameters for CreateBranchProtectionRule"""
    input: CreateBranchProtectionRuleInput!
  ): CreateBranchProtectionRulePayload
  createCheckRun(
    """    Parameters for CreateCheckRun"""
    input: CreateCheckRunInput!
  ): CreateCheckRunPayload
  createCheckSuite(
    """    Parameters for CreateCheckSuite"""
    input: CreateCheckSuiteInput!
  ): CreateCheckSuitePayload
  createCommitOnBranch(
    """    Parameters for CreateCommitOnBranch"""
    input: CreateCommitOnBranchInput!
  ): CreateCommitOnBranchPayload
  createDeployment(
    """    Parameters for CreateDeployment"""
    input: CreateDeploymentInput!
  ): CreateDeploymentPayload @preview(toggledBy: "flash-preview")
  createDeploymentStatus(
    """    Parameters for CreateDeploymentStatus"""
    input: CreateDeploymentStatusInput!
  ): CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview")
  createDiscussion(
    """    Parameters for CreateDiscussion"""
    input: CreateDiscussionInput!
  ): CreateDiscussionPayload
  createEnterpriseOrganization(
    """    Parameters for CreateEnterpriseOrganization"""
    input: CreateEnterpriseOrganizationInput!
  ): CreateEnterpriseOrganizationPayload
  createEnvironment(
    """    Parameters for CreateEnvironment"""
    input: CreateEnvironmentInput!
  ): CreateEnvironmentPayload
  createIpAllowListEntry(
    """    Parameters for CreateIpAllowListEntry"""
    input: CreateIpAllowListEntryInput!
  ): CreateIpAllowListEntryPayload
  createIssue(
    """    Parameters for CreateIssue"""
    input: CreateIssueInput!
  ): CreateIssuePayload
  createLabel(
    """    Parameters for CreateLabel"""
    input: CreateLabelInput!
  ): CreateLabelPayload @preview(toggledBy: "bane-preview")
  createLinkedBranch(
    """    Parameters for CreateLinkedBranch"""
    input: CreateLinkedBranchInput!
  ): CreateLinkedBranchPayload
  createMigrationSource(
    """    Parameters for CreateMigrationSource"""
    input: CreateMigrationSourceInput!
  ): CreateMigrationSourcePayload
  createProject(
    """    Parameters for CreateProject"""
    input: CreateProjectInput!
  ): CreateProjectPayload
  createProjectV2(
    """    Parameters for CreateProjectV2"""
    input: CreateProjectV2Input!
  ): CreateProjectV2Payload
  createProjectV2Field(
    """    Parameters for CreateProjectV2Field"""
    input: CreateProjectV2FieldInput!
  ): CreateProjectV2FieldPayload
  createPullRequest(
    """    Parameters for CreatePullRequest"""
    input: CreatePullRequestInput!
  ): CreatePullRequestPayload
  createRef(
    """    Parameters for CreateRef"""
    input: CreateRefInput!
  ): CreateRefPayload
  createRepository(
    """    Parameters for CreateRepository"""
    input: CreateRepositoryInput!
  ): CreateRepositoryPayload
  createRepositoryRuleset(
    """    Parameters for CreateRepositoryRuleset"""
    input: CreateRepositoryRulesetInput!
  ): CreateRepositoryRulesetPayload
  createSponsorsListing(
    """    Parameters for CreateSponsorsListing"""
    input: CreateSponsorsListingInput!
  ): CreateSponsorsListingPayload
  createSponsorsTier(
    """    Parameters for CreateSponsorsTier"""
    input: CreateSponsorsTierInput!
  ): CreateSponsorsTierPayload
  createSponsorship(
    """    Parameters for CreateSponsorship"""
    input: CreateSponsorshipInput!
  ): CreateSponsorshipPayload
  createSponsorships(
    """    Parameters for CreateSponsorships"""
    input: CreateSponsorshipsInput!
  ): CreateSponsorshipsPayload
  createTeamDiscussion(
    """    Parameters for CreateTeamDiscussion"""
    input: CreateTeamDiscussionInput!
  ): CreateTeamDiscussionPayload
  createTeamDiscussionComment(
    """    Parameters for CreateTeamDiscussionComment"""
    input: CreateTeamDiscussionCommentInput!
  ): CreateTeamDiscussionCommentPayload
  declineTopicSuggestion(
    """    Parameters for DeclineTopicSuggestion"""
    input: DeclineTopicSuggestionInput!
  ): DeclineTopicSuggestionPayload
  deleteBranchProtectionRule(
    """    Parameters for DeleteBranchProtectionRule"""
    input: DeleteBranchProtectionRuleInput!
  ): DeleteBranchProtectionRulePayload
  deleteDeployment(
    """    Parameters for DeleteDeployment"""
    input: DeleteDeploymentInput!
  ): DeleteDeploymentPayload
  deleteDiscussion(
    """    Parameters for DeleteDiscussion"""
    input: DeleteDiscussionInput!
  ): DeleteDiscussionPayload
  deleteDiscussionComment(
    """    Parameters for DeleteDiscussionComment"""
    input: DeleteDiscussionCommentInput!
  ): DeleteDiscussionCommentPayload
  deleteEnvironment(
    """    Parameters for DeleteEnvironment"""
    input: DeleteEnvironmentInput!
  ): DeleteEnvironmentPayload
  deleteIpAllowListEntry(
    """    Parameters for DeleteIpAllowListEntry"""
    input: DeleteIpAllowListEntryInput!
  ): DeleteIpAllowListEntryPayload
  deleteIssue(
    """    Parameters for DeleteIssue"""
    input: DeleteIssueInput!
  ): DeleteIssuePayload
  deleteIssueComment(
    """    Parameters for DeleteIssueComment"""
    input: DeleteIssueCommentInput!
  ): DeleteIssueCommentPayload
  deleteLabel(
    """    Parameters for DeleteLabel"""
    input: DeleteLabelInput!
  ): DeleteLabelPayload @preview(toggledBy: "bane-preview")
  deleteLinkedBranch(
    """    Parameters for DeleteLinkedBranch"""
    input: DeleteLinkedBranchInput!
  ): DeleteLinkedBranchPayload
  deletePackageVersion(
    """    Parameters for DeletePackageVersion"""
    input: DeletePackageVersionInput!
  ): DeletePackageVersionPayload @preview(toggledBy: "package-deletes-preview")
  deleteProject(
    """    Parameters for DeleteProject"""
    input: DeleteProjectInput!
  ): DeleteProjectPayload
  deleteProjectCard(
    """    Parameters for DeleteProjectCard"""
    input: DeleteProjectCardInput!
  ): DeleteProjectCardPayload
  deleteProjectColumn(
    """    Parameters for DeleteProjectColumn"""
    input: DeleteProjectColumnInput!
  ): DeleteProjectColumnPayload
  deleteProjectV2(
    """    Parameters for DeleteProjectV2"""
    input: DeleteProjectV2Input!
  ): DeleteProjectV2Payload
  deleteProjectV2Field(
    """    Parameters for DeleteProjectV2Field"""
    input: DeleteProjectV2FieldInput!
  ): DeleteProjectV2FieldPayload
  deleteProjectV2Item(
    """    Parameters for DeleteProjectV2Item"""
    input: DeleteProjectV2ItemInput!
  ): DeleteProjectV2ItemPayload
  deleteProjectV2Workflow(
    """    Parameters for DeleteProjectV2Workflow"""
    input: DeleteProjectV2WorkflowInput!
  ): DeleteProjectV2WorkflowPayload
  deletePullRequestReview(
    """    Parameters for DeletePullRequestReview"""
    input: DeletePullRequestReviewInput!
  ): DeletePullRequestReviewPayload
  deletePullRequestReviewComment(
    """    Parameters for DeletePullRequestReviewComment"""
    input: DeletePullRequestReviewCommentInput!
  ): DeletePullRequestReviewCommentPayload
  deleteRef(
    """    Parameters for DeleteRef"""
    input: DeleteRefInput!
  ): DeleteRefPayload
  deleteRepositoryRuleset(
    """    Parameters for DeleteRepositoryRuleset"""
    input: DeleteRepositoryRulesetInput!
  ): DeleteRepositoryRulesetPayload
  deleteTeamDiscussion(
    """    Parameters for DeleteTeamDiscussion"""
    input: DeleteTeamDiscussionInput!
  ): DeleteTeamDiscussionPayload
  deleteTeamDiscussionComment(
    """    Parameters for DeleteTeamDiscussionComment"""
    input: DeleteTeamDiscussionCommentInput!
  ): DeleteTeamDiscussionCommentPayload
  deleteVerifiableDomain(
    """    Parameters for DeleteVerifiableDomain"""
    input: DeleteVerifiableDomainInput!
  ): DeleteVerifiableDomainPayload
  dequeuePullRequest(
    """    Parameters for DequeuePullRequest"""
    input: DequeuePullRequestInput!
  ): DequeuePullRequestPayload
  disablePullRequestAutoMerge(
    """    Parameters for DisablePullRequestAutoMerge"""
    input: DisablePullRequestAutoMergeInput!
  ): DisablePullRequestAutoMergePayload
  dismissPullRequestReview(
    """    Parameters for DismissPullRequestReview"""
    input: DismissPullRequestReviewInput!
  ): DismissPullRequestReviewPayload
  dismissRepositoryVulnerabilityAlert(
    """    Parameters for DismissRepositoryVulnerabilityAlert"""
    input: DismissRepositoryVulnerabilityAlertInput!
  ): DismissRepositoryVulnerabilityAlertPayload
  enablePullRequestAutoMerge(
    """    Parameters for EnablePullRequestAutoMerge"""
    input: EnablePullRequestAutoMergeInput!
  ): EnablePullRequestAutoMergePayload
  enqueuePullRequest(
    """    Parameters for EnqueuePullRequest"""
    input: EnqueuePullRequestInput!
  ): EnqueuePullRequestPayload
  followOrganization(
    """    Parameters for FollowOrganization"""
    input: FollowOrganizationInput!
  ): FollowOrganizationPayload
  followUser(
    """    Parameters for FollowUser"""
    input: FollowUserInput!
  ): FollowUserPayload
  grantEnterpriseOrganizationsMigratorRole(
    """    Parameters for GrantEnterpriseOrganizationsMigratorRole"""
    input: GrantEnterpriseOrganizationsMigratorRoleInput!
  ): GrantEnterpriseOrganizationsMigratorRolePayload
  grantMigratorRole(
    """    Parameters for GrantMigratorRole"""
    input: GrantMigratorRoleInput!
  ): GrantMigratorRolePayload
  importProject(
    """    Parameters for ImportProject"""
    input: ImportProjectInput!
  ): ImportProjectPayload @preview(toggledBy: "slothette-preview")
  inviteEnterpriseAdmin(
    """    Parameters for InviteEnterpriseAdmin"""
    input: InviteEnterpriseAdminInput!
  ): InviteEnterpriseAdminPayload
  linkProjectV2ToRepository(
    """    Parameters for LinkProjectV2ToRepository"""
    input: LinkProjectV2ToRepositoryInput!
  ): LinkProjectV2ToRepositoryPayload
  linkProjectV2ToTeam(
    """    Parameters for LinkProjectV2ToTeam"""
    input: LinkProjectV2ToTeamInput!
  ): LinkProjectV2ToTeamPayload
  linkRepositoryToProject(
    """    Parameters for LinkRepositoryToProject"""
    input: LinkRepositoryToProjectInput!
  ): LinkRepositoryToProjectPayload
  lockLockable(
    """    Parameters for LockLockable"""
    input: LockLockableInput!
  ): LockLockablePayload
  markDiscussionCommentAsAnswer(
    """    Parameters for MarkDiscussionCommentAsAnswer"""
    input: MarkDiscussionCommentAsAnswerInput!
  ): MarkDiscussionCommentAsAnswerPayload
  markFileAsViewed(
    """    Parameters for MarkFileAsViewed"""
    input: MarkFileAsViewedInput!
  ): MarkFileAsViewedPayload
  markProjectV2AsTemplate(
    """    Parameters for MarkProjectV2AsTemplate"""
    input: MarkProjectV2AsTemplateInput!
  ): MarkProjectV2AsTemplatePayload
  markPullRequestReadyForReview(
    """    Parameters for MarkPullRequestReadyForReview"""
    input: MarkPullRequestReadyForReviewInput!
  ): MarkPullRequestReadyForReviewPayload
  mergeBranch(
    """    Parameters for MergeBranch"""
    input: MergeBranchInput!
  ): MergeBranchPayload
  mergePullRequest(
    """    Parameters for MergePullRequest"""
    input: MergePullRequestInput!
  ): MergePullRequestPayload
  minimizeComment(
    """    Parameters for MinimizeComment"""
    input: MinimizeCommentInput!
  ): MinimizeCommentPayload
  moveProjectCard(
    """    Parameters for MoveProjectCard"""
    input: MoveProjectCardInput!
  ): MoveProjectCardPayload
  moveProjectColumn(
    """    Parameters for MoveProjectColumn"""
    input: MoveProjectColumnInput!
  ): MoveProjectColumnPayload
  pinIssue(
    """    Parameters for PinIssue"""
    input: PinIssueInput!
  ): PinIssuePayload
  publishSponsorsTier(
    """    Parameters for PublishSponsorsTier"""
    input: PublishSponsorsTierInput!
  ): PublishSponsorsTierPayload
  regenerateEnterpriseIdentityProviderRecoveryCodes(
    """    Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes"""
    input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput!
  ): RegenerateEnterpriseIdentityProviderRecoveryCodesPayload
  regenerateVerifiableDomainToken(
    """    Parameters for RegenerateVerifiableDomainToken"""
    input: RegenerateVerifiableDomainTokenInput!
  ): RegenerateVerifiableDomainTokenPayload
  rejectDeployments(
    """    Parameters for RejectDeployments"""
    input: RejectDeploymentsInput!
  ): RejectDeploymentsPayload
  removeAssigneesFromAssignable(
    """    Parameters for RemoveAssigneesFromAssignable"""
    input: RemoveAssigneesFromAssignableInput!
  ): RemoveAssigneesFromAssignablePayload
  removeEnterpriseAdmin(
    """    Parameters for RemoveEnterpriseAdmin"""
    input: RemoveEnterpriseAdminInput!
  ): RemoveEnterpriseAdminPayload
  removeEnterpriseIdentityProvider(
    """    Parameters for RemoveEnterpriseIdentityProvider"""
    input: RemoveEnterpriseIdentityProviderInput!
  ): RemoveEnterpriseIdentityProviderPayload
  removeEnterpriseMember(
    """    Parameters for RemoveEnterpriseMember"""
    input: RemoveEnterpriseMemberInput!
  ): RemoveEnterpriseMemberPayload
  removeEnterpriseOrganization(
    """    Parameters for RemoveEnterpriseOrganization"""
    input: RemoveEnterpriseOrganizationInput!
  ): RemoveEnterpriseOrganizationPayload
  removeEnterpriseSupportEntitlement(
    """    Parameters for RemoveEnterpriseSupportEntitlement"""
    input: RemoveEnterpriseSupportEntitlementInput!
  ): RemoveEnterpriseSupportEntitlementPayload
  removeLabelsFromLabelable(
    """    Parameters for RemoveLabelsFromLabelable"""
    input: RemoveLabelsFromLabelableInput!
  ): RemoveLabelsFromLabelablePayload
  removeOutsideCollaborator(
    """    Parameters for RemoveOutsideCollaborator"""
    input: RemoveOutsideCollaboratorInput!
  ): RemoveOutsideCollaboratorPayload
  removeReaction(
    """    Parameters for RemoveReaction"""
    input: RemoveReactionInput!
  ): RemoveReactionPayload
  removeStar(
    """    Parameters for RemoveStar"""
    input: RemoveStarInput!
  ): RemoveStarPayload
  removeUpvote(
    """    Parameters for RemoveUpvote"""
    input: RemoveUpvoteInput!
  ): RemoveUpvotePayload
  reopenDiscussion(
    """    Parameters for ReopenDiscussion"""
    input: ReopenDiscussionInput!
  ): ReopenDiscussionPayload
  reopenIssue(
    """    Parameters for ReopenIssue"""
    input: ReopenIssueInput!
  ): ReopenIssuePayload
  reopenPullRequest(
    """    Parameters for ReopenPullRequest"""
    input: ReopenPullRequestInput!
  ): ReopenPullRequestPayload
  requestReviews(
    """    Parameters for RequestReviews"""
    input: RequestReviewsInput!
  ): RequestReviewsPayload
  rerequestCheckSuite(
    """    Parameters for RerequestCheckSuite"""
    input: RerequestCheckSuiteInput!
  ): RerequestCheckSuitePayload
  resolveReviewThread(
    """    Parameters for ResolveReviewThread"""
    input: ResolveReviewThreadInput!
  ): ResolveReviewThreadPayload
  retireSponsorsTier(
    """    Parameters for RetireSponsorsTier"""
    input: RetireSponsorsTierInput!
  ): RetireSponsorsTierPayload
  revertPullRequest(
    """    Parameters for RevertPullRequest"""
    input: RevertPullRequestInput!
  ): RevertPullRequestPayload
  revokeEnterpriseOrganizationsMigratorRole(
    """    Parameters for RevokeEnterpriseOrganizationsMigratorRole"""
    input: RevokeEnterpriseOrganizationsMigratorRoleInput!
  ): RevokeEnterpriseOrganizationsMigratorRolePayload
  revokeMigratorRole(
    """    Parameters for RevokeMigratorRole"""
    input: RevokeMigratorRoleInput!
  ): RevokeMigratorRolePayload
  setEnterpriseIdentityProvider(
    """    Parameters for SetEnterpriseIdentityProvider"""
    input: SetEnterpriseIdentityProviderInput!
  ): SetEnterpriseIdentityProviderPayload
  setOrganizationInteractionLimit(
    """    Parameters for SetOrganizationInteractionLimit"""
    input: SetOrganizationInteractionLimitInput!
  ): SetOrganizationInteractionLimitPayload
  setRepositoryInteractionLimit(
    """    Parameters for SetRepositoryInteractionLimit"""
    input: SetRepositoryInteractionLimitInput!
  ): SetRepositoryInteractionLimitPayload
  setUserInteractionLimit(
    """    Parameters for SetUserInteractionLimit"""
    input: SetUserInteractionLimitInput!
  ): SetUserInteractionLimitPayload
  startOrganizationMigration(
    """    Parameters for StartOrganizationMigration"""
    input: StartOrganizationMigrationInput!
  ): StartOrganizationMigrationPayload
  startRepositoryMigration(
    """    Parameters for StartRepositoryMigration"""
    input: StartRepositoryMigrationInput!
  ): StartRepositoryMigrationPayload
  submitPullRequestReview(
    """    Parameters for SubmitPullRequestReview"""
    input: SubmitPullRequestReviewInput!
  ): SubmitPullRequestReviewPayload
  transferEnterpriseOrganization(
    """    Parameters for TransferEnterpriseOrganization"""
    input: TransferEnterpriseOrganizationInput!
  ): TransferEnterpriseOrganizationPayload
  transferIssue(
    """    Parameters for TransferIssue"""
    input: TransferIssueInput!
  ): TransferIssuePayload
  unarchiveProjectV2Item(
    """    Parameters for UnarchiveProjectV2Item"""
    input: UnarchiveProjectV2ItemInput!
  ): UnarchiveProjectV2ItemPayload
  unarchiveRepository(
    """    Parameters for UnarchiveRepository"""
    input: UnarchiveRepositoryInput!
  ): UnarchiveRepositoryPayload
  unfollowOrganization(
    """    Parameters for UnfollowOrganization"""
    input: UnfollowOrganizationInput!
  ): UnfollowOrganizationPayload
  unfollowUser(
    """    Parameters for UnfollowUser"""
    input: UnfollowUserInput!
  ): UnfollowUserPayload
  unlinkProjectV2FromRepository(
    """    Parameters for UnlinkProjectV2FromRepository"""
    input: UnlinkProjectV2FromRepositoryInput!
  ): UnlinkProjectV2FromRepositoryPayload
  unlinkProjectV2FromTeam(
    """    Parameters for UnlinkProjectV2FromTeam"""
    input: UnlinkProjectV2FromTeamInput!
  ): UnlinkProjectV2FromTeamPayload
  unlinkRepositoryFromProject(
    """    Parameters for UnlinkRepositoryFromProject"""
    input: UnlinkRepositoryFromProjectInput!
  ): UnlinkRepositoryFromProjectPayload
  unlockLockable(
    """    Parameters for UnlockLockable"""
    input: UnlockLockableInput!
  ): UnlockLockablePayload
  unmarkDiscussionCommentAsAnswer(
    """    Parameters for UnmarkDiscussionCommentAsAnswer"""
    input: UnmarkDiscussionCommentAsAnswerInput!
  ): UnmarkDiscussionCommentAsAnswerPayload
  unmarkFileAsViewed(
    """    Parameters for UnmarkFileAsViewed"""
    input: UnmarkFileAsViewedInput!
  ): UnmarkFileAsViewedPayload
  unmarkIssueAsDuplicate(
    """    Parameters for UnmarkIssueAsDuplicate"""
    input: UnmarkIssueAsDuplicateInput!
  ): UnmarkIssueAsDuplicatePayload
  unmarkProjectV2AsTemplate(
    """    Parameters for UnmarkProjectV2AsTemplate"""
    input: UnmarkProjectV2AsTemplateInput!
  ): UnmarkProjectV2AsTemplatePayload
  unminimizeComment(
    """    Parameters for UnminimizeComment"""
    input: UnminimizeCommentInput!
  ): UnminimizeCommentPayload
  unpinIssue(
    """    Parameters for UnpinIssue"""
    input: UnpinIssueInput!
  ): UnpinIssuePayload
  unresolveReviewThread(
    """    Parameters for UnresolveReviewThread"""
    input: UnresolveReviewThreadInput!
  ): UnresolveReviewThreadPayload
  updateBranchProtectionRule(
    """    Parameters for UpdateBranchProtectionRule"""
    input: UpdateBranchProtectionRuleInput!
  ): UpdateBranchProtectionRulePayload
  updateCheckRun(
    """    Parameters for UpdateCheckRun"""
    input: UpdateCheckRunInput!
  ): UpdateCheckRunPayload
  updateCheckSuitePreferences(
    """    Parameters for UpdateCheckSuitePreferences"""
    input: UpdateCheckSuitePreferencesInput!
  ): UpdateCheckSuitePreferencesPayload
  updateDiscussion(
    """    Parameters for UpdateDiscussion"""
    input: UpdateDiscussionInput!
  ): UpdateDiscussionPayload
  updateDiscussionComment(
    """    Parameters for UpdateDiscussionComment"""
    input: UpdateDiscussionCommentInput!
  ): UpdateDiscussionCommentPayload
  updateEnterpriseAdministratorRole(
    """    Parameters for UpdateEnterpriseAdministratorRole"""
    input: UpdateEnterpriseAdministratorRoleInput!
  ): UpdateEnterpriseAdministratorRolePayload
  updateEnterpriseAllowPrivateRepositoryForkingSetting(
    """    Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting"""
    input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!
  ): UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload
  updateEnterpriseDefaultRepositoryPermissionSetting(
    """    Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting"""
    input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput!
  ): UpdateEnterpriseDefaultRepositoryPermissionSettingPayload
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting(
    """    Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting"""
    input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!
  ): UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload
  updateEnterpriseMembersCanCreateRepositoriesSetting(
    """    Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting"""
    input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!
  ): UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload
  updateEnterpriseMembersCanDeleteIssuesSetting(
    """    Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting"""
    input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput!
  ): UpdateEnterpriseMembersCanDeleteIssuesSettingPayload
  updateEnterpriseMembersCanDeleteRepositoriesSetting(
    """    Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting"""
    input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!
  ): UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload
  updateEnterpriseMembersCanInviteCollaboratorsSetting(
    """    Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting"""
    input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!
  ): UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload
  updateEnterpriseMembersCanMakePurchasesSetting(
    """    Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting"""
    input: UpdateEnterpriseMembersCanMakePurchasesSettingInput!
  ): UpdateEnterpriseMembersCanMakePurchasesSettingPayload
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting(
    """    Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting"""
    input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!
  ): UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload
  updateEnterpriseMembersCanViewDependencyInsightsSetting(
    """    Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting"""
    input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!
  ): UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload
  updateEnterpriseOrganizationProjectsSetting(
    """    Parameters for UpdateEnterpriseOrganizationProjectsSetting"""
    input: UpdateEnterpriseOrganizationProjectsSettingInput!
  ): UpdateEnterpriseOrganizationProjectsSettingPayload
  updateEnterpriseOwnerOrganizationRole(
    """    Parameters for UpdateEnterpriseOwnerOrganizationRole"""
    input: UpdateEnterpriseOwnerOrganizationRoleInput!
  ): UpdateEnterpriseOwnerOrganizationRolePayload
  updateEnterpriseProfile(
    """    Parameters for UpdateEnterpriseProfile"""
    input: UpdateEnterpriseProfileInput!
  ): UpdateEnterpriseProfilePayload
  updateEnterpriseRepositoryProjectsSetting(
    """    Parameters for UpdateEnterpriseRepositoryProjectsSetting"""
    input: UpdateEnterpriseRepositoryProjectsSettingInput!
  ): UpdateEnterpriseRepositoryProjectsSettingPayload
  updateEnterpriseTeamDiscussionsSetting(
    """    Parameters for UpdateEnterpriseTeamDiscussionsSetting"""
    input: UpdateEnterpriseTeamDiscussionsSettingInput!
  ): UpdateEnterpriseTeamDiscussionsSettingPayload
  updateEnterpriseTwoFactorAuthenticationRequiredSetting(
    """    Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting"""
    input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!
  ): UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload
  updateEnvironment(
    """    Parameters for UpdateEnvironment"""
    input: UpdateEnvironmentInput!
  ): UpdateEnvironmentPayload
  updateIpAllowListEnabledSetting(
    """    Parameters for UpdateIpAllowListEnabledSetting"""
    input: UpdateIpAllowListEnabledSettingInput!
  ): UpdateIpAllowListEnabledSettingPayload
  updateIpAllowListEntry(
    """    Parameters for UpdateIpAllowListEntry"""
    input: UpdateIpAllowListEntryInput!
  ): UpdateIpAllowListEntryPayload
  updateIpAllowListForInstalledAppsEnabledSetting(
    """    Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting"""
    input: UpdateIpAllowListForInstalledAppsEnabledSettingInput!
  ): UpdateIpAllowListForInstalledAppsEnabledSettingPayload
  updateIssue(
    """    Parameters for UpdateIssue"""
    input: UpdateIssueInput!
  ): UpdateIssuePayload
  updateIssueComment(
    """    Parameters for UpdateIssueComment"""
    input: UpdateIssueCommentInput!
  ): UpdateIssueCommentPayload
  updateLabel(
    """    Parameters for UpdateLabel"""
    input: UpdateLabelInput!
  ): UpdateLabelPayload @preview(toggledBy: "bane-preview")
  updateNotificationRestrictionSetting(
    """    Parameters for UpdateNotificationRestrictionSetting"""
    input: UpdateNotificationRestrictionSettingInput!
  ): UpdateNotificationRestrictionSettingPayload
  updateOrganizationAllowPrivateRepositoryForkingSetting(
    """    Parameters for UpdateOrganizationAllowPrivateRepositoryForkingSetting"""
    input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput!
  ): UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload
  updateOrganizationWebCommitSignoffSetting(
    """    Parameters for UpdateOrganizationWebCommitSignoffSetting"""
    input: UpdateOrganizationWebCommitSignoffSettingInput!
  ): UpdateOrganizationWebCommitSignoffSettingPayload
  updateProject(
    """    Parameters for UpdateProject"""
    input: UpdateProjectInput!
  ): UpdateProjectPayload
  updateProjectCard(
    """    Parameters for UpdateProjectCard"""
    input: UpdateProjectCardInput!
  ): UpdateProjectCardPayload
  updateProjectColumn(
    """    Parameters for UpdateProjectColumn"""
    input: UpdateProjectColumnInput!
  ): UpdateProjectColumnPayload
  updateProjectV2(
    """    Parameters for UpdateProjectV2"""
    input: UpdateProjectV2Input!
  ): UpdateProjectV2Payload
  updateProjectV2Collaborators(
    """    Parameters for UpdateProjectV2Collaborators"""
    input: UpdateProjectV2CollaboratorsInput!
  ): UpdateProjectV2CollaboratorsPayload
  updateProjectV2DraftIssue(
    """    Parameters for UpdateProjectV2DraftIssue"""
    input: UpdateProjectV2DraftIssueInput!
  ): UpdateProjectV2DraftIssuePayload
  updateProjectV2ItemFieldValue(
    """    Parameters for UpdateProjectV2ItemFieldValue"""
    input: UpdateProjectV2ItemFieldValueInput!
  ): UpdateProjectV2ItemFieldValuePayload
  updateProjectV2ItemPosition(
    """    Parameters for UpdateProjectV2ItemPosition"""
    input: UpdateProjectV2ItemPositionInput!
  ): UpdateProjectV2ItemPositionPayload
  updatePullRequest(
    """    Parameters for UpdatePullRequest"""
    input: UpdatePullRequestInput!
  ): UpdatePullRequestPayload
  updatePullRequestBranch(
    """    Parameters for UpdatePullRequestBranch"""
    input: UpdatePullRequestBranchInput!
  ): UpdatePullRequestBranchPayload
  updatePullRequestReview(
    """    Parameters for UpdatePullRequestReview"""
    input: UpdatePullRequestReviewInput!
  ): UpdatePullRequestReviewPayload
  updatePullRequestReviewComment(
    """    Parameters for UpdatePullRequestReviewComment"""
    input: UpdatePullRequestReviewCommentInput!
  ): UpdatePullRequestReviewCommentPayload
  updateRef(
    """    Parameters for UpdateRef"""
    input: UpdateRefInput!
  ): UpdateRefPayload
  updateRefs(
    """    Parameters for UpdateRefs"""
    input: UpdateRefsInput!
  ): UpdateRefsPayload @preview(toggledBy: "update-refs-preview")
  updateRepository(
    """    Parameters for UpdateRepository"""
    input: UpdateRepositoryInput!
  ): UpdateRepositoryPayload
  updateRepositoryRuleset(
    """    Parameters for UpdateRepositoryRuleset"""
    input: UpdateRepositoryRulesetInput!
  ): UpdateRepositoryRulesetPayload
  updateRepositoryWebCommitSignoffSetting(
    """    Parameters for UpdateRepositoryWebCommitSignoffSetting"""
    input: UpdateRepositoryWebCommitSignoffSettingInput!
  ): UpdateRepositoryWebCommitSignoffSettingPayload
  updateSponsorshipPreferences(
    """    Parameters for UpdateSponsorshipPreferences"""
    input: UpdateSponsorshipPreferencesInput!
  ): UpdateSponsorshipPreferencesPayload
  updateSubscription(
    """    Parameters for UpdateSubscription"""
    input: UpdateSubscriptionInput!
  ): UpdateSubscriptionPayload
  updateTeamDiscussion(
    """    Parameters for UpdateTeamDiscussion"""
    input: UpdateTeamDiscussionInput!
  ): UpdateTeamDiscussionPayload
  updateTeamDiscussionComment(
    """    Parameters for UpdateTeamDiscussionComment"""
    input: UpdateTeamDiscussionCommentInput!
  ): UpdateTeamDiscussionCommentPayload
  updateTeamReviewAssignment(
    """    Parameters for UpdateTeamReviewAssignment"""
    input: UpdateTeamReviewAssignmentInput!
  ): UpdateTeamReviewAssignmentPayload @preview(toggledBy: "stone-crop-preview")
  updateTeamsRepository(
    """    Parameters for UpdateTeamsRepository"""
    input: UpdateTeamsRepositoryInput!
  ): UpdateTeamsRepositoryPayload
  updateTopics(
    """    Parameters for UpdateTopics"""
    input: UpdateTopicsInput!
  ): UpdateTopicsPayload
  verifyVerifiableDomain(
    """    Parameters for VerifyVerifiableDomain"""
    input: VerifyVerifiableDomainInput!
  ): VerifyVerifiableDomainPayload
}

""""""
interface Node {
  id: ID!
}

""""""
enum NotificationRestrictionSettingValue {
  DISABLED
  ENABLED
}

""""""
type OIDCProvider implements Node {
  enterprise: Enterprise
  externalIdentities(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter to external identities with the users login"""
    login: String
    
    """    Filter to external identities with valid org membership only"""
    membersOnly: Boolean
    
    """    Filter to external identities with the users userName/NameID attribute"""
    userName: String
  ): ExternalIdentityConnection!
  id: ID!
  providerType: OIDCProviderType!
  tenantId: String!
}

""""""
enum OIDCProviderType {
  AAD
}

""""""
interface OauthApplicationAuditEntryData {
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
}

""""""
type OauthApplicationCreateAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  applicationUrl: URI
  callbackUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  rateLimit: Int
  state: OauthApplicationCreateAuditEntryState
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum OauthApplicationCreateAuditEntryState {
  ACTIVE
  PENDING_DELETION
  SUSPENDED
}

""""""
enum OperationType {
  ACCESS
  AUTHENTICATION
  CREATE
  MODIFY
  REMOVE
  RESTORE
  TRANSFER
}

""""""
enum OrderDirection {
  ASC
  DESC
}

""""""
type OrgAddBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  invitationEmail: String
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  permission: OrgAddMemberAuditEntryPermission
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum OrgAddMemberAuditEntryPermission {
  ADMIN
  READ
}

""""""
type OrgBlockUserAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  blockedUser: User
  blockedUserName: String
  blockedUserResourcePath: URI
  blockedUserUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgConfigDisableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgConfigEnableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgCreateAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  billingPlan: OrgCreateAuditEntryBillingPlan
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum OrgCreateAuditEntryBillingPlan {
  BUSINESS
  BUSINESS_PLUS
  FREE
  TIERED_PER_SEAT
  UNLIMITED
}

""""""
type OrgDisableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgDisableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  digestMethodUrl: URI
  id: ID!
  issuerUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  signatureMethodUrl: URI
  singleSignOnUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  digestMethodUrl: URI
  id: ID!
  issuerUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  signatureMethodUrl: URI
  singleSignOnUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
input OrgEnterpriseOwnerOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order enterprise owners by."""
  field: OrgEnterpriseOwnerOrderField!
}

""""""
enum OrgEnterpriseOwnerOrderField {
  LOGIN
}

""""""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  email: String
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationInvitation: OrganizationInvitation
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  reason: OrgRemoveBillingManagerAuditEntryReason
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum OrgRemoveBillingManagerAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

""""""
type OrgRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  membershipTypes: [OrgRemoveMemberAuditEntryMembershipType!]
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  reason: OrgRemoveMemberAuditEntryReason
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum OrgRemoveMemberAuditEntryMembershipType {
  ADMIN
  BILLING_MANAGER
  DIRECT_MEMBER
  OUTSIDE_COLLABORATOR
  SUSPENDED
  UNAFFILIATED
}

""""""
enum OrgRemoveMemberAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
  TWO_FACTOR_ACCOUNT_RECOVERY
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  USER_ACCOUNT_DELETED
}

""""""
type OrgRemoveOutsideCollaboratorAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  membershipTypes: [OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  reason: OrgRemoveOutsideCollaboratorAuditEntryReason
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  BILLING_MANAGER
  OUTSIDE_COLLABORATOR
  UNAFFILIATED
}

""""""
enum OrgRemoveOutsideCollaboratorAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

""""""
type OrgRestoreMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  restoredCustomEmailRoutingsCount: Int
  restoredIssueAssignmentsCount: Int
  restoredMemberships: [OrgRestoreMemberAuditEntryMembership!]
  restoredMembershipsCount: Int
  restoredRepositoriesCount: Int
  restoredRepositoryStarsCount: Int
  restoredRepositoryWatchesCount: Int
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
union OrgRestoreMemberAuditEntryMembership = OrgRestoreMemberMembershipOrganizationAuditEntryData
  | OrgRestoreMemberMembershipRepositoryAuditEntryData
  | OrgRestoreMemberMembershipTeamAuditEntryData

""""""
type OrgRestoreMemberMembershipOrganizationAuditEntryData implements OrganizationAuditEntryData {
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
}

""""""
type OrgRestoreMemberMembershipRepositoryAuditEntryData implements RepositoryAuditEntryData {
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
}

""""""
type OrgRestoreMemberMembershipTeamAuditEntryData implements TeamAuditEntryData {
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
}

""""""
type OrgUnblockUserAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  blockedUser: User
  blockedUserName: String
  blockedUserResourcePath: URI
  blockedUserUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type OrgUpdateDefaultRepositoryPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  permission: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  permissionWas: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  ADMIN
  NONE
  READ
  WRITE
}

""""""
type OrgUpdateMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  permission: OrgUpdateMemberAuditEntryPermission
  permissionWas: OrgUpdateMemberAuditEntryPermission
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum OrgUpdateMemberAuditEntryPermission {
  ADMIN
  READ
}

""""""
type OrgUpdateMemberRepositoryCreationPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  canCreateRepositories: Boolean
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
}

""""""
enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  ALL
  INTERNAL
  NONE
  PRIVATE
  PRIVATE_INTERNAL
  PUBLIC
  PUBLIC_INTERNAL
  PUBLIC_PRIVATE
}

""""""
type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  canInviteOutsideCollaboratorsToRepositories: Boolean
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  announcement: String
  announcementExpiresAt: DateTime
  announcementUserDismissible: Boolean
  anyPinnableItems(
    """    Filter to only a particular kind of pinnable item."""
    type: PinnableItemType
  ): Boolean!
  archivedAt: DateTime
  auditLog(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the returned audit log entries."""
    orderBy: AuditLogOrder = { field: CREATED_AT, direction: DESC }
    
    """    The query string to filter audit entries"""
    query: String
  ): OrganizationAuditEntryConnection!
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  createdAt: DateTime!
  databaseId: Int
  description: String
  descriptionHTML: String
  domains(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Filter by if the domain is approved."""
    isApproved: Boolean = null
    
    """    Filter by if the domain is verified."""
    isVerified: Boolean = null
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for verifiable domains returned."""
    orderBy: VerifiableDomainOrder = { field: DOMAIN, direction: ASC }
  ): VerifiableDomainConnection
  email: String
  enterpriseOwners(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for enterprise owners returned from the connection."""
    orderBy: OrgEnterpriseOwnerOrder = { field: LOGIN, direction: ASC }
    
    """    The organization role to filter by."""
    organizationRole: RoleInOrganization
    
    """    The search string to look for."""
    query: String
  ): OrganizationEnterpriseOwnerConnection!
  estimatedNextSponsorsPayoutInCents: Int!
  hasSponsorsListing: Boolean!
  id: ID!
  interactionAbility: RepositoryInteractionAbility
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!
  ipAllowListEntries(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for IP allow list entries returned."""
    orderBy: IpAllowListEntryOrder = { field: ALLOW_LIST_VALUE, direction: ASC }
  ): IpAllowListEntryConnection!
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue!
  isSponsoredBy(
    """    The target account's login."""
    accountLogin: String!
  ): Boolean!
  isSponsoringViewer: Boolean!
  isVerified: Boolean!
  itemShowcase: ProfileItemShowcase!
  location: String
  login: String!
  mannequins(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter mannequins by login."""
    login: String
    
    """    Ordering options for mannequins returned from the connection."""
    orderBy: MannequinOrder = { field: CREATED_AT, direction: ASC }
  ): MannequinConnection!
  memberStatuses(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for user statuses returned from the connection."""
    orderBy: UserStatusOrder = { field: UPDATED_AT, direction: DESC }
  ): UserStatusConnection!
  membersCanForkPrivateRepositories: Boolean!
  membersWithRole(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): OrganizationMemberConnection!
  monthlyEstimatedSponsorsIncomeInCents: Int!
  name: String
  newTeamResourcePath: URI!
  newTeamUrl: URI!
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue!
  organizationBillingEmail: String
  packages(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Find packages by their names."""
    names: [String]
    
    """    Ordering of the returned packages."""
    orderBy: PackageOrder = { field: CREATED_AT, direction: DESC }
    
    """    Filter registry package by type."""
    packageType: PackageType
    
    """    Find packages in a repository by ID."""
    repositoryId: ID
  ): PackageConnection!
  pendingMembers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  pinnableItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter the types of pinnable items that are returned."""
    types: [PinnableItemType!]
  ): PinnableItemConnection!
  pinnedItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter the types of pinned items that are returned."""
    types: [PinnableItemType!]
  ): PinnableItemConnection!
  pinnedItemsRemaining: Int!
  project(
    """    The project number to find."""
    number: Int!
  ): Project
  projectV2(
    """    The project number."""
    number: Int!
  ): ProjectV2
  projects(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for projects returned from the connection"""
    orderBy: ProjectOrder
    
    """    Query to search projects by, currently only searching by name."""
    search: String
    
    """    A list of states to filter the projects by."""
    states: [ProjectState!]
  ): ProjectConnection!
  projectsResourcePath: URI!
  projectsUrl: URI!
  projectsV2(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    How to order the returned projects."""
    orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }
    
    """    A project to search for under the the owner."""
    query: String
  ): ProjectV2Connection!
  recentProjects(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2Connection!
  repositories(
    """    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns."""
    affiliations: [RepositoryAffiliation]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    If non-null, filters repositories according to whether they have issues enabled"""
    hasIssuesEnabled: Boolean
    
    """    If non-null, filters repositories according to whether they are archived and not maintained"""
    isArchived: Boolean
    
    """    If non-null, filters repositories according to whether they are forks of another repository"""
    isFork: Boolean
    
    """    If non-null, filters repositories according to whether they have been locked"""
    isLocked: Boolean
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder
    
    """    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns."""
    ownerAffiliations: [RepositoryAffiliation] = [
      OWNER, COLLABORATOR
    ]
    
    """    If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy
  ): RepositoryConnection!
  repository(
    """    Follow repository renames. If disabled, a repository referenced by its old name will return an error."""
    followRenames: Boolean = true
    
    """    Name of Repository to find."""
    name: String!
  ): Repository
  repositoryDiscussionComments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter discussion comments to only those that were marked as the answer"""
    onlyAnswers: Boolean = false
    
    """    Filter discussion comments to only those in a specific repository."""
    repositoryId: ID
  ): DiscussionCommentConnection!
  repositoryDiscussions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions."""
    answered: Boolean = null
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for discussions returned from the connection."""
    orderBy: DiscussionOrder = { field: CREATED_AT, direction: DESC }
    
    """    Filter discussions to only those in a specific repository."""
    repositoryId: ID
    
    """    A list of states to filter the discussions by."""
    states: [DiscussionState!] = [
      
    ]
  ): DiscussionConnection!
  repositoryMigrations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repository migrations returned."""
    orderBy: RepositoryMigrationOrder = { field: CREATED_AT, direction: ASC }
    
    """    Filter repository migrations by repository name."""
    repositoryName: String
    
    """    Filter repository migrations by state."""
    state: MigrationState
  ): RepositoryMigrationConnection!
  requiresTwoFactorAuthentication: Boolean
  resourcePath: URI!
  ruleset(
    """    The ID of the ruleset to be returned."""
    databaseId: Int!
  ): RepositoryRuleset
  rulesets(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Return rulesets configured at higher levels that apply to this organization"""
    includeParents: Boolean = true
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryRulesetConnection
  samlIdentityProvider: OrganizationIdentityProvider
  sponsoring(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the users and organizations returned from the connection."""
    orderBy: SponsorOrder = { field: RELEVANCE, direction: DESC }
  ): SponsorConnection!
  sponsors(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsors returned from the connection."""
    orderBy: SponsorOrder = { field: RELEVANCE, direction: DESC }
    
    """    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see."""
    tierId: ID
  ): SponsorConnection!
  sponsorsActivities(
    """    Filter activities to only the specified actions."""
    actions: [SponsorsActivityAction!] = [
      
    ]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship."""
    includeAsSponsor: Boolean = false
    
    """    Whether or not to include private activities in the result set. Defaults to including public and private activities."""
    includePrivate: Boolean = true
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for activity returned from the connection."""
    orderBy: SponsorsActivityOrder = { field: TIMESTAMP, direction: DESC }
    
    """    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given."""
    period: SponsorsActivityPeriod = MONTH
    
    """    Filter activities to those that occurred on or after this time."""
    since: DateTime
    
    """    Filter activities to those that occurred before this time."""
    until: DateTime
  ): SponsorsActivityConnection!
  sponsorsListing: SponsorsListing
  sponsorshipForViewerAsSponsor(
    """    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled."""
    activeOnly: Boolean = true
  ): Sponsorship
  sponsorshipForViewerAsSponsorable(
    """    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled."""
    activeOnly: Boolean = true
  ): Sponsorship
  sponsorshipNewsletters(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsorship updates returned from the connection."""
    orderBy: SponsorshipNewsletterOrder = { field: CREATED_AT, direction: DESC }
  ): SponsorshipNewsletterConnection!
  sponsorshipsAsMaintainer(
    """    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received."""
    activeOnly: Boolean = true
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer."""
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
  sponsorshipsAsSponsor(
    """    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made."""
    activeOnly: Boolean = true
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins."""
    maintainerLogins: [String!]
    
    """    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer."""
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
  team(
    """    The name or slug of the team to find."""
    slug: String!
  ): Team
  teams(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    If true, filters teams that are mapped to an LDAP Group (Enterprise only)"""
    ldapMapped: Boolean
    
    """    If non-null, filters teams according to notification setting"""
    notificationSetting: TeamNotificationSetting
    
    """    Ordering options for teams returned from the connection"""
    orderBy: TeamOrder
    
    """    If non-null, filters teams according to privacy"""
    privacy: TeamPrivacy
    
    """    If non-null, filters teams with query on team name and team slug"""
    query: String
    
    """    If non-null, filters teams according to whether the viewer is an admin or member on team"""
    role: TeamRole
    
    """    If true, restrict to only root teams"""
    rootTeamsOnly: Boolean = false
    
    """    User logins to filter by"""
    userLogins: [String!]
  ): TeamConnection!
  teamsResourcePath: URI!
  teamsUrl: URI!
  totalSponsorshipAmountAsSponsorInCents(
    """    Filter payments to those that occurred on or after this time."""
    since: DateTime
    
    """    Filter payments to those made to the users or organizations with the specified usernames."""
    sponsorableLogins: [String!] = [
      
    ]
    
    """    Filter payments to those that occurred before this time."""
    until: DateTime
  ): Int
  twitterUsername: String
  updatedAt: DateTime!
  url: URI!
  viewerCanAdminister: Boolean!
  viewerCanChangePinnedItems: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanCreateRepositories: Boolean!
  viewerCanCreateTeams: Boolean!
  viewerCanSponsor: Boolean!
  viewerIsAMember: Boolean!
  viewerIsFollowing: Boolean!
  viewerIsSponsoring: Boolean!
  webCommitSignoffRequired: Boolean!
  websiteUrl: URI
}

""""""
union OrganizationAuditEntry = MembersCanDeleteReposClearAuditEntry
  | MembersCanDeleteReposDisableAuditEntry
  | MembersCanDeleteReposEnableAuditEntry
  | OauthApplicationCreateAuditEntry
  | OrgAddBillingManagerAuditEntry
  | OrgAddMemberAuditEntry
  | OrgBlockUserAuditEntry
  | OrgConfigDisableCollaboratorsOnlyAuditEntry
  | OrgConfigEnableCollaboratorsOnlyAuditEntry
  | OrgCreateAuditEntry
  | OrgDisableOauthAppRestrictionsAuditEntry
  | OrgDisableSamlAuditEntry
  | OrgDisableTwoFactorRequirementAuditEntry
  | OrgEnableOauthAppRestrictionsAuditEntry
  | OrgEnableSamlAuditEntry
  | OrgEnableTwoFactorRequirementAuditEntry
  | OrgInviteMemberAuditEntry
  | OrgInviteToBusinessAuditEntry
  | OrgOauthAppAccessApprovedAuditEntry
  | OrgOauthAppAccessBlockedAuditEntry
  | OrgOauthAppAccessDeniedAuditEntry
  | OrgOauthAppAccessRequestedAuditEntry
  | OrgOauthAppAccessUnblockedAuditEntry
  | OrgRemoveBillingManagerAuditEntry
  | OrgRemoveMemberAuditEntry
  | OrgRemoveOutsideCollaboratorAuditEntry
  | OrgRestoreMemberAuditEntry
  | OrgUnblockUserAuditEntry
  | OrgUpdateDefaultRepositoryPermissionAuditEntry
  | OrgUpdateMemberAuditEntry
  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | PrivateRepositoryForkingDisableAuditEntry
  | PrivateRepositoryForkingEnableAuditEntry
  | RepoAccessAuditEntry
  | RepoAddMemberAuditEntry
  | RepoAddTopicAuditEntry
  | RepoArchivedAuditEntry
  | RepoChangeMergeSettingAuditEntry
  | RepoConfigDisableAnonymousGitAccessAuditEntry
  | RepoConfigDisableCollaboratorsOnlyAuditEntry
  | RepoConfigDisableContributorsOnlyAuditEntry
  | RepoConfigDisableSockpuppetDisallowedAuditEntry
  | RepoConfigEnableAnonymousGitAccessAuditEntry
  | RepoConfigEnableCollaboratorsOnlyAuditEntry
  | RepoConfigEnableContributorsOnlyAuditEntry
  | RepoConfigEnableSockpuppetDisallowedAuditEntry
  | RepoConfigLockAnonymousGitAccessAuditEntry
  | RepoConfigUnlockAnonymousGitAccessAuditEntry
  | RepoCreateAuditEntry
  | RepoDestroyAuditEntry
  | RepoRemoveMemberAuditEntry
  | RepoRemoveTopicAuditEntry
  | RepositoryVisibilityChangeDisableAuditEntry
  | RepositoryVisibilityChangeEnableAuditEntry
  | TeamAddMemberAuditEntry
  | TeamAddRepositoryAuditEntry
  | TeamChangeParentTeamAuditEntry
  | TeamRemoveMemberAuditEntry
  | TeamRemoveRepositoryAuditEntry

""""""
type OrganizationAuditEntryConnection {
  edges: [OrganizationAuditEntryEdge]
  nodes: [OrganizationAuditEntry]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
interface OrganizationAuditEntryData {
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
}

""""""
type OrganizationAuditEntryEdge {
  cursor: String!
  node: OrganizationAuditEntry
}

""""""
type OrganizationConnection {
  edges: [OrganizationEdge]
  nodes: [Organization]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type OrganizationEdge {
  cursor: String!
  node: Organization
}

""""""
type OrganizationEnterpriseOwnerConnection {
  edges: [OrganizationEnterpriseOwnerEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type OrganizationEnterpriseOwnerEdge {
  cursor: String!
  node: User
  organizationRole: RoleInOrganization!
}

""""""
type OrganizationIdentityProvider implements Node {
  digestMethod: URI
  externalIdentities(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter to external identities with the users login"""
    login: String
    
    """    Filter to external identities with valid org membership only"""
    membersOnly: Boolean
    
    """    Filter to external identities with the users userName/NameID attribute"""
    userName: String
  ): ExternalIdentityConnection!
  id: ID!
  idpCertificate: X509Certificate
  issuer: String
  organization: Organization
  signatureMethod: URI
  ssoUrl: URI
}

""""""
type OrganizationInvitation implements Node {
  createdAt: DateTime!
  email: String
  id: ID!
  invitationSource: OrganizationInvitationSource!
  invitationType: OrganizationInvitationType!
  invitee: User
  inviter: User!
  organization: Organization!
  role: OrganizationInvitationRole!
}

""""""
type OrganizationInvitationConnection {
  edges: [OrganizationInvitationEdge]
  nodes: [OrganizationInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type OrganizationInvitationEdge {
  cursor: String!
  node: OrganizationInvitation
}

""""""
enum OrganizationInvitationRole {
  ADMIN
  BILLING_MANAGER
  DIRECT_MEMBER
  REINSTATE
}

""""""
enum OrganizationInvitationSource {
  MEMBER
  SCIM
  UNKNOWN
}

""""""
enum OrganizationInvitationType {
  EMAIL
  USER
}

""""""
type OrganizationMemberConnection {
  edges: [OrganizationMemberEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type OrganizationMemberEdge {
  cursor: String!
  hasTwoFactorEnabled: Boolean
  node: User
  role: OrganizationMemberRole
}

""""""
enum OrganizationMemberRole {
  ADMIN
  MEMBER
}

""""""
enum OrganizationMembersCanCreateRepositoriesSettingValue {
  ALL
  DISABLED
  INTERNAL
  PRIVATE
}

""""""
type OrganizationMigration implements Node {
  createdAt: DateTime!
  databaseId: String
  failureReason: String
  id: ID!
  remainingRepositoriesCount: Int
  sourceOrgName: String!
  sourceOrgUrl: URI!
  state: OrganizationMigrationState!
  targetOrgName: String!
  totalRepositoriesCount: Int
}

""""""
enum OrganizationMigrationState {
  FAILED
  FAILED_VALIDATION
  IN_PROGRESS
  NOT_STARTED
  PENDING_VALIDATION
  POST_REPO_MIGRATION
  PRE_REPO_MIGRATION
  QUEUED
  REPO_MIGRATION
  SUCCEEDED
}

""""""
union OrganizationOrUser = Organization | User

""""""
input OrganizationOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order organizations by."""
  field: OrganizationOrderField!
}

""""""
enum OrganizationOrderField {
  CREATED_AT
  LOGIN
}

""""""
type OrganizationTeamsHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
  relevantTeams(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): TeamConnection!
  teamsResourcePath: URI!
  teamsUrl: URI!
  totalTeamCount: Int!
}

""""""
type OrganizationsHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
  relevantOrganizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the User's organizations."""
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!
  totalOrganizationCount: Int!
}

""""""
type Package implements Node {
  id: ID!
  latestVersion: PackageVersion
  name: String!
  packageType: PackageType!
  repository: Repository
  statistics: PackageStatistics
  version(
    """    The package version."""
    version: String!
  ): PackageVersion
  versions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering of the returned packages."""
    orderBy: PackageVersionOrder = { field: CREATED_AT, direction: DESC }
  ): PackageVersionConnection!
}

""""""
type PackageConnection {
  edges: [PackageEdge]
  nodes: [Package]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PackageEdge {
  cursor: String!
  node: Package
}

""""""
type PackageFile implements Node {
  id: ID!
  md5: String
  name: String!
  packageVersion: PackageVersion
  sha1: String
  sha256: String
  size: Int
  updatedAt: DateTime!
  url: URI
}

""""""
type PackageFileConnection {
  edges: [PackageFileEdge]
  nodes: [PackageFile]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PackageFileEdge {
  cursor: String!
  node: PackageFile
}

""""""
input PackageFileOrder {
  
  """  The direction in which to order package files by the specified field."""
  direction: OrderDirection
  
  """  The field in which to order package files by."""
  field: PackageFileOrderField
}

""""""
enum PackageFileOrderField {
  CREATED_AT
}

""""""
input PackageOrder {
  
  """  The direction in which to order packages by the specified field."""
  direction: OrderDirection
  
  """  The field in which to order packages by."""
  field: PackageOrderField
}

""""""
enum PackageOrderField {
  CREATED_AT
}

""""""
interface PackageOwner {
  id: ID!
  packages(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Find packages by their names."""
    names: [String]
    
    """    Ordering of the returned packages."""
    orderBy: PackageOrder = { field: CREATED_AT, direction: DESC }
    
    """    Filter registry package by type."""
    packageType: PackageType
    
    """    Find packages in a repository by ID."""
    repositoryId: ID
  ): PackageConnection!
}

""""""
type PackageStatistics {
  downloadsTotalCount: Int!
}

""""""
type PackageTag implements Node {
  id: ID!
  name: String!
  version: PackageVersion
}

""""""
enum PackageType {
  DEBIAN
  DOCKER @deprecated(
    reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
  )
  MAVEN @deprecated(
    reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC."
  )
  NPM @deprecated(
    reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
  )
  NUGET @deprecated(
    reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC."
  )
  PYPI
  RUBYGEMS @deprecated(
    reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC."
  )
}

""""""
type PackageVersion implements Node {
  files(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering of the returned package files."""
    orderBy: PackageFileOrder = { field: CREATED_AT, direction: ASC }
  ): PackageFileConnection!
  id: ID!
  package: Package
  platform: String
  preRelease: Boolean!
  readme: String
  release: Release
  statistics: PackageVersionStatistics
  summary: String
  version: String!
}

""""""
type PackageVersionConnection {
  edges: [PackageVersionEdge]
  nodes: [PackageVersion]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PackageVersionEdge {
  cursor: String!
  node: PackageVersion
}

""""""
input PackageVersionOrder {
  
  """  The direction in which to order package versions by the specified field."""
  direction: OrderDirection
  
  """  The field in which to order package versions by."""
  field: PackageVersionOrderField
}

""""""
enum PackageVersionOrderField {
  CREATED_AT
}

""""""
type PackageVersionStatistics {
  downloadsTotalCount: Int!
}

""""""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

""""""
enum PatchStatus {
  ADDED
  CHANGED
  COPIED
  DELETED
  MODIFIED
  RENAMED
}

""""""
union PermissionGranter = Organization | Repository | Team

""""""
type PermissionSource {
  organization: Organization!
  permission: DefaultRepositoryPermissionField!
  source: PermissionGranter!
}

""""""
input PinIssueInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the issue to be pinned"""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

""""""
type PinIssuePayload {
  clientMutationId: String
  issue: Issue
}

""""""
union PinnableItem = Gist | Repository

""""""
type PinnableItemConnection {
  edges: [PinnableItemEdge]
  nodes: [PinnableItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PinnableItemEdge {
  cursor: String!
  node: PinnableItem
}

""""""
enum PinnableItemType {
  GIST
  ISSUE
  ORGANIZATION
  PROJECT
  PULL_REQUEST
  REPOSITORY
  TEAM
  USER
}

""""""
type PinnedDiscussion implements Node & RepositoryNode {
  createdAt: DateTime!
  databaseId: Int
  discussion: Discussion!
  gradientStopColors: [String!]!
  id: ID!
  pattern: PinnedDiscussionPattern!
  pinnedBy: Actor!
  preconfiguredGradient: PinnedDiscussionGradient
  repository: Repository!
  updatedAt: DateTime!
}

""""""
type PinnedDiscussionConnection {
  edges: [PinnedDiscussionEdge]
  nodes: [PinnedDiscussion]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PinnedDiscussionEdge {
  cursor: String!
  node: PinnedDiscussion
}

""""""
enum PinnedDiscussionGradient {
  BLUE_MINT
  BLUE_PURPLE
  PINK_BLUE
  PURPLE_CORAL
  RED_ORANGE
}

""""""
enum PinnedDiscussionPattern {
  CHEVRON_UP
  DOT
  DOT_FILL
  HEART_FILL
  PLUS
  ZAP
}

""""""
type PinnedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  issue: Issue!
}

""""""
type PinnedIssue implements Node {
  databaseId: Int
  fullDatabaseId: BigInt
  id: ID!
  issue: Issue!
  pinnedBy: Actor!
  repository: Repository!
}

""""""
type PinnedIssueConnection {
  edges: [PinnedIssueEdge]
  nodes: [PinnedIssue]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PinnedIssueEdge {
  cursor: String!
  node: PinnedIssue
}

""""""
scalar PreciseDateTime

""""""
type PrivateRepositoryForkingDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type PrivateRepositoryForkingEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type ProfileItemShowcase {
  hasPinnedItems: Boolean!
  items(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PinnableItemConnection!
}

""""""
interface ProfileOwner {
  anyPinnableItems(
    """    Filter to only a particular kind of pinnable item."""
    type: PinnableItemType
  ): Boolean!
  email: String
  id: ID!
  itemShowcase: ProfileItemShowcase!
  location: String
  login: String!
  name: String
  pinnableItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter the types of pinnable items that are returned."""
    types: [PinnableItemType!]
  ): PinnableItemConnection!
  pinnedItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter the types of pinned items that are returned."""
    types: [PinnableItemType!]
  ): PinnableItemConnection!
  pinnedItemsRemaining: Int!
  viewerCanChangePinnedItems: Boolean!
  websiteUrl: URI
}

""""""
type Project implements Closable & Node & Updatable {
  body: String
  bodyHTML: HTML!
  closed: Boolean!
  closedAt: DateTime
  columns(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectColumnConnection!
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  id: ID!
  name: String!
  number: Int!
  owner: ProjectOwner!
  pendingCards(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    A list of archived states to filter the cards by"""
    archivedStates: [ProjectCardArchivedState] = [
      ARCHIVED, NOT_ARCHIVED
    ]
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectCardConnection!
  progress: ProjectProgress!
  resourcePath: URI!
  state: ProjectState!
  updatedAt: DateTime!
  url: URI!
  viewerCanClose: Boolean!
  viewerCanReopen: Boolean!
  viewerCanUpdate: Boolean!
}

""""""
type ProjectCard implements Node {
  column: ProjectColumn
  content: ProjectCardItem
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  id: ID!
  isArchived: Boolean!
  note: String
  project: Project!
  resourcePath: URI!
  state: ProjectCardState
  updatedAt: DateTime!
  url: URI!
}

""""""
enum ProjectCardArchivedState {
  ARCHIVED
  NOT_ARCHIVED
}

""""""
type ProjectCardConnection {
  edges: [ProjectCardEdge]
  nodes: [ProjectCard]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectCardEdge {
  cursor: String!
  node: ProjectCard
}

""""""
input ProjectCardImport {
  
  """  The issue or pull request number."""
  number: Int!
  
  """  Repository name with owner (owner/repository)."""
  repository: String!
}

""""""
union ProjectCardItem = Issue | PullRequest

""""""
enum ProjectCardState {
  CONTENT_ONLY
  NOTE_ONLY
  REDACTED
}

""""""
type ProjectColumn implements Node {
  cards(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    A list of archived states to filter the cards by"""
    archivedStates: [ProjectCardArchivedState] = [
      ARCHIVED, NOT_ARCHIVED
    ]
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectCardConnection!
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  name: String!
  project: Project!
  purpose: ProjectColumnPurpose
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
}

""""""
type ProjectColumnConnection {
  edges: [ProjectColumnEdge]
  nodes: [ProjectColumn]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectColumnEdge {
  cursor: String!
  node: ProjectColumn
}

""""""
input ProjectColumnImport {
  
  """  The name of the column."""
  columnName: String!
  
  """  A list of issues and pull requests in the column."""
  issues: [ProjectCardImport!]
  
  """  The position of the column, starting from 0."""
  position: Int!
}

""""""
enum ProjectColumnPurpose {
  DONE
  IN_PROGRESS
  TODO
}

""""""
type ProjectConnection {
  edges: [ProjectEdge]
  nodes: [Project]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectEdge {
  cursor: String!
  node: Project
}

""""""
input ProjectOrder {
  
  """  The direction in which to order projects by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order projects by."""
  field: ProjectOrderField!
}

""""""
enum ProjectOrderField {
  CREATED_AT
  NAME
  UPDATED_AT
}

""""""
interface ProjectOwner {
  id: ID!
  project(
    """    The project number to find."""
    number: Int!
  ): Project
  projects(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for projects returned from the connection"""
    orderBy: ProjectOrder
    
    """    Query to search projects by, currently only searching by name."""
    search: String
    
    """    A list of states to filter the projects by."""
    states: [ProjectState!]
  ): ProjectConnection!
  projectsResourcePath: URI!
  projectsUrl: URI!
  viewerCanCreateProjects: Boolean!
}

""""""
type ProjectProgress {
  doneCount: Int!
  donePercentage: Float!
  enabled: Boolean!
  inProgressCount: Int!
  inProgressPercentage: Float!
  todoCount: Int!
  todoPercentage: Float!
}

""""""
enum ProjectState {
  CLOSED
  OPEN
}

""""""
enum ProjectTemplate {
  AUTOMATED_KANBAN_V2
  AUTOMATED_REVIEWS_KANBAN
  BASIC_KANBAN
  BUG_TRIAGE
}

""""""
type ProjectV2 implements Closable & Node & Updatable {
  closed: Boolean!
  closedAt: DateTime
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  field(
    """    The name of the field"""
    name: String!
  ): ProjectV2FieldConfiguration
  fields(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for project v2 fields returned from the connection"""
    orderBy: ProjectV2FieldOrder = { field: POSITION, direction: ASC }
  ): ProjectV2FieldConfigurationConnection!
  id: ID!
  items(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for project v2 items returned from the connection"""
    orderBy: ProjectV2ItemOrder = { field: POSITION, direction: ASC }
  ): ProjectV2ItemConnection!
  number: Int!
  owner: ProjectV2Owner!
  public: Boolean!
  readme: String
  repositories(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder = { field: CREATED_AT, direction: DESC }
  ): RepositoryConnection!
  resourcePath: URI!
  shortDescription: String
  teams(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for teams returned from this connection."""
    orderBy: TeamOrder = { field: NAME, direction: ASC }
  ): TeamConnection!
  template: Boolean!
  title: String!
  updatedAt: DateTime!
  url: URI!
  view(
    """    The number of a view belonging to the project"""
    number: Int!
  ): ProjectV2View
  viewerCanClose: Boolean!
  viewerCanReopen: Boolean!
  viewerCanUpdate: Boolean!
  views(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for project v2 views returned from the connection"""
    orderBy: ProjectV2ViewOrder = { field: POSITION, direction: ASC }
  ): ProjectV2ViewConnection!
  workflow(
    """    The number of a workflow belonging to the project"""
    number: Int!
  ): ProjectV2Workflow
  workflows(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for project v2 workflows returned from the connection"""
    orderBy: ProjectV2WorkflowOrder = { field: NAME, direction: ASC }
  ): ProjectV2WorkflowConnection!
}

""""""
union ProjectV2Actor = Team | User

""""""
type ProjectV2ActorConnection {
  edges: [ProjectV2ActorEdge]
  nodes: [ProjectV2Actor]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectV2ActorEdge {
  cursor: String!
  node: ProjectV2Actor
}

""""""
input ProjectV2Collaborator {
  
  """  The role to grant the collaborator"""
  role: ProjectV2Roles!
  
  """  The ID of the team as a collaborator."""
  teamId: ID @possibleTypes(concreteTypes: ["Team"])
  
  """  The ID of the user as a collaborator."""
  userId: ID @possibleTypes(concreteTypes: ["User"])
}

""""""
type ProjectV2Connection {
  edges: [ProjectV2Edge]
  nodes: [ProjectV2]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
enum ProjectV2CustomFieldType {
  DATE
  NUMBER
  SINGLE_SELECT
  TEXT
}

""""""
type ProjectV2Edge {
  cursor: String!
  node: ProjectV2
}

""""""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  createdAt: DateTime!
  dataType: ProjectV2FieldType!
  databaseId: Int
  id: ID!
  name: String!
  project: ProjectV2!
  updatedAt: DateTime!
}

""""""
interface ProjectV2FieldCommon {
  createdAt: DateTime!
  dataType: ProjectV2FieldType!
  databaseId: Int
  id: ID!
  name: String!
  project: ProjectV2!
  updatedAt: DateTime!
}

""""""
union ProjectV2FieldConfiguration = ProjectV2Field
  | ProjectV2IterationField
  | ProjectV2SingleSelectField

""""""
type ProjectV2FieldConfigurationConnection {
  edges: [ProjectV2FieldConfigurationEdge]
  nodes: [ProjectV2FieldConfiguration]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectV2FieldConfigurationEdge {
  cursor: String!
  node: ProjectV2FieldConfiguration
}

""""""
type ProjectV2FieldConnection {
  edges: [ProjectV2FieldEdge]
  nodes: [ProjectV2Field]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectV2FieldEdge {
  cursor: String!
  node: ProjectV2Field
}

""""""
input ProjectV2FieldOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order the project v2 fields by."""
  field: ProjectV2FieldOrderField!
}

""""""
enum ProjectV2FieldOrderField {
  CREATED_AT
  NAME
  POSITION
}

""""""
enum ProjectV2FieldType {
  ASSIGNEES
  DATE
  ITERATION
  LABELS
  LINKED_PULL_REQUESTS
  MILESTONE
  NUMBER
  REPOSITORY
  REVIEWERS
  SINGLE_SELECT
  TEXT
  TITLE
  TRACKED_BY
  TRACKS
}

""""""
input ProjectV2FieldValue {
  
  """  The ISO 8601 date to set on the field."""
  date: Date
  
  """  The id of the iteration to set on the field."""
  iterationId: String
  
  """  The number to set on the field."""
  number: Float
  
  """  The id of the single select option to set on the field."""
  singleSelectOptionId: String
  
  """  The text to set on the field."""
  text: String
}

""""""
input ProjectV2Filters {
  
  """  List project v2 filtered by the state given."""
  state: ProjectV2State
}

""""""
type ProjectV2Item implements Node {
  content: ProjectV2ItemContent
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  fieldValueByName(
    """    The name of the field to return the field value of"""
    name: String!
  ): ProjectV2ItemFieldValue
  fieldValues(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for project v2 item field values returned from the connection"""
    orderBy: ProjectV2ItemFieldValueOrder = { field: POSITION, direction: ASC }
  ): ProjectV2ItemFieldValueConnection!
  id: ID!
  isArchived: Boolean!
  project: ProjectV2!
  type: ProjectV2ItemType!
  updatedAt: DateTime!
}

""""""
type ProjectV2ItemConnection {
  edges: [ProjectV2ItemEdge]
  nodes: [ProjectV2Item]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

""""""
type ProjectV2ItemEdge {
  cursor: String!
  node: ProjectV2Item
}

""""""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  date: Date
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  updatedAt: DateTime!
}

""""""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  duration: Int!
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  iterationId: String!
  startDate: Date!
  title: String!
  titleHTML: String!
  updatedAt: DateTime!
}

""""""
type ProjectV2ItemFieldLabelValue {
  field: ProjectV2FieldConfiguration!
  labels(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): LabelConnection
}

""""""
type ProjectV2ItemFieldMilestoneValue {
  field: ProjectV2FieldConfiguration!
  milestone: Milestone
}

""""""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  number: Float
  updatedAt: DateTime!
}

""""""
type ProjectV2ItemFieldPullRequestValue {
  field: ProjectV2FieldConfiguration!
  pullRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pull requests."""
    orderBy: PullRequestOrder = { field: CREATED_AT, direction: ASC }
  ): PullRequestConnection
}

""""""
type ProjectV2ItemFieldRepositoryValue {
  field: ProjectV2FieldConfiguration!
  repository: Repository
}

""""""
type ProjectV2ItemFieldReviewerValue {
  field: ProjectV2FieldConfiguration!
  reviewers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): RequestedReviewerConnection
}

""""""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  color: ProjectV2SingleSelectFieldOptionColor!
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  description: String
  descriptionHTML: String
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  name: String
  nameHTML: String
  optionId: String
  updatedAt: DateTime!
}

""""""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  text: String
  updatedAt: DateTime!
}

""""""
type ProjectV2ItemFieldUserValue {
  field: ProjectV2FieldConfiguration!
  users(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection
}

""""""
union ProjectV2ItemFieldValue = ProjectV2ItemFieldDateValue
  | ProjectV2ItemFieldIterationValue
  | ProjectV2ItemFieldLabelValue
  | ProjectV2ItemFieldMilestoneValue
  | ProjectV2ItemFieldNumberValue
  | ProjectV2ItemFieldPullRequestValue
  | ProjectV2ItemFieldRepositoryValue
  | ProjectV2ItemFieldReviewerValue
  | ProjectV2ItemFieldSingleSelectValue
  | ProjectV2ItemFieldTextValue
  | ProjectV2ItemFieldUserValue

""""""
interface ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  updatedAt: DateTime!
}

""""""
type ProjectV2ItemFieldValueConnection {
  edges: [ProjectV2ItemFieldValueEdge]
  nodes: [ProjectV2ItemFieldValue]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectV2ItemFieldValueEdge {
  cursor: String!
  node: ProjectV2ItemFieldValue
}

""""""
input ProjectV2ItemFieldValueOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order the project v2 item field values by."""
  field: ProjectV2ItemFieldValueOrderField!
}

""""""
enum ProjectV2ItemFieldValueOrderField {
  POSITION
}

""""""
input ProjectV2ItemOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order the project v2 items by."""
  field: ProjectV2ItemOrderField!
}

""""""
enum ProjectV2ItemOrderField {
  POSITION
}

""""""
enum ProjectV2ItemType {
  DRAFT_ISSUE
  ISSUE
  PULL_REQUEST
  REDACTED
}

""""""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  configuration: ProjectV2IterationFieldConfiguration!
  createdAt: DateTime!
  dataType: ProjectV2FieldType!
  databaseId: Int
  id: ID!
  name: String!
  project: ProjectV2!
  updatedAt: DateTime!
}

""""""
type ProjectV2IterationFieldConfiguration {
  completedIterations: [ProjectV2IterationFieldIteration!]!
  duration: Int!
  iterations: [ProjectV2IterationFieldIteration!]!
  startDay: Int!
}

""""""
type ProjectV2IterationFieldIteration {
  duration: Int!
  id: String!
  startDate: Date!
  title: String!
  titleHTML: String!
}

""""""
input ProjectV2Order {
  
  """  The direction in which to order projects by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order projects by."""
  field: ProjectV2OrderField!
}

""""""
enum ProjectV2OrderField {
  CREATED_AT
  NUMBER
  TITLE
  UPDATED_AT
}

""""""
interface ProjectV2Owner {
  id: ID!
  projectV2(
    """    The project number."""
    number: Int!
  ): ProjectV2
  projectsV2(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    How to order the returned projects."""
    orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }
    
    """    A project to search for under the the owner."""
    query: String
  ): ProjectV2Connection!
}

""""""
interface ProjectV2Recent {
  recentProjects(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2Connection!
}

""""""
enum ProjectV2Roles {
  ADMIN
  NONE
  READER
  WRITER
}

""""""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  createdAt: DateTime!
  dataType: ProjectV2FieldType!
  databaseId: Int
  id: ID!
  name: String!
  options(
    """    Filter returned options to only those matching these names, case insensitive."""
    names: [String!]
  ): [ProjectV2SingleSelectFieldOption!]!
  project: ProjectV2!
  updatedAt: DateTime!
}

""""""
type ProjectV2SingleSelectFieldOption {
  color: ProjectV2SingleSelectFieldOptionColor!
  description: String!
  descriptionHTML: String!
  id: String!
  name: String!
  nameHTML: String!
}

""""""
enum ProjectV2SingleSelectFieldOptionColor {
  BLUE
  GRAY
  GREEN
  ORANGE
  PINK
  PURPLE
  RED
  YELLOW
}

""""""
input ProjectV2SingleSelectFieldOptionInput {
  
  """  The display color of the option"""
  color: ProjectV2SingleSelectFieldOptionColor!
  
  """  The description text of the option"""
  description: String!
  
  """  The name of the option"""
  name: String!
}

""""""
type ProjectV2SortBy {
  direction: OrderDirection!
  field: ProjectV2Field!
}

""""""
type ProjectV2SortByConnection {
  edges: [ProjectV2SortByEdge]
  nodes: [ProjectV2SortBy]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectV2SortByEdge {
  cursor: String!
  node: ProjectV2SortBy
}

""""""
type ProjectV2SortByField {
  direction: OrderDirection!
  field: ProjectV2FieldConfiguration!
}

""""""
type ProjectV2SortByFieldConnection {
  edges: [ProjectV2SortByFieldEdge]
  nodes: [ProjectV2SortByField]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectV2SortByFieldEdge {
  cursor: String!
  node: ProjectV2SortByField
}

""""""
enum ProjectV2State {
  CLOSED
  OPEN
}

""""""
type ProjectV2View implements Node {
  createdAt: DateTime!
  databaseId: Int
  fields(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the project v2 fields returned from the connection."""
    orderBy: ProjectV2FieldOrder = { field: POSITION, direction: ASC }
  ): ProjectV2FieldConfigurationConnection
  filter: String
  groupBy(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the project v2 fields returned from the connection."""
    orderBy: ProjectV2FieldOrder = { field: POSITION, direction: ASC }
  ): ProjectV2FieldConnection @deprecated(
    reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
  )
  groupByFields(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the project v2 fields returned from the connection."""
    orderBy: ProjectV2FieldOrder = { field: POSITION, direction: ASC }
  ): ProjectV2FieldConfigurationConnection
  id: ID!
  layout: ProjectV2ViewLayout!
  name: String!
  number: Int!
  project: ProjectV2!
  sortBy(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2SortByConnection @deprecated(
    reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
  )
  sortByFields(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2SortByFieldConnection
  updatedAt: DateTime!
  verticalGroupBy(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the project v2 fields returned from the connection."""
    orderBy: ProjectV2FieldOrder = { field: POSITION, direction: ASC }
  ): ProjectV2FieldConnection @deprecated(
    reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC."
  )
  verticalGroupByFields(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the project v2 fields returned from the connection."""
    orderBy: ProjectV2FieldOrder = { field: POSITION, direction: ASC }
  ): ProjectV2FieldConfigurationConnection
  visibleFields(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the project v2 fields returned from the connection."""
    orderBy: ProjectV2FieldOrder = { field: POSITION, direction: ASC }
  ): ProjectV2FieldConnection @deprecated(
    reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC."
  )
}

""""""
type ProjectV2ViewConnection {
  edges: [ProjectV2ViewEdge]
  nodes: [ProjectV2View]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectV2ViewEdge {
  cursor: String!
  node: ProjectV2View
}

""""""
enum ProjectV2ViewLayout {
  BOARD_LAYOUT
  ROADMAP_LAYOUT
  TABLE_LAYOUT
}

""""""
input ProjectV2ViewOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order the project v2 views by."""
  field: ProjectV2ViewOrderField!
}

""""""
enum ProjectV2ViewOrderField {
  CREATED_AT
  NAME
  POSITION
}

""""""
type ProjectV2Workflow implements Node {
  createdAt: DateTime!
  databaseId: Int
  enabled: Boolean!
  id: ID!
  name: String!
  number: Int!
  project: ProjectV2!
  updatedAt: DateTime!
}

""""""
type ProjectV2WorkflowConnection {
  edges: [ProjectV2WorkflowEdge]
  nodes: [ProjectV2Workflow]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ProjectV2WorkflowEdge {
  cursor: String!
  node: ProjectV2Workflow
}

""""""
input ProjectV2WorkflowOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order the project v2 workflows by."""
  field: ProjectV2WorkflowsOrderField!
}

""""""
enum ProjectV2WorkflowsOrderField {
  CREATED_AT
  NAME
  NUMBER
  UPDATED_AT
}

""""""
type PublicKey implements Node {
  accessedAt: DateTime
  createdAt: DateTime
  fingerprint: String!
  id: ID!
  isReadOnly: Boolean
  key: String!
  updatedAt: DateTime
}

""""""
type PublicKeyConnection {
  edges: [PublicKeyEdge]
  nodes: [PublicKey]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PublicKeyEdge {
  cursor: String!
  node: PublicKey
}

""""""
input PublishSponsorsTierInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the draft tier to publish."""
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

""""""
type PublishSponsorsTierPayload {
  clientMutationId: String
  sponsorsTier: SponsorsTier
}

""""""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  activeLockReason: LockReason
  additions: Int!
  assignees(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  autoMergeRequest: AutoMergeRequest
  baseRef: Ref
  baseRefName: String!
  baseRefOid: GitObjectID!
  baseRepository: Repository
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  canBeRebased: Boolean! @preview(toggledBy: "merge-info-preview")
  changedFiles: Int!
  checksResourcePath: URI!
  checksUrl: URI!
  closed: Boolean!
  closedAt: DateTime
  closingIssuesReferences(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for issues returned from the connection"""
    orderBy: IssueOrder
    
    """    Return only manually linked Issues"""
    userLinkedOnly: Boolean = false
  ): IssueConnection
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for issue comments returned from the connection."""
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!
  commits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PullRequestCommitConnection!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  deletions: Int!
  editor: Actor
  files(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PullRequestChangedFileConnection
  headRef: Ref
  headRefName: String!
  headRefOid: GitObjectID!
  headRepository: Repository
  headRepositoryOwner: RepositoryOwner
  hovercard(
    """    Whether or not to include notification contexts"""
    includeNotificationContexts: Boolean = true
  ): Hovercard!
  id: ID!
  includesCreatedEdit: Boolean!
  isCrossRepository: Boolean!
  isDraft: Boolean!
  isReadByViewer: Boolean
  labels(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for labels returned from the connection."""
    orderBy: LabelOrder = { field: CREATED_AT, direction: ASC }
  ): LabelConnection
  lastEditedAt: DateTime
  latestOpinionatedReviews(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Only return reviews from user who have write access to the repository"""
    writersOnly: Boolean = false
  ): PullRequestReviewConnection
  latestReviews(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PullRequestReviewConnection
  locked: Boolean!
  maintainerCanModify: Boolean!
  mergeCommit: Commit
  mergeQueueEntry: MergeQueueEntry
  mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")
  mergeable: MergeableState!
  merged: Boolean!
  mergedAt: DateTime
  mergedBy: Actor
  milestone: Milestone
  number: Int!
  participants(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  permalink: URI!
  potentialMergeCommit: Commit
  projectCards(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    A list of archived states to filter the cards by"""
    archivedStates: [ProjectCardArchivedState] = [
      ARCHIVED, NOT_ARCHIVED
    ]
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectCardConnection!
  projectItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Include archived items."""
    includeArchived: Boolean = true
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2ItemConnection!
  projectV2(
    """    The project number."""
    number: Int!
  ): ProjectV2
  projectsV2(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    How to order the returned projects."""
    orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }
    
    """    A project to search for under the the owner."""
    query: String
  ): ProjectV2Connection!
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  revertResourcePath: URI!
  revertUrl: URI!
  reviewDecision: PullRequestReviewDecision
  reviewRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ReviewRequestConnection
  reviewThreads(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PullRequestReviewThreadConnection!
  reviews(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Filter by author of the review."""
    author: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    A list of states to filter the reviews."""
    states: [PullRequestReviewState!]
  ): PullRequestReviewConnection
  state: PullRequestState!
  suggestedReviewers: [SuggestedReviewer]!
  timeline(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows filtering timeline events by a `since` timestamp."""
    since: DateTime
  ): PullRequestTimelineConnection! @deprecated(
    reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC."
  )
  timelineItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Filter timeline items by type."""
    itemTypes: [PullRequestTimelineItemsItemType!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter timeline items by a `since` timestamp."""
    since: DateTime
    
    """    Skips the first _n_ elements in the list."""
    skip: Int
  ): PullRequestTimelineItemsConnection!
  title: String!
  titleHTML: HTML!
  totalCommentsCount: Int
  updatedAt: DateTime!
  url: URI!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanApplySuggestion: Boolean!
  viewerCanClose: Boolean!
  viewerCanDeleteHeadRef: Boolean!
  viewerCanDisableAutoMerge: Boolean!
  viewerCanEditFiles: Boolean!
  viewerCanEnableAutoMerge: Boolean!
  viewerCanMergeAsAdmin: Boolean!
  viewerCanReact: Boolean!
  viewerCanReopen: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCanUpdateBranch: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerLatestReview: PullRequestReview
  viewerLatestReviewRequest: ReviewRequest
  viewerMergeBodyText(
    """    The merge method for the message."""
    mergeType: PullRequestMergeMethod
  ): String!
  viewerMergeHeadlineText(
    """    The merge method for the message."""
    mergeType: PullRequestMergeMethod
  ): String!
  viewerSubscription: SubscriptionState
}

""""""
enum PullRequestBranchUpdateMethod {
  MERGE
  REBASE
}

""""""
type PullRequestChangedFile {
  additions: Int!
  changeType: PatchStatus!
  deletions: Int!
  path: String!
  viewerViewedState: FileViewedState!
}

""""""
type PullRequestChangedFileConnection {
  edges: [PullRequestChangedFileEdge]
  nodes: [PullRequestChangedFile]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PullRequestChangedFileEdge {
  cursor: String!
  node: PullRequestChangedFile
}

""""""
type PullRequestCommit implements Node & UniformResourceLocatable {
  commit: Commit!
  id: ID!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
}

""""""
type PullRequestCommitCommentThread implements Node & RepositoryNode {
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CommitCommentConnection!
  commit: Commit!
  id: ID!
  path: String
  position: Int
  pullRequest: PullRequest!
  repository: Repository!
}

""""""
type PullRequestCommitConnection {
  edges: [PullRequestCommitEdge]
  nodes: [PullRequestCommit]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PullRequestCommitEdge {
  cursor: String!
  node: PullRequestCommit
}

""""""
type PullRequestConnection {
  edges: [PullRequestEdge]
  nodes: [PullRequest]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PullRequestContributionsByRepository {
  contributions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = { direction: DESC }
  ): CreatedPullRequestContributionConnection!
  repository: Repository!
}

""""""
type PullRequestEdge {
  cursor: String!
  node: PullRequest
}

""""""
enum PullRequestMergeMethod {
  MERGE
  REBASE
  SQUASH
}

""""""
input PullRequestOrder {
  
  """  The direction in which to order pull requests by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order pull requests by."""
  field: PullRequestOrderField!
}

""""""
enum PullRequestOrderField {
  CREATED_AT
  UPDATED_AT
}

""""""
type PullRequestParameters {
  dismissStaleReviewsOnPush: Boolean!
  requireCodeOwnerReview: Boolean!
  requireLastPushApproval: Boolean!
  requiredApprovingReviewCount: Int!
  requiredReviewThreadResolution: Boolean!
}

""""""
input PullRequestParametersInput {
  
  """  New, reviewable commits pushed will dismiss previous pull request review approvals."""
  dismissStaleReviewsOnPush: Boolean!
  
  """  Require an approving review in pull requests that modify files that have a designated code owner."""
  requireCodeOwnerReview: Boolean!
  
  """  Whether the most recent reviewable push must be approved by someone other than the person who pushed it."""
  requireLastPushApproval: Boolean!
  
  """  The number of approving reviews that are required before a pull request can be merged."""
  requiredApprovingReviewCount: Int!
  
  """  All conversations on code must be resolved before a pull request can be merged."""
  requiredReviewThreadResolution: Boolean!
}

""""""
type PullRequestReview implements Comment & Deletable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  authorCanPushToRepository: Boolean!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PullRequestReviewCommentConnection!
  commit: Commit
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: DateTime
  onBehalfOf(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): TeamConnection!
  publishedAt: DateTime
  pullRequest: PullRequest!
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  state: PullRequestReviewState!
  submittedAt: DateTime
  updatedAt: DateTime!
  url: URI!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

""""""
type PullRequestReviewComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  commit: Commit
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  diffHunk: String!
  draftedAt: DateTime!
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: DateTime
  line: Int
  minimizedReason: String
  originalCommit: Commit
  originalLine: Int
  originalPosition: Int! @deprecated(
    reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC."
  )
  originalStartLine: Int
  outdated: Boolean!
  path: String!
  position: Int @deprecated(
    reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC."
  )
  publishedAt: DateTime
  pullRequest: PullRequest!
  pullRequestReview: PullRequestReview
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  replyTo: PullRequestReviewComment
  repository: Repository!
  resourcePath: URI!
  startLine: Int
  state: PullRequestReviewCommentState!
  subjectType: PullRequestReviewThreadSubjectType!
  updatedAt: DateTime!
  url: URI!
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

""""""
type PullRequestReviewCommentConnection {
  edges: [PullRequestReviewCommentEdge]
  nodes: [PullRequestReviewComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PullRequestReviewCommentEdge {
  cursor: String!
  node: PullRequestReviewComment
}

""""""
enum PullRequestReviewCommentState {
  PENDING
  SUBMITTED
}

""""""
type PullRequestReviewConnection {
  edges: [PullRequestReviewEdge]
  nodes: [PullRequestReview]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PullRequestReviewContributionsByRepository {
  contributions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = { direction: DESC }
  ): CreatedPullRequestReviewContributionConnection!
  repository: Repository!
}

""""""
enum PullRequestReviewDecision {
  APPROVED
  CHANGES_REQUESTED
  REVIEW_REQUIRED
}

""""""
type PullRequestReviewEdge {
  cursor: String!
  node: PullRequestReview
}

""""""
enum PullRequestReviewEvent {
  APPROVE
  COMMENT
  DISMISS
  REQUEST_CHANGES
}

""""""
enum PullRequestReviewState {
  APPROVED
  CHANGES_REQUESTED
  COMMENTED
  DISMISSED
  PENDING
}

""""""
type PullRequestReviewThread implements Node {
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Skips the first _n_ elements in the list."""
    skip: Int
  ): PullRequestReviewCommentConnection!
  diffSide: DiffSide!
  id: ID!
  isCollapsed: Boolean!
  isOutdated: Boolean!
  isResolved: Boolean!
  line: Int
  originalLine: Int
  originalStartLine: Int
  path: String!
  pullRequest: PullRequest!
  repository: Repository!
  resolvedBy: User
  startDiffSide: DiffSide
  startLine: Int
  subjectType: PullRequestReviewThreadSubjectType!
  viewerCanReply: Boolean!
  viewerCanResolve: Boolean!
  viewerCanUnresolve: Boolean!
}

""""""
type PullRequestReviewThreadConnection {
  edges: [PullRequestReviewThreadEdge]
  nodes: [PullRequestReviewThread]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PullRequestReviewThreadEdge {
  cursor: String!
  node: PullRequestReviewThread
}

""""""
enum PullRequestReviewThreadSubjectType {
  FILE
  LINE
}

""""""
type PullRequestRevisionMarker {
  createdAt: DateTime!
  lastSeenCommit: Commit!
  pullRequest: PullRequest!
}

""""""
enum PullRequestState {
  CLOSED
  MERGED
  OPEN
}

""""""
type PullRequestTemplate {
  body: String
  filename: String
  repository: Repository!
}

""""""
type PullRequestThread implements Node {
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Skips the first _n_ elements in the list."""
    skip: Int
  ): PullRequestReviewCommentConnection!
  diffSide: DiffSide!
  id: ID!
  isCollapsed: Boolean!
  isOutdated: Boolean!
  isResolved: Boolean!
  line: Int
  path: String!
  pullRequest: PullRequest!
  repository: Repository!
  resolvedBy: User
  startDiffSide: DiffSide
  startLine: Int
  subjectType: PullRequestReviewThreadSubjectType!
  viewerCanReply: Boolean!
  viewerCanResolve: Boolean!
  viewerCanUnresolve: Boolean!
}

""""""
type PullRequestTimelineConnection {
  edges: [PullRequestTimelineItemEdge]
  nodes: [PullRequestTimelineItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
union PullRequestTimelineItem = AssignedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | Commit
  | CommitCommentThread
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MergedEvent
  | MilestonedEvent
  | PullRequestReview
  | PullRequestReviewComment
  | PullRequestReviewThread
  | ReferencedEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

""""""
type PullRequestTimelineItemEdge {
  cursor: String!
  node: PullRequestTimelineItem
}

""""""
union PullRequestTimelineItems = AddedToMergeQueueEvent
  | AddedToProjectEvent
  | AssignedEvent
  | AutoMergeDisabledEvent
  | AutoMergeEnabledEvent
  | AutoRebaseEnabledEvent
  | AutoSquashEnabledEvent
  | AutomaticBaseChangeFailedEvent
  | AutomaticBaseChangeSucceededEvent
  | BaseRefChangedEvent
  | BaseRefDeletedEvent
  | BaseRefForcePushedEvent
  | ClosedEvent
  | CommentDeletedEvent
  | ConnectedEvent
  | ConvertToDraftEvent
  | ConvertedNoteToIssueEvent
  | ConvertedToDiscussionEvent
  | CrossReferencedEvent
  | DemilestonedEvent
  | DeployedEvent
  | DeploymentEnvironmentChangedEvent
  | DisconnectedEvent
  | HeadRefDeletedEvent
  | HeadRefForcePushedEvent
  | HeadRefRestoredEvent
  | IssueComment
  | LabeledEvent
  | LockedEvent
  | MarkedAsDuplicateEvent
  | MentionedEvent
  | MergedEvent
  | MilestonedEvent
  | MovedColumnsInProjectEvent
  | PinnedEvent
  | PullRequestCommit
  | PullRequestCommitCommentThread
  | PullRequestReview
  | PullRequestReviewThread
  | PullRequestRevisionMarker
  | ReadyForReviewEvent
  | ReferencedEvent
  | RemovedFromMergeQueueEvent
  | RemovedFromProjectEvent
  | RenamedTitleEvent
  | ReopenedEvent
  | ReviewDismissedEvent
  | ReviewRequestRemovedEvent
  | ReviewRequestedEvent
  | SubscribedEvent
  | TransferredEvent
  | UnassignedEvent
  | UnlabeledEvent
  | UnlockedEvent
  | UnmarkedAsDuplicateEvent
  | UnpinnedEvent
  | UnsubscribedEvent
  | UserBlockedEvent

""""""
type PullRequestTimelineItemsConnection {
  edges: [PullRequestTimelineItemsEdge]
  filteredCount: Int!
  nodes: [PullRequestTimelineItems]
  pageCount: Int!
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: DateTime!
}

""""""
type PullRequestTimelineItemsEdge {
  cursor: String!
  node: PullRequestTimelineItems
}

""""""
enum PullRequestTimelineItemsItemType {
  ADDED_TO_MERGE_QUEUE_EVENT
  ADDED_TO_PROJECT_EVENT
  ASSIGNED_EVENT
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT
  AUTO_MERGE_DISABLED_EVENT
  AUTO_MERGE_ENABLED_EVENT
  AUTO_REBASE_ENABLED_EVENT
  AUTO_SQUASH_ENABLED_EVENT
  BASE_REF_CHANGED_EVENT
  BASE_REF_DELETED_EVENT
  BASE_REF_FORCE_PUSHED_EVENT
  CLOSED_EVENT
  COMMENT_DELETED_EVENT
  CONNECTED_EVENT
  CONVERTED_NOTE_TO_ISSUE_EVENT
  CONVERTED_TO_DISCUSSION_EVENT
  CONVERT_TO_DRAFT_EVENT
  CROSS_REFERENCED_EVENT
  DEMILESTONED_EVENT
  DEPLOYED_EVENT
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
  DISCONNECTED_EVENT
  HEAD_REF_DELETED_EVENT
  HEAD_REF_FORCE_PUSHED_EVENT
  HEAD_REF_RESTORED_EVENT
  ISSUE_COMMENT
  LABELED_EVENT
  LOCKED_EVENT
  MARKED_AS_DUPLICATE_EVENT
  MENTIONED_EVENT
  MERGED_EVENT
  MILESTONED_EVENT
  MOVED_COLUMNS_IN_PROJECT_EVENT
  PINNED_EVENT
  PULL_REQUEST_COMMIT
  PULL_REQUEST_COMMIT_COMMENT_THREAD
  PULL_REQUEST_REVIEW
  PULL_REQUEST_REVIEW_THREAD
  PULL_REQUEST_REVISION_MARKER
  READY_FOR_REVIEW_EVENT
  REFERENCED_EVENT
  REMOVED_FROM_MERGE_QUEUE_EVENT
  REMOVED_FROM_PROJECT_EVENT
  RENAMED_TITLE_EVENT
  REOPENED_EVENT
  REVIEW_DISMISSED_EVENT
  REVIEW_REQUESTED_EVENT
  REVIEW_REQUEST_REMOVED_EVENT
  SUBSCRIBED_EVENT
  TRANSFERRED_EVENT
  UNASSIGNED_EVENT
  UNLABELED_EVENT
  UNLOCKED_EVENT
  UNMARKED_AS_DUPLICATE_EVENT
  UNPINNED_EVENT
  UNSUBSCRIBED_EVENT
  USER_BLOCKED_EVENT
}

""""""
enum PullRequestUpdateState {
  CLOSED
  OPEN
}

""""""
type Push implements Node {
  id: ID!
  nextSha: GitObjectID
  permalink: URI!
  previousSha: GitObjectID
  pusher: Actor!
  repository: Repository!
}

""""""
type PushAllowance implements Node {
  actor: PushAllowanceActor
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

""""""
union PushAllowanceActor = App | Team | User

""""""
type PushAllowanceConnection {
  edges: [PushAllowanceEdge]
  nodes: [PushAllowance]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type PushAllowanceEdge {
  cursor: String!
  node: PushAllowance
}

""""""
type Query {
  codeOfConduct(
    """    The code of conduct's key"""
    key: String!
  ): CodeOfConduct
  codesOfConduct: [CodeOfConduct]
  enterprise(
    """    The enterprise invitation token."""
    invitationToken: String
    
    """    The enterprise URL slug."""
    slug: String!
  ): Enterprise
  enterpriseAdministratorInvitation(
    """    The slug of the enterprise the user was invited to join."""
    enterpriseSlug: String!
    
    """    The role for the business member invitation."""
    role: EnterpriseAdministratorRole!
    
    """    The login of the user invited to join the business."""
    userLogin: String!
  ): EnterpriseAdministratorInvitation
  enterpriseAdministratorInvitationByToken(
    """    The invitation token sent with the invitation email."""
    invitationToken: String!
  ): EnterpriseAdministratorInvitation
  license(
    """    The license's downcased SPDX ID"""
    key: String!
  ): License
  licenses: [License]!
  marketplaceCategories(
    """    Exclude categories with no listings."""
    excludeEmpty: Boolean
    
    """    Returns top level categories only, excluding any subcategories."""
    excludeSubcategories: Boolean
    
    """    Return only the specified categories."""
    includeCategories: [String!]
  ): [MarketplaceCategory!]!
  marketplaceCategory(
    """    The URL slug of the category."""
    slug: String!
    
    """    Also check topic aliases for the category slug"""
    useTopicAliases: Boolean
  ): MarketplaceCategory
  marketplaceListing(
    """    Select the listing that matches this slug. It's the short name of the listing used in its URL."""
    slug: String!
  ): MarketplaceListing
  marketplaceListings(
    """    Select listings that can be administered by the specified user."""
    adminId: ID
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Select listings visible to the viewer even if they are not approved. If omitted or
    false, only approved listings will be returned."""
    allStates: Boolean
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Select only listings with the given category."""
    categorySlug: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Select listings for products owned by the specified organization."""
    organizationId: ID
    
    """    Select only listings where the primary category matches the given category slug."""
    primaryCategoryOnly: Boolean = false
    
    """    Select the listings with these slugs, if they are visible to the viewer."""
    slugs: [String]
    
    """    Also check topic aliases for the category slug"""
    useTopicAliases: Boolean
    
    """    Select listings to which user has admin access. If omitted, listings visible to the
    viewer are returned."""
    viewerCanAdmin: Boolean
    
    """    Select only listings that offer a free trial."""
    withFreeTrialsOnly: Boolean = false
  ): MarketplaceListingConnection!
  meta: GitHubMetadata!
  node(
    """    ID of the object."""
    id: ID!
  ): Node
  nodes(
    """    The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  organization(
    """    The organization's login."""
    login: String!
  ): Organization
  rateLimit(
    """    If true, calculate the cost for the query without evaluating it"""
    dryRun: Boolean = false
  ): RateLimit
  relay: Query!
  repository(
    """    Follow repository renames. If disabled, a repository referenced by its old name will return an error."""
    followRenames: Boolean = true
    
    """    The name of the repository"""
    name: String!
    
    """    The login field of a user or organization"""
    owner: String!
  ): Repository
  repositoryOwner(
    """    The username to lookup the owner by."""
    login: String!
  ): RepositoryOwner
  resource(
    """    The URL."""
    url: URI!
  ): UniformResourceLocatable
  search(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    The search string to look for."""
    query: String!
    
    """    The types of search items to search within."""
    type: SearchType!
  ): SearchResultItemConnection!
  securityAdvisories(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    A list of classifications to filter advisories by."""
    classifications: [SecurityAdvisoryClassification!]
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Filter advisories by identifier, e.g. GHSA or CVE."""
    identifier: SecurityAdvisoryIdentifierFilter
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the returned topics."""
    orderBy: SecurityAdvisoryOrder = { field: UPDATED_AT, direction: DESC }
    
    """    Filter advisories to those published since a time in the past."""
    publishedSince: DateTime
    
    """    Filter advisories to those updated since a time in the past."""
    updatedSince: DateTime
  ): SecurityAdvisoryConnection!
  securityAdvisory(
    """    GitHub Security Advisory ID."""
    ghsaId: String!
  ): SecurityAdvisory
  securityVulnerabilities(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    A list of advisory classifications to filter vulnerabilities by."""
    classifications: [SecurityAdvisoryClassification!]
    
    """    An ecosystem to filter vulnerabilities by."""
    ecosystem: SecurityAdvisoryEcosystem
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the returned topics."""
    orderBy: SecurityVulnerabilityOrder = { field: UPDATED_AT, direction: DESC }
    
    """    A package name to filter vulnerabilities by."""
    package: String
    
    """    A list of severities to filter vulnerabilities by."""
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!
  sponsorables(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Optional filter for which dependencies should be checked for sponsorable
    owners. Only sponsorable owners of dependencies in this ecosystem will be
    included. Used when onlyDependencies = true.

    **Upcoming Change on 2022-07-01 UTC**
    **Description:** `dependencyEcosystem` will be removed. Use the ecosystem argument instead.
    **Reason:** The type is switching from SecurityAdvisoryEcosystem to DependencyGraphEcosystem."""
    dependencyEcosystem: SecurityAdvisoryEcosystem
    
    """    Optional filter for which dependencies should be checked for sponsorable
    owners. Only sponsorable owners of dependencies in this ecosystem will be
    included. Used when onlyDependencies = true."""
    ecosystem: DependencyGraphEcosystem
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Whether only sponsorables who own the viewer's dependencies will be
    returned. Must be authenticated to use. Can check an organization instead
    for their dependencies owned by sponsorables by passing
    orgLoginForDependencies."""
    onlyDependencies: Boolean = false
    
    """    Ordering options for users and organizations returned from the connection."""
    orderBy: SponsorableOrder = { field: LOGIN, direction: ASC }
    
    """    Optional organization username for whose dependencies should be checked.
    Used when onlyDependencies = true. Omit to check your own dependencies. If
    you are not an administrator of the organization, only dependencies from its
    public repositories will be considered."""
    orgLoginForDependencies: String
  ): SponsorableItemConnection!
  topic(
    """    The topic's name."""
    name: String!
  ): Topic
  user(
    """    The user's login."""
    login: String!
  ): User
  viewer: User!
}

""""""
type RateLimit {
  cost: Int!
  limit: Int!
  nodeCount: Int!
  remaining: Int!
  resetAt: DateTime!
  used: Int!
}

""""""
interface Reactable {
  databaseId: Int
  id: ID!
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  viewerCanReact: Boolean!
}

""""""
type ReactingUserConnection {
  edges: [ReactingUserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ReactingUserEdge {
  cursor: String!
  node: User!
  reactedAt: DateTime!
}

""""""
type Reaction implements Node {
  content: ReactionContent!
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  reactable: Reactable!
  user: User
}

""""""
type ReactionConnection {
  edges: [ReactionEdge]
  nodes: [Reaction]
  pageInfo: PageInfo!
  totalCount: Int!
  viewerHasReacted: Boolean!
}

""""""
enum ReactionContent {
  CONFUSED
  EYES
  HEART
  HOORAY
  LAUGH
  ROCKET
  THUMBS_DOWN
  THUMBS_UP
}

""""""
type ReactionEdge {
  cursor: String!
  node: Reaction
}

""""""
type ReactionGroup {
  content: ReactionContent!
  createdAt: DateTime
  reactors(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ReactorConnection!
  subject: Reactable!
  users(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ReactingUserConnection! @deprecated(
    reason: "Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC."
  )
  viewerHasReacted: Boolean!
}

""""""
input ReactionOrder {
  
  """  The direction in which to order reactions by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order reactions by."""
  field: ReactionOrderField!
}

""""""
enum ReactionOrderField {
  CREATED_AT
}

""""""
union Reactor = Bot | Mannequin | Organization | User

""""""
type ReactorConnection {
  edges: [ReactorEdge]
  nodes: [Reactor]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ReactorEdge {
  cursor: String!
  node: Reactor!
  reactedAt: DateTime!
}

""""""
type ReadyForReviewEvent implements Node & UniformResourceLocatable {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
}

""""""
type Ref implements Node {
  associatedPullRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    The base ref name to filter the pull requests by."""
    baseRefName: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    The head ref name to filter the pull requests by."""
    headRefName: String
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the pull requests by."""
    states: [PullRequestState!]
  ): PullRequestConnection!
  branchProtectionRule: BranchProtectionRule
  compare(
    """    The head ref to compare against."""
    headRef: String!
  ): Comparison
  id: ID!
  name: String!
  prefix: String!
  refUpdateRule: RefUpdateRule
  repository: Repository!
  target: GitObject
}

""""""
type RefConnection {
  edges: [RefEdge]
  nodes: [Ref]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RefEdge {
  cursor: String!
  node: Ref
}

""""""
type RefNameConditionTarget {
  exclude: [String!]!
  include: [String!]!
}

""""""
input RefNameConditionTargetInput {
  
  """  Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match."""
  exclude: [String!]!
  
  """  Array of ref names or patterns to include. One of these patterns must match
  for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
  default branch or `~ALL` to include all branches."""
  include: [String!]!
}

""""""
input RefOrder {
  
  """  The direction in which to order refs by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order refs by."""
  field: RefOrderField!
}

""""""
enum RefOrderField {
  ALPHABETICAL
  TAG_COMMIT_DATE
}

""""""
input RefUpdate @preview(toggledBy: "update-refs-preview") {
  
  """  The value this ref should be updated to."""
  afterOid: GitObjectID!
  
  """  The value this ref needs to point to before the update."""
  beforeOid: GitObjectID
  
  """  Force a non fast-forward update."""
  force: Boolean = false
  
  """  The fully qualified name of the ref to be update. For example `refs/heads/branch-name`"""
  name: GitRefname!
}

""""""
type RefUpdateRule {
  allowsDeletions: Boolean!
  allowsForcePushes: Boolean!
  blocksCreations: Boolean!
  pattern: String!
  requiredApprovingReviewCount: Int
  requiredStatusCheckContexts: [String]
  requiresCodeOwnerReviews: Boolean!
  requiresConversationResolution: Boolean!
  requiresLinearHistory: Boolean!
  requiresSignatures: Boolean!
  viewerAllowedToDismissReviews: Boolean!
  viewerCanPush: Boolean!
}

""""""
type ReferencedEvent implements Node {
  actor: Actor
  commit: Commit
  commitRepository: Repository!
  createdAt: DateTime!
  id: ID!
  isCrossRepository: Boolean!
  isDirectReference: Boolean!
  subject: ReferencedSubject!
}

""""""
union ReferencedSubject = Issue | PullRequest

""""""
input RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set an identity provider."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
}

""""""
type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  clientMutationId: String
  identityProvider: EnterpriseIdentityProvider
}

""""""
input RegenerateVerifiableDomainTokenInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the verifiable domain to regenerate the verification token of."""
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

""""""
type RegenerateVerifiableDomainTokenPayload {
  clientMutationId: String
  verificationToken: String
}

""""""
input RejectDeploymentsInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Optional comment for rejecting deployments"""
  comment: String = ""
  
  """  The ids of environments to reject deployments"""
  environmentIds: [ID!]!
  
  """  The node ID of the workflow run containing the pending deployments."""
  workflowRunId: ID! @possibleTypes(concreteTypes: ["WorkflowRun"])
}

""""""
type RejectDeploymentsPayload {
  clientMutationId: String
  deployments: [Deployment!]
}

""""""
type Release implements Node & Reactable & UniformResourceLocatable {
  author: User
  createdAt: DateTime!
  databaseId: Int
  description: String
  descriptionHTML: HTML
  id: ID!
  isDraft: Boolean!
  isLatest: Boolean!
  isPrerelease: Boolean!
  mentions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection
  name: String
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  releaseAssets(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    A list of names to filter the assets by."""
    name: String
  ): ReleaseAssetConnection!
  repository: Repository!
  resourcePath: URI!
  shortDescriptionHTML(
    """    How many characters to return."""
    limit: Int = 200
  ): HTML
  tag: Ref
  tagCommit: Commit
  tagName: String!
  updatedAt: DateTime!
  url: URI!
  viewerCanReact: Boolean!
}

""""""
type ReleaseAsset implements Node {
  contentType: String!
  createdAt: DateTime!
  downloadCount: Int!
  downloadUrl: URI!
  id: ID!
  name: String!
  release: Release
  size: Int!
  updatedAt: DateTime!
  uploadedBy: User!
  url: URI!
}

""""""
type ReleaseAssetConnection {
  edges: [ReleaseAssetEdge]
  nodes: [ReleaseAsset]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ReleaseAssetEdge {
  cursor: String!
  node: ReleaseAsset
}

""""""
type ReleaseConnection {
  edges: [ReleaseEdge]
  nodes: [Release]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ReleaseEdge {
  cursor: String!
  node: Release
}

""""""
input ReleaseOrder {
  
  """  The direction in which to order releases by the specified field."""
  direction: OrderDirection!
  
  """  The field in which to order releases by."""
  field: ReleaseOrderField!
}

""""""
enum ReleaseOrderField {
  CREATED_AT
  NAME
}

""""""
input RemoveAssigneesFromAssignableInput {
  
  """  The id of the assignable object to remove assignees from."""
  assignableId: ID! @possibleTypes(concreteTypes: [
      "Issue", "PullRequest"
    ]
    abstractType: "Assignable")
  
  """  The id of users to remove as assignees."""
  assigneeIds: [ID!]! @possibleTypes(concreteTypes: ["User"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

""""""
type RemoveAssigneesFromAssignablePayload {
  assignable: Assignable
  clientMutationId: String
}

""""""
input RemoveEnterpriseAdminInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Enterprise ID from which to remove the administrator."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The login of the user to remove as an administrator."""
  login: String!
}

""""""
type RemoveEnterpriseAdminPayload {
  admin: User
  clientMutationId: String
  enterprise: Enterprise
  message: String
  viewer: User
}

""""""
input RemoveEnterpriseIdentityProviderInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise from which to remove the identity provider."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
}

""""""
type RemoveEnterpriseIdentityProviderPayload {
  clientMutationId: String
  identityProvider: EnterpriseIdentityProvider
}

""""""
input RemoveEnterpriseMemberInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise from which the user should be removed."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The ID of the user to remove from the enterprise."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

""""""
type RemoveEnterpriseMemberPayload {
  clientMutationId: String
  enterprise: Enterprise
  user: User
  viewer: User
}

""""""
input RemoveEnterpriseOrganizationInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise from which the organization should be removed."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The ID of the organization to remove from the enterprise."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type RemoveEnterpriseOrganizationPayload {
  clientMutationId: String
  enterprise: Enterprise
  organization: Organization
  viewer: User
}

""""""
input RemoveEnterpriseSupportEntitlementInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The login of a member who will lose the support entitlement."""
  login: String!
}

""""""
type RemoveEnterpriseSupportEntitlementPayload {
  clientMutationId: String
  message: String
}

""""""
input RemoveLabelsFromLabelableInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ids of labels to remove."""
  labelIds: [ID!]! @possibleTypes(concreteTypes: ["Label"])
  
  """  The id of the Labelable to remove labels from."""
  labelableId: ID! @possibleTypes(concreteTypes: [
      "Discussion", "Issue", "PullRequest"
    ]
    abstractType: "Labelable")
}

""""""
type RemoveLabelsFromLabelablePayload {
  clientMutationId: String
  labelable: Labelable
}

""""""
input RemoveOutsideCollaboratorInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the organization to remove the outside collaborator from."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
  
  """  The ID of the outside collaborator to remove."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

""""""
type RemoveOutsideCollaboratorPayload {
  clientMutationId: String
  removedUser: User
}

""""""
input RemoveReactionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of the emoji reaction to remove."""
  content: ReactionContent!
  
  """  The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: [
      "CommitComment",
      "Discussion",
      "DiscussionComment",
      "Issue",
      "IssueComment",
      "PullRequest",
      "PullRequestReview",
      "PullRequestReviewComment",
      "Release",
      "TeamDiscussion",
      "TeamDiscussionComment"
    ]
    abstractType: "Reactable")
}

""""""
type RemoveReactionPayload {
  clientMutationId: String
  reaction: Reaction
  reactionGroups: [ReactionGroup!]
  subject: Reactable
}

""""""
input RemoveStarInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Starrable ID to unstar."""
  starrableId: ID! @possibleTypes(concreteTypes: [
      "Gist", "Repository", "Topic"
    ]
    abstractType: "Starrable")
}

""""""
type RemoveStarPayload {
  clientMutationId: String
  starrable: Starrable
}

""""""
input RemoveUpvoteInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion or comment to remove upvote."""
  subjectId: ID! @possibleTypes(concreteTypes: [
      "Discussion", "DiscussionComment"
    ]
    abstractType: "Votable")
}

""""""
type RemoveUpvotePayload {
  clientMutationId: String
  subject: Votable
}

""""""
type RemovedFromMergeQueueEvent implements Node {
  actor: Actor
  beforeCommit: Commit
  createdAt: DateTime!
  enqueuer: User
  id: ID!
  mergeQueue: MergeQueue
  pullRequest: PullRequest
  reason: String
}

""""""
type RemovedFromProjectEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  project: Project @preview(toggledBy: "starfox-preview")
  projectColumnName: String! @preview(toggledBy: "starfox-preview")
}

""""""
type RenamedTitleEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  currentTitle: String!
  id: ID!
  previousTitle: String!
  subject: RenamedTitleSubject!
}

""""""
union RenamedTitleSubject = Issue | PullRequest

""""""
input ReopenDiscussionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the discussion to be reopened."""
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
}

""""""
type ReopenDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

""""""
input ReopenIssueInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the issue to be opened."""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

""""""
type ReopenIssuePayload {
  clientMutationId: String
  issue: Issue
}

""""""
input ReopenPullRequestInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the pull request to be reopened."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type ReopenPullRequestPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
type ReopenedEvent implements Node {
  actor: Actor
  closable: Closable!
  createdAt: DateTime!
  id: ID!
  stateReason: IssueStateReason
}

""""""
type RepoAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoAccessAuditEntryVisibility
}

""""""
enum RepoAccessAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

""""""
type RepoAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoAddMemberAuditEntryVisibility
}

""""""
enum RepoAddMemberAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

""""""
type RepoAddTopicAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  topic: Topic
  topicName: String
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoArchivedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoArchivedAuditEntryVisibility
}

""""""
enum RepoArchivedAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

""""""
type RepoChangeMergeSettingAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isEnabled: Boolean
  mergeType: RepoChangeMergeSettingAuditEntryMergeType
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum RepoChangeMergeSettingAuditEntryMergeType {
  MERGE
  REBASE
  SQUASH
}

""""""
type RepoConfigDisableAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigDisableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigDisableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigDisableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigEnableAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigEnableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigEnableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigEnableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigLockAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoConfigUnlockAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepoCreateAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  forkParentName: String
  forkSourceName: String
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoCreateAuditEntryVisibility
}

""""""
enum RepoCreateAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

""""""
type RepoDestroyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoDestroyAuditEntryVisibility
}

""""""
enum RepoDestroyAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

""""""
type RepoRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoRemoveMemberAuditEntryVisibility
}

""""""
enum RepoRemoveMemberAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

""""""
type RepoRemoveTopicAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  topic: Topic
  topicName: String
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
enum ReportedContentClassifiers {
  ABUSE
  DUPLICATE
  OFF_TOPIC
  OUTDATED
  RESOLVED
  SPAM
}

""""""
type Repository implements Node & PackageOwner & ProjectOwner & ProjectV2Recent & RepositoryInfo & Starrable & Subscribable & UniformResourceLocatable {
  allowUpdateBranch: Boolean!
  archivedAt: DateTime
  assignableUsers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filters users with query on user name and login."""
    query: String
  ): UserConnection!
  autoMergeAllowed: Boolean!
  branchProtectionRules(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): BranchProtectionRuleConnection!
  codeOfConduct: CodeOfConduct
  codeowners(
    """    The ref name used to return the associated `CODEOWNERS` file."""
    refName: String
  ): RepositoryCodeowners
  collaborators(
    """    Collaborators affiliation level with a repository."""
    affiliation: CollaboratorAffiliation
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    The login of one specific collaborator."""
    login: String
    
    """    Filters users with query on user name and login"""
    query: String
  ): RepositoryCollaboratorConnection
  commitComments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CommitCommentConnection!
  contactLinks: [RepositoryContactLink!]
  contributingGuidelines: ContributingGuidelines
  createdAt: DateTime!
  databaseId: Int
  defaultBranchRef: Ref
  deleteBranchOnMerge: Boolean!
  dependencyGraphManifests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Cursor to paginate dependencies"""
    dependenciesAfter: String
    
    """    Number of dependencies to fetch"""
    dependenciesFirst: Int
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Flag to scope to only manifests with dependencies"""
    withDependencies: Boolean
  ): DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview")
  deployKeys(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DeployKeyConnection!
  deployments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Environments to list deployments for"""
    environments: [String!]
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for deployments returned from the connection."""
    orderBy: DeploymentOrder = { field: CREATED_AT, direction: ASC }
  ): DeploymentConnection!
  description: String
  descriptionHTML: HTML!
  discussion(
    """    The number for the discussion to be returned."""
    number: Int!
  ): Discussion
  discussionCategories(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filter by categories that are assignable by the viewer."""
    filterByAssignable: Boolean = false
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DiscussionCategoryConnection!
  discussionCategory(
    """    The slug of the discussion category to be returned."""
    slug: String!
  ): DiscussionCategory
  discussions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Only show answered or unanswered discussions"""
    answered: Boolean = null
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Only include discussions that belong to the category with this ID."""
    categoryId: ID = null
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for discussions returned from the connection."""
    orderBy: DiscussionOrder = { field: UPDATED_AT, direction: DESC }
    
    """    A list of states to filter the discussions by."""
    states: [DiscussionState!] = [
      
    ]
  ): DiscussionConnection!
  diskUsage: Int
  environment(
    """    The name of the environment to be returned."""
    name: String!
  ): Environment
  environments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the environments"""
    orderBy: Environments = { field: NAME, direction: ASC }
  ): EnvironmentConnection!
  forkCount: Int!
  forkingAllowed: Boolean!
  forks(
    """    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns."""
    affiliations: [RepositoryAffiliation]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    If non-null, filters repositories according to whether they have issues enabled"""
    hasIssuesEnabled: Boolean
    
    """    If non-null, filters repositories according to whether they have been locked"""
    isLocked: Boolean
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder
    
    """    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns."""
    ownerAffiliations: [RepositoryAffiliation] = [
      OWNER, COLLABORATOR
    ]
    
    """    If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy
  ): RepositoryConnection!
  fundingLinks: [FundingLink!]!
  hasDiscussionsEnabled: Boolean!
  hasIssuesEnabled: Boolean!
  hasProjectsEnabled: Boolean!
  hasVulnerabilityAlertsEnabled: Boolean!
  hasWikiEnabled: Boolean!
  homepageUrl: URI
  id: ID!
  interactionAbility: RepositoryInteractionAbility
  isArchived: Boolean!
  isBlankIssuesEnabled: Boolean!
  isDisabled: Boolean!
  isEmpty: Boolean!
  isFork: Boolean!
  isInOrganization: Boolean!
  isLocked: Boolean!
  isMirror: Boolean!
  isPrivate: Boolean!
  isSecurityPolicyEnabled: Boolean
  isTemplate: Boolean!
  isUserConfigurationRepository: Boolean!
  issue(
    """    The number for the issue to be returned."""
    number: Int!
  ): Issue
  issueOrPullRequest(
    """    The number for the issue to be returned."""
    number: Int!
  ): IssueOrPullRequest
  issueTemplates: [IssueTemplate!]
  issues(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filtering options for issues returned from the connection."""
    filterBy: IssueFilters
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for issues returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the issues by."""
    states: [IssueState!]
  ): IssueConnection!
  label(
    """    Label name"""
    name: String!
  ): Label
  labels(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for labels returned from the connection."""
    orderBy: LabelOrder = { field: CREATED_AT, direction: ASC }
    
    """    If provided, searches labels by name and description."""
    query: String
  ): LabelConnection
  languages(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: LanguageOrder
  ): LanguageConnection
  latestRelease: Release
  licenseInfo: License
  lockReason: RepositoryLockReason
  mentionableUsers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filters users with query on user name and login"""
    query: String
  ): UserConnection!
  mergeCommitAllowed: Boolean!
  mergeCommitMessage: MergeCommitMessage!
  mergeCommitTitle: MergeCommitTitle!
  mergeQueue(
    """    The name of the branch to get the merge queue for. Case sensitive."""
    branch: String
  ): MergeQueue
  milestone(
    """    The number for the milestone to be returned."""
    number: Int!
  ): Milestone
  milestones(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for milestones."""
    orderBy: MilestoneOrder
    
    """    Filters milestones with a query on the title"""
    query: String
    
    """    Filter by the state of the milestones."""
    states: [MilestoneState!]
  ): MilestoneConnection
  mirrorUrl: URI
  name: String!
  nameWithOwner: String!
  object(
    """    A Git revision expression suitable for rev-parse"""
    expression: String
    
    """    The Git object ID"""
    oid: GitObjectID
  ): GitObject
  openGraphImageUrl: URI!
  owner: RepositoryOwner!
  packages(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Find packages by their names."""
    names: [String]
    
    """    Ordering of the returned packages."""
    orderBy: PackageOrder = { field: CREATED_AT, direction: DESC }
    
    """    Filter registry package by type."""
    packageType: PackageType
    
    """    Find packages in a repository by ID."""
    repositoryId: ID
  ): PackageConnection!
  parent: Repository
  pinnedDiscussions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PinnedDiscussionConnection!
  pinnedIssues(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PinnedIssueConnection
  primaryLanguage: Language
  project(
    """    The project number to find."""
    number: Int!
  ): Project
  projectV2(
    """    The Project number."""
    number: Int!
  ): ProjectV2
  projects(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for projects returned from the connection"""
    orderBy: ProjectOrder
    
    """    Query to search projects by, currently only searching by name."""
    search: String
    
    """    A list of states to filter the projects by."""
    states: [ProjectState!]
  ): ProjectConnection!
  projectsResourcePath: URI!
  projectsUrl: URI!
  projectsV2(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    How to order the returned projects."""
    orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }
    
    """    A project to search for linked to the repo."""
    query: String
  ): ProjectV2Connection!
  pullRequest(
    """    The number for the pull request to be returned."""
    number: Int!
  ): PullRequest
  pullRequestTemplates: [PullRequestTemplate!]
  pullRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    The base ref name to filter the pull requests by."""
    baseRefName: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    The head ref name to filter the pull requests by."""
    headRefName: String
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the pull requests by."""
    states: [PullRequestState!]
  ): PullRequestConnection!
  pushedAt: DateTime
  rebaseMergeAllowed: Boolean!
  recentProjects(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2Connection!
  ref(
    """    The ref to retrieve. Fully qualified matches are checked in order
    (`refs/heads/master`) before falling back onto checks for short name matches (`master`)."""
    qualifiedName: String!
  ): Ref
  refs(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    DEPRECATED: use orderBy. The ordering direction."""
    direction: OrderDirection
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for refs returned from the connection."""
    orderBy: RefOrder
    
    """    Filters refs with query on name"""
    query: String
    
    """    A ref name prefix like `refs/heads/`, `refs/tags/`, etc."""
    refPrefix: String!
  ): RefConnection
  release(
    """    The name of the Tag the Release was created from"""
    tagName: String!
  ): Release
  releases(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: ReleaseOrder
  ): ReleaseConnection!
  repositoryTopics(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryTopicConnection!
  resourcePath: URI!
  ruleset(
    """    The ID of the ruleset to be returned."""
    databaseId: Int!
    
    """    Include rulesets configured at higher levels that apply to this repository"""
    includeParents: Boolean = true
  ): RepositoryRuleset
  rulesets(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Return rulesets configured at higher levels that apply to this repository"""
    includeParents: Boolean = true
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryRulesetConnection
  securityPolicyUrl: URI
  shortDescriptionHTML(
    """    How many characters to return."""
    limit: Int = 200
  ): HTML!
  squashMergeAllowed: Boolean!
  squashMergeCommitMessage: SquashMergeCommitMessage!
  squashMergeCommitTitle: SquashMergeCommitTitle!
  squashPrTitleUsedAsDefault: Boolean! @deprecated(
    reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
  )
  sshUrl: GitSSHRemote!
  stargazerCount: Int!
  stargazers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: StarOrder
  ): StargazerConnection!
  submodules(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): SubmoduleConnection!
  tempCloneToken: String
  templateRepository: Repository
  updatedAt: DateTime!
  url: URI!
  usesCustomOpenGraphImage: Boolean!
  viewerCanAdminister: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdateTopics: Boolean!
  viewerDefaultCommitEmail: String
  viewerDefaultMergeMethod: PullRequestMergeMethod!
  viewerHasStarred: Boolean!
  viewerPermission: RepositoryPermission
  viewerPossibleCommitEmails: [String!]
  viewerSubscription: SubscriptionState
  visibility: RepositoryVisibility!
  vulnerabilityAlert(
    """    The number for the vulnerability alert to be returned."""
    number: Int!
  ): RepositoryVulnerabilityAlert
  vulnerabilityAlerts(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filter by the scope of the alert's dependency"""
    dependencyScopes: [RepositoryVulnerabilityAlertDependencyScope!]
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter by the state of the alert"""
    states: [RepositoryVulnerabilityAlertState!]
  ): RepositoryVulnerabilityAlertConnection
  watchers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  webCommitSignoffRequired: Boolean!
}

""""""
enum RepositoryAffiliation {
  COLLABORATOR
  ORGANIZATION_MEMBER
  OWNER
}

""""""
interface RepositoryAuditEntryData {
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
}

""""""
type RepositoryCodeowners {
  errors: [RepositoryCodeownersError!]!
}

""""""
type RepositoryCodeownersError {
  column: Int!
  kind: String!
  line: Int!
  message: String!
  path: String!
  source: String!
  suggestion: String
}

""""""
type RepositoryCollaboratorConnection {
  edges: [RepositoryCollaboratorEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RepositoryCollaboratorEdge {
  cursor: String!
  node: User!
  permission: RepositoryPermission!
  permissionSources: [PermissionSource!]
}

""""""
type RepositoryConnection {
  edges: [RepositoryEdge]
  nodes: [Repository]
  pageInfo: PageInfo!
  totalCount: Int!
  totalDiskUsage: Int!
}

""""""
type RepositoryContactLink {
  about: String!
  name: String!
  url: URI!
}

""""""
enum RepositoryContributionType {
  COMMIT
  ISSUE
  PULL_REQUEST
  PULL_REQUEST_REVIEW
  REPOSITORY
}

""""""
interface RepositoryDiscussionAuthor {
  repositoryDiscussions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions."""
    answered: Boolean = null
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for discussions returned from the connection."""
    orderBy: DiscussionOrder = { field: CREATED_AT, direction: DESC }
    
    """    Filter discussions to only those in a specific repository."""
    repositoryId: ID
    
    """    A list of states to filter the discussions by."""
    states: [DiscussionState!] = [
      
    ]
  ): DiscussionConnection!
}

""""""
interface RepositoryDiscussionCommentAuthor {
  repositoryDiscussionComments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter discussion comments to only those that were marked as the answer"""
    onlyAnswers: Boolean = false
    
    """    Filter discussion comments to only those in a specific repository."""
    repositoryId: ID
  ): DiscussionCommentConnection!
}

""""""
type RepositoryEdge {
  cursor: String!
  node: Repository
}

""""""
type RepositoryIdConditionTarget {
  repositoryIds: [ID!]!
}

""""""
input RepositoryIdConditionTargetInput {
  
  """  One of these repo IDs must match the repo."""
  repositoryIds: [ID!]!
}

""""""
interface RepositoryInfo {
  archivedAt: DateTime
  createdAt: DateTime!
  description: String
  descriptionHTML: HTML!
  forkCount: Int!
  hasDiscussionsEnabled: Boolean!
  hasIssuesEnabled: Boolean!
  hasProjectsEnabled: Boolean!
  hasWikiEnabled: Boolean!
  homepageUrl: URI
  isArchived: Boolean!
  isFork: Boolean!
  isInOrganization: Boolean!
  isLocked: Boolean!
  isMirror: Boolean!
  isPrivate: Boolean!
  isTemplate: Boolean!
  licenseInfo: License
  lockReason: RepositoryLockReason
  mirrorUrl: URI
  name: String!
  nameWithOwner: String!
  openGraphImageUrl: URI!
  owner: RepositoryOwner!
  pushedAt: DateTime
  resourcePath: URI!
  shortDescriptionHTML(
    """    How many characters to return."""
    limit: Int = 200
  ): HTML!
  updatedAt: DateTime!
  url: URI!
  usesCustomOpenGraphImage: Boolean!
  visibility: RepositoryVisibility!
}

""""""
type RepositoryInteractionAbility {
  expiresAt: DateTime
  limit: RepositoryInteractionLimit!
  origin: RepositoryInteractionLimitOrigin!
}

""""""
enum RepositoryInteractionLimit {
  COLLABORATORS_ONLY
  CONTRIBUTORS_ONLY
  EXISTING_USERS
  NO_LIMIT
}

""""""
enum RepositoryInteractionLimitExpiry {
  ONE_DAY
  ONE_MONTH
  ONE_WEEK
  SIX_MONTHS
  THREE_DAYS
}

""""""
enum RepositoryInteractionLimitOrigin {
  ORGANIZATION
  REPOSITORY
  USER
}

""""""
type RepositoryInvitation implements Node {
  email: String
  id: ID!
  invitee: User
  inviter: User!
  permalink: URI!
  permission: RepositoryPermission!
  repository: RepositoryInfo
}

""""""
type RepositoryInvitationConnection {
  edges: [RepositoryInvitationEdge]
  nodes: [RepositoryInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RepositoryInvitationEdge {
  cursor: String!
  node: RepositoryInvitation
}

""""""
input RepositoryInvitationOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order repository invitations by."""
  field: RepositoryInvitationOrderField!
}

""""""
enum RepositoryInvitationOrderField {
  CREATED_AT
}

""""""
enum RepositoryLockReason {
  BILLING
  MIGRATING
  MOVING
  RENAME
  TRADE_RESTRICTION
}

""""""
type RepositoryMigration implements Migration & Node {
  continueOnError: Boolean!
  createdAt: DateTime!
  databaseId: String
  failureReason: String
  id: ID!
  migrationLogUrl: URI
  migrationSource: MigrationSource!
  repositoryName: String!
  sourceUrl: URI!
  state: MigrationState!
  warningsCount: Int!
}

""""""
type RepositoryMigrationConnection {
  edges: [RepositoryMigrationEdge]
  nodes: [RepositoryMigration]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RepositoryMigrationEdge {
  cursor: String!
  node: RepositoryMigration
}

""""""
input RepositoryMigrationOrder {
  
  """  The ordering direction."""
  direction: RepositoryMigrationOrderDirection!
  
  """  The field to order repository migrations by."""
  field: RepositoryMigrationOrderField!
}

""""""
enum RepositoryMigrationOrderDirection {
  ASC
  DESC
}

""""""
enum RepositoryMigrationOrderField {
  CREATED_AT
}

""""""
type RepositoryNameConditionTarget {
  exclude: [String!]!
  include: [String!]!
  protected: Boolean!
}

""""""
input RepositoryNameConditionTargetInput {
  
  """  Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match."""
  exclude: [String!]!
  
  """  Array of repository names or patterns to include. One of these patterns must
  match for the condition to pass. Also accepts `~ALL` to include all repositories."""
  include: [String!]!
  
  """  Target changes that match these patterns will be prevented except by those with bypass permissions."""
  protected: Boolean
}

""""""
interface RepositoryNode {
  repository: Repository!
}

""""""
input RepositoryOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order repositories by."""
  field: RepositoryOrderField!
}

""""""
enum RepositoryOrderField {
  CREATED_AT
  NAME
  PUSHED_AT
  STARGAZERS
  UPDATED_AT
}

""""""
interface RepositoryOwner {
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  id: ID!
  login: String!
  repositories(
    """    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns."""
    affiliations: [RepositoryAffiliation]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    If non-null, filters repositories according to whether they have issues enabled"""
    hasIssuesEnabled: Boolean
    
    """    If non-null, filters repositories according to whether they are archived and not maintained"""
    isArchived: Boolean
    
    """    If non-null, filters repositories according to whether they are forks of another repository"""
    isFork: Boolean
    
    """    If non-null, filters repositories according to whether they have been locked"""
    isLocked: Boolean
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder
    
    """    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns."""
    ownerAffiliations: [RepositoryAffiliation] = [
      OWNER, COLLABORATOR
    ]
    
    """    If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy
  ): RepositoryConnection!
  repository(
    """    Follow repository renames. If disabled, a repository referenced by its old name will return an error."""
    followRenames: Boolean = true
    
    """    Name of Repository to find."""
    name: String!
  ): Repository
  resourcePath: URI!
  url: URI!
}

""""""
enum RepositoryPermission {
  ADMIN
  MAINTAIN
  READ
  TRIAGE
  WRITE
}

""""""
enum RepositoryPrivacy {
  PRIVATE
  PUBLIC
}

""""""
type RepositoryRule implements Node {
  id: ID!
  parameters: RuleParameters
  repositoryRuleset: RepositoryRuleset
  type: RepositoryRuleType!
}

""""""
type RepositoryRuleConditions {
  refName: RefNameConditionTarget
  repositoryId: RepositoryIdConditionTarget
  repositoryName: RepositoryNameConditionTarget
}

""""""
input RepositoryRuleConditionsInput {
  
  """  Configuration for the ref_name condition"""
  refName: RefNameConditionTargetInput
  
  """  Configuration for the repository_id condition"""
  repositoryId: RepositoryIdConditionTargetInput
  
  """  Configuration for the repository_name condition"""
  repositoryName: RepositoryNameConditionTargetInput
}

""""""
type RepositoryRuleConnection {
  edges: [RepositoryRuleEdge]
  nodes: [RepositoryRule]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RepositoryRuleEdge {
  cursor: String!
  node: RepositoryRule
}

""""""
input RepositoryRuleInput {
  
  """  Optional ID of this rule when updating"""
  id: ID @possibleTypes(concreteTypes: ["RepositoryRule"])
  
  """  The parameters for the rule."""
  parameters: RuleParametersInput
  
  """  The type of rule to create."""
  type: RepositoryRuleType!
}

""""""
enum RepositoryRuleType {
  BRANCH_NAME_PATTERN
  COMMITTER_EMAIL_PATTERN
  COMMIT_AUTHOR_EMAIL_PATTERN
  COMMIT_MESSAGE_PATTERN
  CREATION
  DELETION
  NON_FAST_FORWARD
  PULL_REQUEST
  REQUIRED_DEPLOYMENTS
  REQUIRED_LINEAR_HISTORY
  REQUIRED_SIGNATURES
  REQUIRED_STATUS_CHECKS
  TAG_NAME_PATTERN
  UPDATE
}

""""""
type RepositoryRuleset implements Node {
  bypassActors(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): RepositoryRulesetBypassActorConnection
  conditions: RepositoryRuleConditions!
  createdAt: DateTime!
  databaseId: Int
  enforcement: RuleEnforcement!
  id: ID!
  name: String!
  rules(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    The type of rule."""
    type: RepositoryRuleType
  ): RepositoryRuleConnection
  source: RuleSource!
  target: RepositoryRulesetTarget
  updatedAt: DateTime!
}

""""""
type RepositoryRulesetBypassActor implements Node {
  actor: BypassActor
  bypassMode: RepositoryRulesetBypassActorBypassMode
  id: ID!
  organizationAdmin: Boolean!
  repositoryRoleDatabaseId: Int
  repositoryRoleName: String
  repositoryRuleset: RepositoryRuleset
}

""""""
enum RepositoryRulesetBypassActorBypassMode {
  ALWAYS
  PULL_REQUEST
}

""""""
type RepositoryRulesetBypassActorConnection {
  edges: [RepositoryRulesetBypassActorEdge]
  nodes: [RepositoryRulesetBypassActor]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RepositoryRulesetBypassActorEdge {
  cursor: String!
  node: RepositoryRulesetBypassActor
}

""""""
input RepositoryRulesetBypassActorInput {
  
  """  For Team and Integration bypasses, the Team or Integration ID"""
  actorId: ID
  
  """  The bypass mode for this actor."""
  bypassMode: RepositoryRulesetBypassActorBypassMode!
  
  """  For org admin bupasses, true"""
  organizationAdmin: Boolean
  
  """  For role bypasses, the role database ID"""
  repositoryRoleDatabaseId: Int
}

""""""
type RepositoryRulesetConnection {
  edges: [RepositoryRulesetEdge]
  nodes: [RepositoryRuleset]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RepositoryRulesetEdge {
  cursor: String!
  node: RepositoryRuleset
}

""""""
enum RepositoryRulesetTarget {
  BRANCH
  TAG
}

""""""
type RepositoryTopic implements Node & UniformResourceLocatable {
  id: ID!
  resourcePath: URI!
  topic: Topic!
  url: URI!
}

""""""
type RepositoryTopicConnection {
  edges: [RepositoryTopicEdge]
  nodes: [RepositoryTopic]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RepositoryTopicEdge {
  cursor: String!
  node: RepositoryTopic
}

""""""
enum RepositoryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

""""""
type RepositoryVisibilityChangeDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepositoryVisibilityChangeEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type RepositoryVulnerabilityAlert implements Node & RepositoryNode {
  autoDismissedAt: DateTime
  createdAt: DateTime!
  dependabotUpdate: DependabotUpdate
  dependencyScope: RepositoryVulnerabilityAlertDependencyScope
  dismissComment: String
  dismissReason: String
  dismissedAt: DateTime
  dismisser: User
  fixedAt: DateTime
  id: ID!
  number: Int!
  repository: Repository!
  securityAdvisory: SecurityAdvisory
  securityVulnerability: SecurityVulnerability
  state: RepositoryVulnerabilityAlertState!
  vulnerableManifestFilename: String!
  vulnerableManifestPath: String!
  vulnerableRequirements: String
}

""""""
type RepositoryVulnerabilityAlertConnection {
  edges: [RepositoryVulnerabilityAlertEdge]
  nodes: [RepositoryVulnerabilityAlert]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
enum RepositoryVulnerabilityAlertDependencyScope {
  DEVELOPMENT
  RUNTIME
}

""""""
type RepositoryVulnerabilityAlertEdge {
  cursor: String!
  node: RepositoryVulnerabilityAlert
}

""""""
enum RepositoryVulnerabilityAlertState {
  AUTO_DISMISSED
  DISMISSED
  FIXED
  OPEN
}

""""""
input RequestReviewsInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the pull request to modify."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  
  """  The Node IDs of the team to request."""
  teamIds: [ID!] @possibleTypes(concreteTypes: ["Team"])
  
  """  Add users to the set rather than replace."""
  union: Boolean = false
  
  """  The Node IDs of the user to request."""
  userIds: [ID!] @possibleTypes(concreteTypes: ["User"])
}

""""""
type RequestReviewsPayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
  requestedReviewersEdge: UserEdge
}

""""""
enum RequestableCheckStatusState {
  COMPLETED
  IN_PROGRESS
  PENDING
  QUEUED
  WAITING
}

""""""
union RequestedReviewer = Bot | Mannequin | Team | User

""""""
type RequestedReviewerConnection {
  edges: [RequestedReviewerEdge]
  nodes: [RequestedReviewer]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type RequestedReviewerEdge {
  cursor: String!
  node: RequestedReviewer
}

""""""
interface RequirableByPullRequest {
  isRequired(
    """    The id of the pull request this is required for"""
    pullRequestId: ID
    
    """    The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!
}

""""""
type RequiredDeploymentsParameters {
  requiredDeploymentEnvironments: [String!]!
}

""""""
input RequiredDeploymentsParametersInput {
  
  """  The environments that must be successfully deployed to before branches can be merged."""
  requiredDeploymentEnvironments: [String!]!
}

""""""
type RequiredStatusCheckDescription {
  app: App
  context: String!
}

""""""
input RequiredStatusCheckInput {
  
  """  The ID of the App that must set the status in order for it to be accepted.
  Omit this value to use whichever app has recently been setting this status, or
  use "any" to allow any app to set the status."""
  appId: ID
  
  """  Status check context that must pass for commits to be accepted to the matching branch."""
  context: String!
}

""""""
type RequiredStatusChecksParameters {
  requiredStatusChecks: [StatusCheckConfiguration!]!
  strictRequiredStatusChecksPolicy: Boolean!
}

""""""
input RequiredStatusChecksParametersInput {
  
  """  Status checks that are required."""
  requiredStatusChecks: [StatusCheckConfigurationInput!]!
  
  """  Whether pull requests targeting a matching branch must be tested with the
  latest code. This setting will not take effect unless at least one status
  check is enabled."""
  strictRequiredStatusChecksPolicy: Boolean!
}

""""""
input RerequestCheckSuiteInput {
  
  """  The Node ID of the check suite."""
  checkSuiteId: ID! @possibleTypes(concreteTypes: ["CheckSuite"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type RerequestCheckSuitePayload {
  checkSuite: CheckSuite
  clientMutationId: String
}

""""""
input ResolveReviewThreadInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the thread to resolve"""
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

""""""
type ResolveReviewThreadPayload {
  clientMutationId: String
  thread: PullRequestReviewThread
}

""""""
type RestrictedContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  resourcePath: URI!
  url: URI!
  user: User!
}

""""""
input RetireSponsorsTierInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the published tier to retire."""
  tierId: ID! @possibleTypes(concreteTypes: ["SponsorsTier"])
}

""""""
type RetireSponsorsTierPayload {
  clientMutationId: String
  sponsorsTier: SponsorsTier
}

""""""
input RevertPullRequestInput {
  
  """  The description of the revert pull request."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Indicates whether the revert pull request should be a draft."""
  draft: Boolean = false
  
  """  The ID of the pull request to revert."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  
  """  The title of the revert pull request."""
  title: String
}

""""""
type RevertPullRequestPayload {
  clientMutationId: String
  pullRequest: PullRequest
  revertPullRequest: PullRequest
}

""""""
type ReviewDismissalAllowance implements Node {
  actor: ReviewDismissalAllowanceActor
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

""""""
union ReviewDismissalAllowanceActor = App | Team | User

""""""
type ReviewDismissalAllowanceConnection {
  edges: [ReviewDismissalAllowanceEdge]
  nodes: [ReviewDismissalAllowance]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ReviewDismissalAllowanceEdge {
  cursor: String!
  node: ReviewDismissalAllowance
}

""""""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  dismissalMessage: String
  dismissalMessageHTML: String
  id: ID!
  previousReviewState: PullRequestReviewState!
  pullRequest: PullRequest!
  pullRequestCommit: PullRequestCommit
  resourcePath: URI!
  review: PullRequestReview
  url: URI!
}

""""""
type ReviewRequest implements Node {
  asCodeOwner: Boolean!
  databaseId: Int
  id: ID!
  pullRequest: PullRequest!
  requestedReviewer: RequestedReviewer
}

""""""
type ReviewRequestConnection {
  edges: [ReviewRequestEdge]
  nodes: [ReviewRequest]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type ReviewRequestEdge {
  cursor: String!
  node: ReviewRequest
}

""""""
type ReviewRequestRemovedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  requestedReviewer: RequestedReviewer
}

""""""
type ReviewRequestedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  requestedReviewer: RequestedReviewer
}

""""""
type ReviewStatusHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
  reviewDecision: PullRequestReviewDecision
}

""""""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise to which all organizations managed by it will be granted the migrator role."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The login of the user to revoke the migrator role"""
  login: String!
}

""""""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  clientMutationId: String
  organizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): OrganizationConnection
}

""""""
input RevokeMigratorRoleInput {
  
  """  The user login or Team slug to revoke the migrator role from."""
  actor: String!
  
  """  Specifies the type of the actor, can be either USER or TEAM."""
  actorType: ActorType!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the organization that the user/team belongs to."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type RevokeMigratorRolePayload {
  clientMutationId: String
  success: Boolean
}

""""""
enum RoleInOrganization {
  DIRECT_MEMBER
  OWNER
  UNAFFILIATED
}

""""""
enum RuleEnforcement {
  ACTIVE
  DISABLED
  EVALUATE
}

""""""
union RuleParameters = BranchNamePatternParameters
  | CommitAuthorEmailPatternParameters
  | CommitMessagePatternParameters
  | CommitterEmailPatternParameters
  | PullRequestParameters
  | RequiredDeploymentsParameters
  | RequiredStatusChecksParameters
  | TagNamePatternParameters
  | UpdateParameters

""""""
input RuleParametersInput {
  
  """  Parameters used for the `branch_name_pattern` rule type"""
  branchNamePattern: BranchNamePatternParametersInput
  
  """  Parameters used for the `commit_author_email_pattern` rule type"""
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput
  
  """  Parameters used for the `commit_message_pattern` rule type"""
  commitMessagePattern: CommitMessagePatternParametersInput
  
  """  Parameters used for the `committer_email_pattern` rule type"""
  committerEmailPattern: CommitterEmailPatternParametersInput
  
  """  Parameters used for the `pull_request` rule type"""
  pullRequest: PullRequestParametersInput
  
  """  Parameters used for the `required_deployments` rule type"""
  requiredDeployments: RequiredDeploymentsParametersInput
  
  """  Parameters used for the `required_status_checks` rule type"""
  requiredStatusChecks: RequiredStatusChecksParametersInput
  
  """  Parameters used for the `tag_name_pattern` rule type"""
  tagNamePattern: TagNamePatternParametersInput
  
  """  Parameters used for the `update` rule type"""
  update: UpdateParametersInput
}

""""""
union RuleSource = Organization | Repository

""""""
enum SamlDigestAlgorithm {
  SHA1
  SHA256
  SHA384
  SHA512
}

""""""
enum SamlSignatureAlgorithm {
  RSA_SHA1
  RSA_SHA256
  RSA_SHA384
  RSA_SHA512
}

""""""
type SavedReply implements Node {
  body: String!
  bodyHTML: HTML!
  databaseId: Int
  id: ID!
  title: String!
  user: Actor
}

""""""
type SavedReplyConnection {
  edges: [SavedReplyEdge]
  nodes: [SavedReply]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SavedReplyEdge {
  cursor: String!
  node: SavedReply
}

""""""
input SavedReplyOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order saved replies by."""
  field: SavedReplyOrderField!
}

""""""
enum SavedReplyOrderField {
  UPDATED_AT
}

""""""
union SearchResultItem = App
  | Discussion
  | Issue
  | MarketplaceListing
  | Organization
  | PullRequest
  | Repository
  | User

""""""
type SearchResultItemConnection {
  codeCount: Int!
  discussionCount: Int!
  edges: [SearchResultItemEdge]
  issueCount: Int!
  nodes: [SearchResultItem]
  pageInfo: PageInfo!
  repositoryCount: Int!
  userCount: Int!
  wikiCount: Int!
}

""""""
type SearchResultItemEdge {
  cursor: String!
  node: SearchResultItem
  textMatches: [TextMatch]
}

""""""
enum SearchType {
  DISCUSSION
  ISSUE
  REPOSITORY
  USER
}

""""""
type SecurityAdvisory implements Node {
  classification: SecurityAdvisoryClassification!
  cvss: CVSS!
  cwes(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CWEConnection!
  databaseId: Int
  description: String!
  ghsaId: String!
  id: ID!
  identifiers: [SecurityAdvisoryIdentifier!]!
  notificationsPermalink: URI
  origin: String!
  permalink: URI
  publishedAt: DateTime!
  references: [SecurityAdvisoryReference!]!
  severity: SecurityAdvisorySeverity!
  summary: String!
  updatedAt: DateTime!
  vulnerabilities(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    A list of advisory classifications to filter vulnerabilities by."""
    classifications: [SecurityAdvisoryClassification!]
    
    """    An ecosystem to filter vulnerabilities by."""
    ecosystem: SecurityAdvisoryEcosystem
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the returned topics."""
    orderBy: SecurityVulnerabilityOrder = { field: UPDATED_AT, direction: DESC }
    
    """    A package name to filter vulnerabilities by."""
    package: String
    
    """    A list of severities to filter vulnerabilities by."""
    severities: [SecurityAdvisorySeverity!]
  ): SecurityVulnerabilityConnection!
  withdrawnAt: DateTime
}

""""""
enum SecurityAdvisoryClassification {
  GENERAL
  MALWARE
}

""""""
type SecurityAdvisoryConnection {
  edges: [SecurityAdvisoryEdge]
  nodes: [SecurityAdvisory]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
enum SecurityAdvisoryEcosystem {
  ACTIONS
  COMPOSER
  ERLANG
  GO
  MAVEN
  NPM
  NUGET
  PIP
  PUB
  RUBYGEMS
  RUST
  SWIFT
}

""""""
type SecurityAdvisoryEdge {
  cursor: String!
  node: SecurityAdvisory
}

""""""
type SecurityAdvisoryIdentifier {
  type: String!
  value: String!
}

""""""
input SecurityAdvisoryIdentifierFilter {
  
  """  The identifier type."""
  type: SecurityAdvisoryIdentifierType!
  
  """  The identifier string. Supports exact or partial matching."""
  value: String!
}

""""""
enum SecurityAdvisoryIdentifierType {
  CVE
  GHSA
}

""""""
input SecurityAdvisoryOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order security advisories by."""
  field: SecurityAdvisoryOrderField!
}

""""""
enum SecurityAdvisoryOrderField {
  PUBLISHED_AT
  UPDATED_AT
}

""""""
type SecurityAdvisoryPackage {
  ecosystem: SecurityAdvisoryEcosystem!
  name: String!
}

""""""
type SecurityAdvisoryPackageVersion {
  identifier: String!
}

""""""
type SecurityAdvisoryReference {
  url: URI!
}

""""""
enum SecurityAdvisorySeverity {
  CRITICAL
  HIGH
  LOW
  MODERATE
}

""""""
type SecurityVulnerability {
  advisory: SecurityAdvisory!
  firstPatchedVersion: SecurityAdvisoryPackageVersion
  package: SecurityAdvisoryPackage!
  severity: SecurityAdvisorySeverity!
  updatedAt: DateTime!
  vulnerableVersionRange: String!
}

""""""
type SecurityVulnerabilityConnection {
  edges: [SecurityVulnerabilityEdge]
  nodes: [SecurityVulnerability]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SecurityVulnerabilityEdge {
  cursor: String!
  node: SecurityVulnerability
}

""""""
input SecurityVulnerabilityOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order security vulnerabilities by."""
  field: SecurityVulnerabilityOrderField!
}

""""""
enum SecurityVulnerabilityOrderField {
  UPDATED_AT
}

""""""
input SetEnterpriseIdentityProviderInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The digest algorithm used to sign SAML requests for the identity provider."""
  digestMethod: SamlDigestAlgorithm!
  
  """  The ID of the enterprise on which to set an identity provider."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The x509 certificate used by the identity provider to sign assertions and responses."""
  idpCertificate: String!
  
  """  The Issuer Entity ID for the SAML identity provider"""
  issuer: String
  
  """  The signature algorithm used to sign SAML requests for the identity provider."""
  signatureMethod: SamlSignatureAlgorithm!
  
  """  The URL endpoint for the identity provider's SAML SSO."""
  ssoUrl: URI!
}

""""""
type SetEnterpriseIdentityProviderPayload {
  clientMutationId: String
  identityProvider: EnterpriseIdentityProvider
}

""""""
input SetOrganizationInteractionLimitInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  When this limit should expire."""
  expiry: RepositoryInteractionLimitExpiry
  
  """  The limit to set."""
  limit: RepositoryInteractionLimit!
  
  """  The ID of the organization to set a limit for."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type SetOrganizationInteractionLimitPayload {
  clientMutationId: String
  organization: Organization
}

""""""
input SetRepositoryInteractionLimitInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  When this limit should expire."""
  expiry: RepositoryInteractionLimitExpiry
  
  """  The limit to set."""
  limit: RepositoryInteractionLimit!
  
  """  The ID of the repository to set a limit for."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type SetRepositoryInteractionLimitPayload {
  clientMutationId: String
  repository: Repository
}

""""""
input SetUserInteractionLimitInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  When this limit should expire."""
  expiry: RepositoryInteractionLimitExpiry
  
  """  The limit to set."""
  limit: RepositoryInteractionLimit!
  
  """  The ID of the user to set a limit for."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

""""""
type SetUserInteractionLimitPayload {
  clientMutationId: String
  user: User
}

""""""
type SmimeSignature implements GitSignature {
  email: String!
  isValid: Boolean!
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

""""""
type SocialAccount {
  displayName: String!
  provider: SocialAccountProvider!
  url: URI!
}

""""""
type SocialAccountConnection {
  edges: [SocialAccountEdge]
  nodes: [SocialAccount]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SocialAccountEdge {
  cursor: String!
  node: SocialAccount
}

""""""
enum SocialAccountProvider {
  FACEBOOK
  GENERIC
  HOMETOWN
  INSTAGRAM
  LINKEDIN
  MASTODON
  REDDIT
  TWITCH
  TWITTER
  YOUTUBE
}

""""""
union Sponsor = Organization | User

""""""
type SponsorConnection {
  edges: [SponsorEdge]
  nodes: [Sponsor]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SponsorEdge {
  cursor: String!
  node: Sponsor
}

""""""
input SponsorOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order sponsor entities by."""
  field: SponsorOrderField!
}

""""""
enum SponsorOrderField {
  LOGIN
  RELEVANCE
}

""""""
interface Sponsorable {
  estimatedNextSponsorsPayoutInCents: Int!
  hasSponsorsListing: Boolean!
  isSponsoredBy(
    """    The target account's login."""
    accountLogin: String!
  ): Boolean!
  isSponsoringViewer: Boolean!
  monthlyEstimatedSponsorsIncomeInCents: Int!
  sponsoring(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the users and organizations returned from the connection."""
    orderBy: SponsorOrder = { field: RELEVANCE, direction: DESC }
  ): SponsorConnection!
  sponsors(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsors returned from the connection."""
    orderBy: SponsorOrder = { field: RELEVANCE, direction: DESC }
    
    """    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see."""
    tierId: ID
  ): SponsorConnection!
  sponsorsActivities(
    """    Filter activities to only the specified actions."""
    actions: [SponsorsActivityAction!] = [
      
    ]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship."""
    includeAsSponsor: Boolean = false
    
    """    Whether or not to include private activities in the result set. Defaults to including public and private activities."""
    includePrivate: Boolean = true
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for activity returned from the connection."""
    orderBy: SponsorsActivityOrder = { field: TIMESTAMP, direction: DESC }
    
    """    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given."""
    period: SponsorsActivityPeriod = MONTH
    
    """    Filter activities to those that occurred on or after this time."""
    since: DateTime
    
    """    Filter activities to those that occurred before this time."""
    until: DateTime
  ): SponsorsActivityConnection!
  sponsorsListing: SponsorsListing
  sponsorshipForViewerAsSponsor(
    """    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled."""
    activeOnly: Boolean = true
  ): Sponsorship
  sponsorshipForViewerAsSponsorable(
    """    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled."""
    activeOnly: Boolean = true
  ): Sponsorship
  sponsorshipNewsletters(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsorship updates returned from the connection."""
    orderBy: SponsorshipNewsletterOrder = { field: CREATED_AT, direction: DESC }
  ): SponsorshipNewsletterConnection!
  sponsorshipsAsMaintainer(
    """    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received."""
    activeOnly: Boolean = true
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer."""
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
  sponsorshipsAsSponsor(
    """    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made."""
    activeOnly: Boolean = true
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins."""
    maintainerLogins: [String!]
    
    """    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer."""
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
  totalSponsorshipAmountAsSponsorInCents(
    """    Filter payments to those that occurred on or after this time."""
    since: DateTime
    
    """    Filter payments to those made to the users or organizations with the specified usernames."""
    sponsorableLogins: [String!] = [
      
    ]
    
    """    Filter payments to those that occurred before this time."""
    until: DateTime
  ): Int
  viewerCanSponsor: Boolean!
  viewerIsSponsoring: Boolean!
}

""""""
union SponsorableItem = Organization | User

""""""
type SponsorableItemConnection {
  edges: [SponsorableItemEdge]
  nodes: [SponsorableItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SponsorableItemEdge {
  cursor: String!
  node: SponsorableItem
}

""""""
input SponsorableOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order sponsorable entities by."""
  field: SponsorableOrderField!
}

""""""
enum SponsorableOrderField {
  LOGIN
}

""""""
type SponsorsActivity implements Node {
  action: SponsorsActivityAction!
  currentPrivacyLevel: SponsorshipPrivacy
  id: ID!
  previousSponsorsTier: SponsorsTier
  sponsor: Sponsor
  sponsorable: Sponsorable!
  sponsorsTier: SponsorsTier
  timestamp: DateTime
  viaBulkSponsorship: Boolean!
}

""""""
enum SponsorsActivityAction {
  CANCELLED_SPONSORSHIP
  NEW_SPONSORSHIP
  PENDING_CHANGE
  REFUND
  SPONSOR_MATCH_DISABLED
  TIER_CHANGE
}

""""""
type SponsorsActivityConnection {
  edges: [SponsorsActivityEdge]
  nodes: [SponsorsActivity]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SponsorsActivityEdge {
  cursor: String!
  node: SponsorsActivity
}

""""""
input SponsorsActivityOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order activity by."""
  field: SponsorsActivityOrderField!
}

""""""
enum SponsorsActivityOrderField {
  TIMESTAMP
}

""""""
enum SponsorsActivityPeriod {
  ALL
  DAY
  MONTH
  WEEK
}

""""""
enum SponsorsCountryOrRegionCode {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  YT
  ZA
  ZM
  ZW
}

""""""
type SponsorsGoal {
  description: String
  kind: SponsorsGoalKind!
  percentComplete: Int!
  targetValue: Int!
  title: String!
}

""""""
enum SponsorsGoalKind {
  MONTHLY_SPONSORSHIP_AMOUNT
  TOTAL_SPONSORS_COUNT
}

""""""
type SponsorsListing implements Node {
  activeGoal: SponsorsGoal
  activeStripeConnectAccount: StripeConnectAccount
  billingCountryOrRegion: String
  contactEmailAddress: String
  createdAt: DateTime!
  dashboardResourcePath: URI!
  dashboardUrl: URI!
  featuredItems(
    """    The types of featured items to return."""
    featureableTypes: [SponsorsListingFeaturedItemFeatureableType!] = [
      REPOSITORY, USER
    ]
  ): [SponsorsListingFeaturedItem!]!
  fiscalHost: Organization
  fullDescription: String!
  fullDescriptionHTML: HTML!
  id: ID!
  isPublic: Boolean!
  name: String!
  nextPayoutDate: Date
  residenceCountryOrRegion: String
  resourcePath: URI!
  shortDescription: String!
  slug: String!
  sponsorable: Sponsorable!
  tiers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether to include tiers that aren't published. Only admins of the Sponsors
    listing can see draft tiers. Only admins of the Sponsors listing and viewers
    who are currently sponsoring on a retired tier can see those retired tiers.
    Defaults to including only published tiers, which are visible to anyone who
    can see the GitHub Sponsors profile."""
    includeUnpublished: Boolean = false
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for Sponsors tiers returned from the connection."""
    orderBy: SponsorsTierOrder = { field: MONTHLY_PRICE_IN_CENTS, direction: ASC }
  ): SponsorsTierConnection
  url: URI!
}

""""""
union SponsorsListingFeatureableItem = Repository | User

""""""
type SponsorsListingFeaturedItem implements Node {
  createdAt: DateTime!
  description: String
  featureable: SponsorsListingFeatureableItem!
  id: ID!
  position: Int!
  sponsorsListing: SponsorsListing!
  updatedAt: DateTime!
}

""""""
enum SponsorsListingFeaturedItemFeatureableType {
  REPOSITORY
  USER
}

""""""
type SponsorsTier implements Node {
  adminInfo: SponsorsTierAdminInfo
  closestLesserValueTier: SponsorsTier
  createdAt: DateTime!
  description: String!
  descriptionHTML: HTML!
  id: ID!
  isCustomAmount: Boolean!
  isOneTime: Boolean!
  monthlyPriceInCents: Int!
  monthlyPriceInDollars: Int!
  name: String!
  sponsorsListing: SponsorsListing!
  updatedAt: DateTime!
}

""""""
type SponsorsTierAdminInfo {
  isDraft: Boolean!
  isPublished: Boolean!
  isRetired: Boolean!
  sponsorships(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether or not to return private sponsorships using this tier. Defaults to
    only returning public sponsorships on this tier."""
    includePrivate: Boolean = false
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer."""
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
}

""""""
type SponsorsTierConnection {
  edges: [SponsorsTierEdge]
  nodes: [SponsorsTier]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SponsorsTierEdge {
  cursor: String!
  node: SponsorsTier
}

""""""
input SponsorsTierOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order tiers by."""
  field: SponsorsTierOrderField!
}

""""""
enum SponsorsTierOrderField {
  CREATED_AT
  MONTHLY_PRICE_IN_CENTS
}

""""""
type Sponsorship implements Node {
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  isOneTimePayment: Boolean!
  isSponsorOptedIntoEmail: Boolean
  maintainer: User! @deprecated(
    reason: "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC."
  )
  privacyLevel: SponsorshipPrivacy!
  sponsor: User @deprecated(
    reason: "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC."
  )
  sponsorEntity: Sponsor
  sponsorable: Sponsorable!
  tier: SponsorsTier
  tierSelectedAt: DateTime
}

""""""
type SponsorshipConnection {
  edges: [SponsorshipEdge]
  nodes: [Sponsorship]
  pageInfo: PageInfo!
  totalCount: Int!
  totalRecurringMonthlyPriceInCents: Int!
  totalRecurringMonthlyPriceInDollars: Int!
}

""""""
type SponsorshipEdge {
  cursor: String!
  node: Sponsorship
}

""""""
type SponsorshipNewsletter implements Node {
  author: User
  body: String!
  createdAt: DateTime!
  id: ID!
  isPublished: Boolean!
  sponsorable: Sponsorable!
  subject: String!
  updatedAt: DateTime!
}

""""""
type SponsorshipNewsletterConnection {
  edges: [SponsorshipNewsletterEdge]
  nodes: [SponsorshipNewsletter]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SponsorshipNewsletterEdge {
  cursor: String!
  node: SponsorshipNewsletter
}

""""""
input SponsorshipNewsletterOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order sponsorship newsletters by."""
  field: SponsorshipNewsletterOrderField!
}

""""""
enum SponsorshipNewsletterOrderField {
  CREATED_AT
}

""""""
input SponsorshipOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order sponsorship by."""
  field: SponsorshipOrderField!
}

""""""
enum SponsorshipOrderField {
  CREATED_AT
}

""""""
enum SponsorshipPrivacy {
  PRIVATE
  PUBLIC
}

""""""
enum SquashMergeCommitMessage {
  BLANK
  COMMIT_MESSAGES
  PR_BODY
}

""""""
enum SquashMergeCommitTitle {
  COMMIT_OR_PR_TITLE
  PR_TITLE
}

""""""
type SshSignature implements GitSignature {
  email: String!
  isValid: Boolean!
  keyFingerprint: String
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

""""""
input StarOrder {
  
  """  The direction in which to order nodes."""
  direction: OrderDirection!
  
  """  The field in which to order nodes by."""
  field: StarOrderField!
}

""""""
enum StarOrderField {
  STARRED_AT
}

""""""
type StargazerConnection {
  edges: [StargazerEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type StargazerEdge {
  cursor: String!
  node: User!
  starredAt: DateTime!
}

""""""
interface Starrable {
  id: ID!
  stargazerCount: Int!
  stargazers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: StarOrder
  ): StargazerConnection!
  viewerHasStarred: Boolean!
}

""""""
type StarredRepositoryConnection {
  edges: [StarredRepositoryEdge]
  isOverLimit: Boolean!
  nodes: [Repository]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type StarredRepositoryEdge {
  cursor: String!
  node: Repository!
  starredAt: DateTime!
}

""""""
input StartOrganizationMigrationInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The migration source access token."""
  sourceAccessToken: String!
  
  """  The URL of the organization to migrate."""
  sourceOrgUrl: URI!
  
  """  The ID of the enterprise the target organization belongs to."""
  targetEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The name of the target organization."""
  targetOrgName: String!
}

""""""
type StartOrganizationMigrationPayload {
  clientMutationId: String
  orgMigration: OrganizationMigration
}

""""""
input StartRepositoryMigrationInput {
  
  """  The migration source access token."""
  accessToken: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Whether to continue the migration on error. Defaults to `true`."""
  continueOnError: Boolean
  
  """  The signed URL to access the user-uploaded git archive."""
  gitArchiveUrl: String
  
  """  The GitHub personal access token of the user importing to the target repository."""
  githubPat: String
  
  """  Whether to lock the source repository."""
  lockSource: Boolean
  
  """  The signed URL to access the user-uploaded metadata archive."""
  metadataArchiveUrl: String
  
  """  The ID of the organization that will own the imported repository."""
  ownerId: ID! @possibleTypes(concreteTypes: ["Organization"])
  
  """  The name of the imported repository."""
  repositoryName: String!
  
  """  Whether to skip migrating releases for the repository."""
  skipReleases: Boolean
  
  """  The ID of the migration source."""
  sourceId: ID! @possibleTypes(concreteTypes: ["MigrationSource"])
  
  """  The URL of the source repository."""
  sourceRepositoryUrl: URI
  
  """  The visibility of the imported repository."""
  targetRepoVisibility: String
}

""""""
type StartRepositoryMigrationPayload {
  clientMutationId: String
  repositoryMigration: RepositoryMigration
}

""""""
type Status implements Node {
  combinedContexts(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): StatusCheckRollupContextConnection!
  commit: Commit
  context(
    """    The context name."""
    name: String!
  ): StatusContext
  contexts: [StatusContext!]!
  id: ID!
  state: StatusState!
}

""""""
type StatusCheckConfiguration {
  context: String!
  integrationId: Int
}

""""""
input StatusCheckConfigurationInput {
  
  """  The status check context name that must be present on the commit."""
  context: String!
  
  """  The optional integration ID that this status check must originate from."""
  integrationId: Int
}

""""""
type StatusCheckRollup implements Node {
  commit: Commit
  contexts(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): StatusCheckRollupContextConnection!
  id: ID!
  state: StatusState!
}

""""""
union StatusCheckRollupContext = CheckRun | StatusContext

""""""
type StatusCheckRollupContextConnection {
  checkRunCount: Int!
  checkRunCountsByState: [CheckRunStateCount!]
  edges: [StatusCheckRollupContextEdge]
  nodes: [StatusCheckRollupContext]
  pageInfo: PageInfo!
  statusContextCount: Int!
  statusContextCountsByState: [StatusContextStateCount!]
  totalCount: Int!
}

""""""
type StatusCheckRollupContextEdge {
  cursor: String!
  node: StatusCheckRollupContext
}

""""""
type StatusContext implements Node & RequirableByPullRequest {
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int = 40
  ): URI
  commit: Commit
  context: String!
  createdAt: DateTime!
  creator: Actor
  description: String
  id: ID!
  isRequired(
    """    The id of the pull request this is required for"""
    pullRequestId: ID
    
    """    The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!
  state: StatusState!
  targetUrl: URI
}

""""""
type StatusContextStateCount {
  count: Int!
  state: StatusState!
}

""""""
enum StatusState {
  ERROR
  EXPECTED
  FAILURE
  PENDING
  SUCCESS
}

""""""
type StripeConnectAccount {
  accountId: String!
  billingCountryOrRegion: String
  countryOrRegion: String
  isActive: Boolean!
  sponsorsListing: SponsorsListing!
  stripeDashboardUrl: URI!
}

""""""
input SubmitPullRequestReviewInput {
  
  """  The text field to set on the Pull Request Review."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The event to send to the Pull Request Review."""
  event: PullRequestReviewEvent!
  
  """  The Pull Request ID to submit any pending reviews."""
  pullRequestId: ID @possibleTypes(concreteTypes: ["PullRequest"])
  
  """  The Pull Request Review ID to submit."""
  pullRequestReviewId: ID @possibleTypes(concreteTypes: ["PullRequestReview"])
}

""""""
type SubmitPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
}

""""""
type Submodule {
  branch: String
  gitUrl: URI!
  name: String!
  nameRaw: Base64String!
  path: String!
  pathRaw: Base64String!
  subprojectCommitOid: GitObjectID
}

""""""
type SubmoduleConnection {
  edges: [SubmoduleEdge]
  nodes: [Submodule]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type SubmoduleEdge {
  cursor: String!
  node: Submodule
}

""""""
interface Subscribable {
  id: ID!
  viewerCanSubscribe: Boolean!
  viewerSubscription: SubscriptionState
}

""""""
interface SubscribableThread {
  id: ID!
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

""""""
type SubscribedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  subscribable: Subscribable!
}

""""""
enum SubscriptionState {
  IGNORED
  SUBSCRIBED
  UNSUBSCRIBED
}

""""""
type SuggestedReviewer {
  isAuthor: Boolean!
  isCommenter: Boolean!
  reviewer: User!
}

""""""
type Tag implements GitObject & Node {
  abbreviatedOid: String!
  commitResourcePath: URI!
  commitUrl: URI!
  id: ID!
  message: String
  name: String!
  oid: GitObjectID!
  repository: Repository!
  tagger: GitActor
  target: GitObject!
}

""""""
type TagNamePatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

""""""
input TagNamePatternParametersInput {
  
  """  How this rule will appear to users."""
  name: String
  
  """  If true, the rule will fail if the pattern matches."""
  negate: Boolean
  
  """  The operator to use for matching."""
  operator: String!
  
  """  The pattern to match with."""
  pattern: String!
}

""""""
type Team implements MemberStatusable & Node & Subscribable {
  ancestors(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): TeamConnection!
  avatarUrl(
    """    The size in pixels of the resulting square image."""
    size: Int = 400
  ): URI
  childTeams(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether to list immediate child teams or all descendant child teams."""
    immediateOnly: Boolean = true
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: TeamOrder
    
    """    User logins to filter by"""
    userLogins: [String!]
  ): TeamConnection!
  combinedSlug: String!
  createdAt: DateTime!
  databaseId: Int
  description: String
  discussion(
    """    The sequence number of the discussion to find."""
    number: Int!
  ): TeamDiscussion
  discussions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    If provided, filters discussions according to whether or not they are pinned."""
    isPinned: Boolean
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: TeamDiscussionOrder
  ): TeamDiscussionConnection!
  discussionsResourcePath: URI!
  discussionsUrl: URI!
  editTeamResourcePath: URI!
  editTeamUrl: URI!
  id: ID!
  invitations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): OrganizationInvitationConnection
  memberStatuses(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for user statuses returned from the connection."""
    orderBy: UserStatusOrder = { field: UPDATED_AT, direction: DESC }
  ): UserStatusConnection!
  members(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter by membership type"""
    membership: TeamMembershipType = ALL
    
    """    Order for the connection."""
    orderBy: TeamMemberOrder
    
    """    The search string to look for."""
    query: String
    
    """    Filter by team member role"""
    role: TeamMemberRole
  ): TeamMemberConnection!
  membersResourcePath: URI!
  membersUrl: URI!
  name: String!
  newTeamResourcePath: URI!
  newTeamUrl: URI!
  notificationSetting: TeamNotificationSetting!
  organization: Organization!
  parentTeam: Team
  privacy: TeamPrivacy!
  projectV2(
    """    The Project number."""
    number: Int!
  ): ProjectV2
  projectsV2(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filtering options for projects returned from this connection"""
    filterBy: ProjectV2Filters = {  }
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    How to order the returned projects."""
    orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }
    
    """    The query to search projects by."""
    query: String = ""
  ): ProjectV2Connection!
  repositories(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for the connection."""
    orderBy: TeamRepositoryOrder
    
    """    The search string to look for. Repositories will be returned where the name contains your search string."""
    query: String
  ): TeamRepositoryConnection!
  repositoriesResourcePath: URI!
  repositoriesUrl: URI!
  resourcePath: URI!
  reviewRequestDelegationAlgorithm: TeamReviewAssignmentAlgorithm @preview(
    toggledBy: "stone-crop-preview")
  reviewRequestDelegationEnabled: Boolean! @preview(
    toggledBy: "stone-crop-preview")
  reviewRequestDelegationMemberCount: Int @preview(
    toggledBy: "stone-crop-preview")
  reviewRequestDelegationNotifyTeam: Boolean! @preview(
    toggledBy: "stone-crop-preview")
  slug: String!
  teamsResourcePath: URI!
  teamsUrl: URI!
  updatedAt: DateTime!
  url: URI!
  viewerCanAdminister: Boolean!
  viewerCanSubscribe: Boolean!
  viewerSubscription: SubscriptionState
}

""""""
type TeamAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type TeamAddRepositoryAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
interface TeamAuditEntryData {
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
}

""""""
type TeamChangeParentTeamAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  parentTeam: Team
  parentTeamName: String
  parentTeamNameWas: String
  parentTeamResourcePath: URI
  parentTeamUrl: URI
  parentTeamWas: Team
  parentTeamWasResourcePath: URI
  parentTeamWasUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type TeamConnection {
  edges: [TeamEdge]
  nodes: [Team]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type TeamDiscussion implements Comment & Deletable & Node & Reactable & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  bodyVersion: String! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  comments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    When provided, filters the connection such that results begin with the comment with this number."""
    fromComment: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: TeamDiscussionCommentOrder
  ): TeamDiscussionCommentConnection! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  commentsResourcePath: URI! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  commentsUrl: URI! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isPinned: Boolean! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  isPrivate: Boolean! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  lastEditedAt: DateTime
  number: Int! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  resourcePath: URI! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  team: Team! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  title: String! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  updatedAt: DateTime!
  url: URI! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanPin: Boolean! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  viewerCanReact: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerSubscription: SubscriptionState
}

""""""
type TeamDiscussionComment implements Comment & Deletable & Node & Reactable & UniformResourceLocatable & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  bodyVersion: String! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  discussion: TeamDiscussion! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: DateTime
  number: Int! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Allows filtering Reactions by emoji."""
    content: ReactionContent
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!
  resourcePath: URI! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  updatedAt: DateTime!
  url: URI! @deprecated(
    reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC."
  )
  userContentEdits(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

""""""
type TeamDiscussionCommentConnection {
  edges: [TeamDiscussionCommentEdge]
  nodes: [TeamDiscussionComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type TeamDiscussionCommentEdge {
  cursor: String!
  node: TeamDiscussionComment
}

""""""
input TeamDiscussionCommentOrder {
  
  """  The direction in which to order nodes."""
  direction: OrderDirection!
  
  """  The field by which to order nodes."""
  field: TeamDiscussionCommentOrderField!
}

""""""
enum TeamDiscussionCommentOrderField {
  NUMBER
}

""""""
type TeamDiscussionConnection {
  edges: [TeamDiscussionEdge]
  nodes: [TeamDiscussion]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type TeamDiscussionEdge {
  cursor: String!
  node: TeamDiscussion
}

""""""
input TeamDiscussionOrder {
  
  """  The direction in which to order nodes."""
  direction: OrderDirection!
  
  """  The field by which to order nodes."""
  field: TeamDiscussionOrderField!
}

""""""
enum TeamDiscussionOrderField {
  CREATED_AT
}

""""""
type TeamEdge {
  cursor: String!
  node: Team
}

""""""
type TeamMemberConnection {
  edges: [TeamMemberEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type TeamMemberEdge {
  cursor: String!
  memberAccessResourcePath: URI!
  memberAccessUrl: URI!
  node: User!
  role: TeamMemberRole!
}

""""""
input TeamMemberOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order team members by."""
  field: TeamMemberOrderField!
}

""""""
enum TeamMemberOrderField {
  CREATED_AT
  LOGIN
}

""""""
enum TeamMemberRole {
  MAINTAINER
  MEMBER
}

""""""
enum TeamMembershipType {
  ALL
  CHILD_TEAM
  IMMEDIATE
}

""""""
enum TeamNotificationSetting {
  NOTIFICATIONS_DISABLED
  NOTIFICATIONS_ENABLED
}

""""""
input TeamOrder {
  
  """  The direction in which to order nodes."""
  direction: OrderDirection!
  
  """  The field in which to order nodes by."""
  field: TeamOrderField!
}

""""""
enum TeamOrderField {
  NAME
}

""""""
enum TeamPrivacy {
  SECRET
  VISIBLE
}

""""""
type TeamRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type TeamRemoveRepositoryAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

""""""
type TeamRepositoryConnection {
  edges: [TeamRepositoryEdge]
  nodes: [Repository]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type TeamRepositoryEdge {
  cursor: String!
  node: Repository!
  permission: RepositoryPermission!
}

""""""
input TeamRepositoryOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order repositories by."""
  field: TeamRepositoryOrderField!
}

""""""
enum TeamRepositoryOrderField {
  CREATED_AT
  NAME
  PERMISSION
  PUSHED_AT
  STARGAZERS
  UPDATED_AT
}

""""""
enum TeamReviewAssignmentAlgorithm @preview(toggledBy: "stone-crop-preview") {
  LOAD_BALANCE
  ROUND_ROBIN
}

""""""
enum TeamRole {
  ADMIN
  MEMBER
}

""""""
type TextMatch {
  fragment: String!
  highlights: [TextMatchHighlight!]!
  property: String!
}

""""""
type TextMatchHighlight {
  beginIndice: Int!
  endIndice: Int!
  text: String!
}

""""""
enum ThreadSubscriptionFormAction {
  NONE
  SUBSCRIBE
  UNSUBSCRIBE
}

""""""
enum ThreadSubscriptionState {
  DISABLED
  IGNORING_LIST
  IGNORING_THREAD
  NONE
  SUBSCRIBED_TO_LIST
  SUBSCRIBED_TO_THREAD
  SUBSCRIBED_TO_THREAD_EVENTS
  SUBSCRIBED_TO_THREAD_TYPE
  UNAVAILABLE
}

""""""
type Topic implements Node & Starrable {
  id: ID!
  name: String!
  relatedTopics(
    """    How many topics to return."""
    first: Int = 3
  ): [Topic!]!
  repositories(
    """    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns."""
    affiliations: [RepositoryAffiliation]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    If non-null, filters repositories according to whether they have issues enabled"""
    hasIssuesEnabled: Boolean
    
    """    If non-null, filters repositories according to whether they have been locked"""
    isLocked: Boolean
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder
    
    """    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns."""
    ownerAffiliations: [RepositoryAffiliation] = [
      OWNER, COLLABORATOR
    ]
    
    """    If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy
    
    """    If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned."""
    sponsorableOnly: Boolean = false
  ): RepositoryConnection!
  stargazerCount: Int!
  stargazers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: StarOrder
  ): StargazerConnection!
  viewerHasStarred: Boolean!
}

""""""
interface TopicAuditEntryData {
  topic: Topic
  topicName: String
}

""""""
enum TopicSuggestionDeclineReason {
  NOT_RELEVANT
  PERSONAL_PREFERENCE
  TOO_GENERAL
  TOO_SPECIFIC
}

""""""
enum TrackedIssueStates {
  CLOSED
  OPEN
}

""""""
input TransferEnterpriseOrganizationInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise where the organization should be transferred."""
  destinationEnterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The ID of the organization to transfer."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type TransferEnterpriseOrganizationPayload {
  clientMutationId: String
  organization: Organization
}

""""""
input TransferIssueInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Whether to create labels if they don't exist in the target repository (matched by name)"""
  createLabelsIfMissing: Boolean = false
  
  """  The Node ID of the issue to be transferred"""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
  
  """  The Node ID of the repository the issue should be transferred to"""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type TransferIssuePayload {
  clientMutationId: String
  issue: Issue
}

""""""
type TransferredEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  fromRepository: Repository
  id: ID!
  issue: Issue!
}

""""""
type Tree implements GitObject & Node {
  abbreviatedOid: String!
  commitResourcePath: URI!
  commitUrl: URI!
  entries: [TreeEntry!]
  id: ID!
  oid: GitObjectID!
  repository: Repository!
}

""""""
type TreeEntry {
  extension: String
  isGenerated: Boolean!
  language: Language
  lineCount: Int
  mode: Int!
  name: String!
  nameRaw: Base64String!
  object: GitObject
  oid: GitObjectID!
  path: String
  pathRaw: Base64String
  repository: Repository!
  size: Int!
  submodule: Submodule
  type: String!
}

""""""
scalar URI

""""""
input UnarchiveProjectV2ItemInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the ProjectV2Item to unarchive."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  
  """  The ID of the Project to archive the item from."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type UnarchiveProjectV2ItemPayload {
  clientMutationId: String
  item: ProjectV2Item
}

""""""
input UnarchiveRepositoryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the repository to unarchive."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type UnarchiveRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

""""""
type UnassignedEvent implements Node {
  actor: Actor
  assignable: Assignable!
  assignee: Assignee
  createdAt: DateTime!
  id: ID!
  user: User @deprecated(
    reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC."
  )
}

""""""
input UnfollowOrganizationInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the organization to unfollow."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type UnfollowOrganizationPayload {
  clientMutationId: String
  organization: Organization
}

""""""
input UnfollowUserInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the user to unfollow."""
  userId: ID! @possibleTypes(concreteTypes: ["User"])
}

""""""
type UnfollowUserPayload {
  clientMutationId: String
  user: User
}

""""""
interface UniformResourceLocatable {
  resourcePath: URI!
  url: URI!
}

""""""
type UnknownSignature implements GitSignature {
  email: String!
  isValid: Boolean!
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

""""""
type UnlabeledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  label: Label!
  labelable: Labelable!
}

""""""
input UnlinkProjectV2FromRepositoryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the project to unlink from the repository."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  The ID of the repository to unlink from the project."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type UnlinkProjectV2FromRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

""""""
input UnlinkProjectV2FromTeamInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the project to unlink from the team."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  The ID of the team to unlink from the project."""
  teamId: ID! @possibleTypes(concreteTypes: ["Team"])
}

""""""
type UnlinkProjectV2FromTeamPayload {
  clientMutationId: String
  team: Team
}

""""""
input UnlinkRepositoryFromProjectInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Project linked to the Repository."""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
  
  """  The ID of the Repository linked to the Project."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type UnlinkRepositoryFromProjectPayload {
  clientMutationId: String
  project: Project
  repository: Repository
}

""""""
input UnlockLockableInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the item to be unlocked."""
  lockableId: ID! @possibleTypes(concreteTypes: [
      "Discussion", "Issue", "PullRequest"
    ]
    abstractType: "Lockable")
}

""""""
type UnlockLockablePayload {
  actor: Actor
  clientMutationId: String
  unlockedRecord: Lockable
}

""""""
type UnlockedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  lockable: Lockable!
}

""""""
input UnmarkDiscussionCommentAsAnswerInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion comment to unmark as an answer."""
  id: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

""""""
type UnmarkDiscussionCommentAsAnswerPayload {
  clientMutationId: String
  discussion: Discussion
}

""""""
input UnmarkFileAsViewedInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The path of the file to mark as unviewed"""
  path: String!
  
  """  The Node ID of the pull request."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
}

""""""
type UnmarkFileAsViewedPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
input UnmarkIssueAsDuplicateInput {
  
  """  ID of the issue or pull request currently considered canonical/authoritative/original."""
  canonicalId: ID! @possibleTypes(concreteTypes: [
      "Issue", "PullRequest"
    ]
    abstractType: "IssueOrPullRequest")
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  ID of the issue or pull request currently marked as a duplicate."""
  duplicateId: ID! @possibleTypes(concreteTypes: [
      "Issue", "PullRequest"
    ]
    abstractType: "IssueOrPullRequest")
}

""""""
type UnmarkIssueAsDuplicatePayload {
  clientMutationId: String
  duplicate: IssueOrPullRequest
}

""""""
input UnmarkProjectV2AsTemplateInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Project to unmark as a template."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type UnmarkProjectV2AsTemplatePayload {
  clientMutationId: String
  projectV2: ProjectV2
}

""""""
type UnmarkedAsDuplicateEvent implements Node {
  actor: Actor
  canonical: IssueOrPullRequest
  createdAt: DateTime!
  duplicate: IssueOrPullRequest
  id: ID!
  isCrossRepository: Boolean!
}

""""""
input UnminimizeCommentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the subject to modify."""
  subjectId: ID! @possibleTypes(concreteTypes: [
      "CommitComment",
      "DiscussionComment",
      "GistComment",
      "IssueComment",
      "PullRequestReviewComment"
    ]
    abstractType: "Minimizable")
}

""""""
type UnminimizeCommentPayload {
  clientMutationId: String
  unminimizedComment: Minimizable
}

""""""
input UnpinIssueInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the issue to be unpinned"""
  issueId: ID! @possibleTypes(concreteTypes: ["Issue"])
}

""""""
type UnpinIssuePayload {
  clientMutationId: String
  issue: Issue
}

""""""
type UnpinnedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  issue: Issue!
}

""""""
input UnresolveReviewThreadInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the thread to unresolve"""
  threadId: ID! @possibleTypes(concreteTypes: ["PullRequestReviewThread"])
}

""""""
type UnresolveReviewThreadPayload {
  clientMutationId: String
  thread: PullRequestReviewThread
}

""""""
type UnsubscribedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  subscribable: Subscribable!
}

""""""
interface Updatable {
  viewerCanUpdate: Boolean!
}

""""""
interface UpdatableComment {
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
}

""""""
input UpdateBranchProtectionRuleInput {
  
  """  Can this branch be deleted."""
  allowsDeletions: Boolean
  
  """  Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean
  
  """  Is branch creation a protected operation."""
  blocksCreations: Boolean
  
  """  The global relay id of the branch protection rule to be updated."""
  branchProtectionRuleId: ID! @possibleTypes(concreteTypes: [
      "BranchProtectionRule"
    ])
  
  """  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches."""
  bypassForcePushActorIds: [ID!]
  
  """  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches."""
  bypassPullRequestActorIds: [ID!]
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Will new commits pushed to matching branches dismiss pull request review approvals."""
  dismissesStaleReviews: Boolean
  
  """  Can admins overwrite branch protection."""
  isAdminEnforced: Boolean
  
  """  Whether users can pull changes from upstream when the branch is locked. Set to
  `true` to allow fork syncing. Set to `false` to prevent fork syncing."""
  lockAllowsFetchAndMerge: Boolean
  
  """  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch."""
  lockBranch: Boolean
  
  """  The glob-like pattern used to determine matching branches."""
  pattern: String
  
  """  A list of User, Team, or App IDs allowed to push to matching branches."""
  pushActorIds: [ID!]
  
  """  Whether the most recent push must be approved by someone other than the person who pushed it"""
  requireLastPushApproval: Boolean
  
  """  Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int
  
  """  The list of required deployment environments"""
  requiredDeploymentEnvironments: [String!]
  
  """  List of required status check contexts that must pass for commits to be accepted to matching branches."""
  requiredStatusCheckContexts: [String!]
  
  """  The list of required status checks"""
  requiredStatusChecks: [RequiredStatusCheckInput!]
  
  """  Are approving reviews required to update matching branches."""
  requiresApprovingReviews: Boolean
  
  """  Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean
  
  """  Are commits required to be signed."""
  requiresCommitSignatures: Boolean
  
  """  Are conversations required to be resolved before merging."""
  requiresConversationResolution: Boolean
  
  """  Are successful deployments required before merging."""
  requiresDeployments: Boolean
  
  """  Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean
  
  """  Are status checks required to update matching branches."""
  requiresStatusChecks: Boolean
  
  """  Are branches required to be up to date before merging."""
  requiresStrictStatusChecks: Boolean
  
  """  Is pushing to matching branches restricted."""
  restrictsPushes: Boolean
  
  """  Is dismissal of pull request reviews restricted."""
  restrictsReviewDismissals: Boolean
  
  """  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches."""
  reviewDismissalActorIds: [ID!]
}

""""""
type UpdateBranchProtectionRulePayload {
  branchProtectionRule: BranchProtectionRule
  clientMutationId: String
}

""""""
input UpdateCheckRunInput {
  
  """  Possible further actions the integrator can perform, which a user may trigger."""
  actions: [CheckRunAction!]
  
  """  The node of the check."""
  checkRunId: ID! @possibleTypes(concreteTypes: ["CheckRun"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The time that the check run finished."""
  completedAt: DateTime
  
  """  The final conclusion of the check."""
  conclusion: CheckConclusionState
  
  """  The URL of the integrator's site that has the full details of the check."""
  detailsUrl: URI
  
  """  A reference for the run on the integrator's system."""
  externalId: String
  
  """  The name of the check."""
  name: String
  
  """  Descriptive details about the run."""
  output: CheckRunOutput
  
  """  The node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  The time that the check run began."""
  startedAt: DateTime
  
  """  The current status."""
  status: RequestableCheckStatusState
}

""""""
type UpdateCheckRunPayload {
  checkRun: CheckRun
  clientMutationId: String
}

""""""
input UpdateCheckSuitePreferencesInput {
  
  """  The check suite preferences to modify."""
  autoTriggerPreferences: [CheckSuiteAutoTriggerPreference!]!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type UpdateCheckSuitePreferencesPayload {
  clientMutationId: String
  repository: Repository
}

""""""
input UpdateDiscussionCommentInput {
  
  """  The new contents of the comment body."""
  body: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion comment to update."""
  commentId: ID! @possibleTypes(concreteTypes: ["DiscussionComment"])
}

""""""
type UpdateDiscussionCommentPayload {
  clientMutationId: String
  comment: DiscussionComment
}

""""""
input UpdateDiscussionInput {
  
  """  The new contents of the discussion body."""
  body: String
  
  """  The Node ID of a discussion category within the same repository to change this discussion to."""
  categoryId: ID @possibleTypes(concreteTypes: ["DiscussionCategory"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion to update."""
  discussionId: ID! @possibleTypes(concreteTypes: ["Discussion"])
  
  """  The new discussion title."""
  title: String
}

""""""
type UpdateDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

""""""
input UpdateEnterpriseAdministratorRoleInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The login of a administrator whose role is being changed."""
  login: String!
  
  """  The new role for the Enterprise administrator."""
  role: EnterpriseAdministratorRole!
}

""""""
type UpdateEnterpriseAdministratorRolePayload {
  clientMutationId: String
  message: String
}

""""""
input UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the allow private repository forking setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the allow private repository forking policy on the enterprise."""
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue
  
  """  The value for the allow private repository forking setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the base repository permission setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the base repository permission setting on the enterprise."""
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue!
}

""""""
type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the members can change repository visibility setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the members can change repository visibility setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the members can create repositories setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  Allow members to create internal repositories. Defaults to current value."""
  membersCanCreateInternalRepositories: Boolean
  
  """  Allow members to create private repositories. Defaults to current value."""
  membersCanCreatePrivateRepositories: Boolean
  
  """  Allow members to create public repositories. Defaults to current value."""
  membersCanCreatePublicRepositories: Boolean
  
  """  When false, allow member organizations to set their own repository creation member privileges."""
  membersCanCreateRepositoriesPolicyEnabled: Boolean
  
  """  Value for the members can create repositories setting on the enterprise. This
  or the granular public/private/internal allowed fields (but not both) must be provided."""
  settingValue: EnterpriseMembersCanCreateRepositoriesSettingValue
}

""""""
type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the members can delete issues setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the members can delete issues setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the members can delete repositories setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the members can delete repositories setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the members can invite collaborators setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the members can invite collaborators setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the members can make purchases setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the members can make purchases setting on the enterprise."""
  settingValue: EnterpriseMembersCanMakePurchasesSettingValue!
}

""""""
type UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the members can update protected branches setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the members can update protected branches setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the members can view dependency insights setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the members can view dependency insights setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseOrganizationProjectsSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the organization projects setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the organization projects setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseOrganizationProjectsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseOwnerOrganizationRoleInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Enterprise which the owner belongs to."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The ID of the organization for membership change."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
  
  """  The role to assume in the organization."""
  organizationRole: RoleInOrganization!
}

""""""
type UpdateEnterpriseOwnerOrganizationRolePayload {
  clientMutationId: String
  message: String
}

""""""
input UpdateEnterpriseProfileInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The description of the enterprise."""
  description: String
  
  """  The Enterprise ID to update."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The location of the enterprise."""
  location: String
  
  """  The name of the enterprise."""
  name: String
  
  """  The URL of the enterprise's website."""
  websiteUrl: String
}

""""""
type UpdateEnterpriseProfilePayload {
  clientMutationId: String
  enterprise: Enterprise
}

""""""
input UpdateEnterpriseRepositoryProjectsSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the repository projects setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the repository projects setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseRepositoryProjectsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseTeamDiscussionsSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the team discussions setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the team discussions setting on the enterprise."""
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

""""""
type UpdateEnterpriseTeamDiscussionsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the enterprise on which to set the two factor authentication required setting."""
  enterpriseId: ID! @possibleTypes(concreteTypes: ["Enterprise"])
  
  """  The value for the two factor authentication required setting on the enterprise."""
  settingValue: EnterpriseEnabledSettingValue!
}

""""""
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

""""""
input UpdateEnvironmentInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The node ID of the environment."""
  environmentId: ID! @possibleTypes(concreteTypes: ["Environment"])
  
  """  The ids of users or teams that can approve deployments to this environment"""
  reviewers: [ID!]
  
  """  The wait timer in minutes."""
  waitTimer: Int
}

""""""
type UpdateEnvironmentPayload {
  clientMutationId: String
  environment: Environment
}

""""""
input UpdateIpAllowListEnabledSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the owner on which to set the IP allow list enabled setting."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "App", "Enterprise", "Organization"
    ]
    abstractType: "IpAllowListOwner")
  
  """  The value for the IP allow list enabled setting."""
  settingValue: IpAllowListEnabledSettingValue!
}

""""""
type UpdateIpAllowListEnabledSettingPayload {
  clientMutationId: String
  owner: IpAllowListOwner
}

""""""
input UpdateIpAllowListEntryInput {
  
  """  An IP address or range of addresses in CIDR notation."""
  allowListValue: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the IP allow list entry to update."""
  ipAllowListEntryId: ID! @possibleTypes(concreteTypes: ["IpAllowListEntry"])
  
  """  Whether the IP allow list entry is active when an IP allow list is enabled."""
  isActive: Boolean!
  
  """  An optional name for the IP allow list entry."""
  name: String
}

""""""
type UpdateIpAllowListEntryPayload {
  clientMutationId: String
  ipAllowListEntry: IpAllowListEntry
}

""""""
input UpdateIpAllowListForInstalledAppsEnabledSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the owner."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "App", "Enterprise", "Organization"
    ]
    abstractType: "IpAllowListOwner")
  
  """  The value for the IP allow list configuration for installed GitHub Apps setting."""
  settingValue: IpAllowListForInstalledAppsEnabledSettingValue!
}

""""""
type UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  clientMutationId: String
  owner: IpAllowListOwner
}

""""""
input UpdateIssueCommentInput {
  
  """  The updated text of the comment."""
  body: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the IssueComment to modify."""
  id: ID! @possibleTypes(concreteTypes: ["IssueComment"])
}

""""""
type UpdateIssueCommentPayload {
  clientMutationId: String
  issueComment: IssueComment
}

""""""
input UpdateIssueInput {
  
  """  An array of Node IDs of users for this issue."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  
  """  The body for the issue description."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the Issue to modify."""
  id: ID! @possibleTypes(concreteTypes: ["Issue"])
  
  """  An array of Node IDs of labels for this issue."""
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])
  
  """  The Node ID of the milestone for this issue."""
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])
  
  """  An array of Node IDs for projects associated with this issue."""
  projectIds: [ID!]
  
  """  The desired issue state."""
  state: IssueState
  
  """  The title for the issue."""
  title: String
}

""""""
type UpdateIssuePayload {
  actor: Actor
  clientMutationId: String
  issue: Issue
}

""""""
input UpdateLabelInput @preview(toggledBy: "bane-preview") {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A 6 character hex code, without the leading #, identifying the updated color of the label."""
  color: String
  
  """  A brief description of the label, such as its purpose."""
  description: String
  
  """  The Node ID of the label to be updated."""
  id: ID! @possibleTypes(concreteTypes: ["Label"])
  
  """  The updated name of the label."""
  name: String
}

""""""
type UpdateLabelPayload @preview(toggledBy: "bane-preview") {
  clientMutationId: String
  label: Label
}

""""""
input UpdateNotificationRestrictionSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the owner on which to set the restrict notifications setting."""
  ownerId: ID! @possibleTypes(concreteTypes: [
      "Enterprise", "Organization"
    ]
    abstractType: "VerifiableDomainOwner")
  
  """  The value for the restrict notifications setting."""
  settingValue: NotificationRestrictionSettingValue!
}

""""""
type UpdateNotificationRestrictionSettingPayload {
  clientMutationId: String
  owner: VerifiableDomainOwner
}

""""""
input UpdateOrganizationAllowPrivateRepositoryForkingSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Enable forking of private repositories in the organization?"""
  forkingEnabled: Boolean!
  
  """  The ID of the organization on which to set the allow private repository forking setting."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
}

""""""
type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
  clientMutationId: String
  message: String
  organization: Organization
}

""""""
input UpdateOrganizationWebCommitSignoffSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the organization on which to set the web commit signoff setting."""
  organizationId: ID! @possibleTypes(concreteTypes: ["Organization"])
  
  """  Enable signoff on web-based commits for repositories in the organization?"""
  webCommitSignoffRequired: Boolean!
}

""""""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  clientMutationId: String
  message: String
  organization: Organization
}

""""""
type UpdateParameters {
  updateAllowsFetchAndMerge: Boolean!
}

""""""
input UpdateParametersInput {
  
  """  Branch can pull changes from its upstream repository"""
  updateAllowsFetchAndMerge: Boolean!
}

""""""
input UpdateProjectCardInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Whether or not the ProjectCard should be archived"""
  isArchived: Boolean
  
  """  The note of ProjectCard."""
  note: String
  
  """  The ProjectCard ID to update."""
  projectCardId: ID! @possibleTypes(concreteTypes: ["ProjectCard"])
}

""""""
type UpdateProjectCardPayload {
  clientMutationId: String
  projectCard: ProjectCard
}

""""""
input UpdateProjectColumnInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of project column."""
  name: String!
  
  """  The ProjectColumn ID to update."""
  projectColumnId: ID! @possibleTypes(concreteTypes: ["ProjectColumn"])
}

""""""
type UpdateProjectColumnPayload {
  clientMutationId: String
  projectColumn: ProjectColumn
}

""""""
input UpdateProjectInput {
  
  """  The description of project."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The name of project."""
  name: String
  
  """  The Project ID to update."""
  projectId: ID! @possibleTypes(concreteTypes: ["Project"])
  
  """  Whether the project is public or not."""
  public: Boolean
  
  """  Whether the project is open or closed."""
  state: ProjectState
}

""""""
type UpdateProjectPayload {
  clientMutationId: String
  project: Project
}

""""""
input UpdateProjectV2CollaboratorsInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The collaborators to update."""
  collaborators: [ProjectV2Collaborator!]!
  
  """  The ID of the project to update the collaborators for."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type UpdateProjectV2CollaboratorsPayload {
  clientMutationId: String
  collaborators(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2ActorConnection
}

""""""
input UpdateProjectV2DraftIssueInput {
  
  """  The IDs of the assignees of the draft issue."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  
  """  The body of the draft issue."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the draft issue to update."""
  draftIssueId: ID! @possibleTypes(concreteTypes: ["DraftIssue"])
  
  """  The title of the draft issue."""
  title: String
}

""""""
type UpdateProjectV2DraftIssuePayload {
  clientMutationId: String
  draftIssue: DraftIssue
}

""""""
input UpdateProjectV2Input {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Set the project to closed or open."""
  closed: Boolean
  
  """  The ID of the Project to update."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  Set the project to public or private."""
  public: Boolean
  
  """  Set the readme description of the project."""
  readme: String
  
  """  Set the short description of the project."""
  shortDescription: String
  
  """  Set the title of the project."""
  title: String
}

""""""
input UpdateProjectV2ItemFieldValueInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the field to be updated."""
  fieldId: ID! @possibleTypes(concreteTypes: [
      "ProjectV2Field", "ProjectV2IterationField", "ProjectV2SingleSelectField"
    ]
    abstractType: "ProjectV2FieldConfiguration")
  
  """  The ID of the item to be updated."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  
  """  The ID of the Project."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
  
  """  The value which will be set on the field."""
  value: ProjectV2FieldValue!
}

""""""
type UpdateProjectV2ItemFieldValuePayload {
  clientMutationId: String
  projectV2Item: ProjectV2Item
}

""""""
input UpdateProjectV2ItemPositionInput {
  
  """  The ID of the item to position this item after. If omitted or set to null the item will be moved to top."""
  afterId: ID @possibleTypes(concreteTypes: ["ProjectV2Item"])
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the item to be moved."""
  itemId: ID! @possibleTypes(concreteTypes: ["ProjectV2Item"])
  
  """  The ID of the Project."""
  projectId: ID! @possibleTypes(concreteTypes: ["ProjectV2"])
}

""""""
type UpdateProjectV2ItemPositionPayload {
  clientMutationId: String
  items(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2ItemConnection
}

""""""
type UpdateProjectV2Payload {
  clientMutationId: String
  projectV2: ProjectV2
}

""""""
input UpdatePullRequestBranchInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The head ref oid for the upstream branch."""
  expectedHeadOid: GitObjectID
  
  """  The Node ID of the pull request."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  
  """  The update branch method to use. If omitted, defaults to 'MERGE'"""
  updateMethod: PullRequestBranchUpdateMethod
}

""""""
type UpdatePullRequestBranchPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
input UpdatePullRequestInput {
  
  """  An array of Node IDs of users for this pull request."""
  assigneeIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  
  """  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository."""
  baseRefName: String
  
  """  The contents of the pull request."""
  body: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  An array of Node IDs of labels for this pull request."""
  labelIds: [ID!] @possibleTypes(concreteTypes: ["Label"])
  
  """  Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean
  
  """  The Node ID of the milestone for this pull request."""
  milestoneId: ID @possibleTypes(concreteTypes: ["Milestone"])
  
  """  An array of Node IDs for projects associated with this pull request."""
  projectIds: [ID!]
  
  """  The Node ID of the pull request."""
  pullRequestId: ID! @possibleTypes(concreteTypes: ["PullRequest"])
  
  """  The target state of the pull request."""
  state: PullRequestUpdateState
  
  """  The title of the pull request."""
  title: String
}

""""""
type UpdatePullRequestPayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
}

""""""
input UpdatePullRequestReviewCommentInput {
  
  """  The text of the comment."""
  body: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the comment to modify."""
  pullRequestReviewCommentId: ID! @possibleTypes(concreteTypes: [
      "PullRequestReviewComment"
    ])
}

""""""
type UpdatePullRequestReviewCommentPayload {
  clientMutationId: String
  pullRequestReviewComment: PullRequestReviewComment
}

""""""
input UpdatePullRequestReviewInput {
  
  """  The contents of the pull request review body."""
  body: String!
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the pull request review to modify."""
  pullRequestReviewId: ID! @possibleTypes(concreteTypes: ["PullRequestReview"])
}

""""""
type UpdatePullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
}

""""""
input UpdateRefInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Permit updates of branch Refs that are not fast-forwards?"""
  force: Boolean = false
  
  """  The GitObjectID that the Ref shall be updated to target."""
  oid: GitObjectID!
  
  """  The Node ID of the Ref to be updated."""
  refId: ID! @possibleTypes(concreteTypes: ["Ref"])
}

""""""
type UpdateRefPayload {
  clientMutationId: String
  ref: Ref
}

""""""
input UpdateRefsInput @preview(toggledBy: "update-refs-preview") {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A list of ref updates."""
  refUpdates: [RefUpdate!]!
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
}

""""""
type UpdateRefsPayload @preview(toggledBy: "update-refs-preview") {
  clientMutationId: String
}

""""""
input UpdateRepositoryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  A new description for the repository. Pass an empty string to erase the existing description."""
  description: String
  
  """  Indicates if the repository should have the discussions feature enabled."""
  hasDiscussionsEnabled: Boolean
  
  """  Indicates if the repository should have the issues feature enabled."""
  hasIssuesEnabled: Boolean
  
  """  Indicates if the repository should have the project boards feature enabled."""
  hasProjectsEnabled: Boolean
  
  """  Indicates if the repository should have the wiki feature enabled."""
  hasWikiEnabled: Boolean
  
  """  The URL for a web page about this repository. Pass an empty string to erase the existing URL."""
  homepageUrl: URI
  
  """  The new name of the repository."""
  name: String
  
  """  The ID of the repository to update."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  Whether this repository should be marked as a template such that anyone who
  can access it can create new repositories with the same files and directory structure."""
  template: Boolean
}

""""""
type UpdateRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

""""""
input UpdateRepositoryRulesetInput {
  
  """  A list of actors that are allowed to bypass rules in this ruleset."""
  bypassActors: [RepositoryRulesetBypassActorInput!]
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The list of conditions for this ruleset"""
  conditions: RepositoryRuleConditionsInput
  
  """  The enforcement level for this ruleset"""
  enforcement: RuleEnforcement
  
  """  The name of the ruleset."""
  name: String
  
  """  The global relay id of the repository ruleset to be updated."""
  repositoryRulesetId: ID! @possibleTypes(concreteTypes: ["RepositoryRuleset"])
  
  """  The list of rules for this ruleset"""
  rules: [RepositoryRuleInput!]
  
  """  The target of the ruleset."""
  target: RepositoryRulesetTarget
}

""""""
type UpdateRepositoryRulesetPayload {
  clientMutationId: String
  ruleset: RepositoryRuleset
}

""""""
input UpdateRepositoryWebCommitSignoffSettingInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the repository to update."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  Indicates if the repository should require signoff on web-based commits."""
  webCommitSignoffRequired: Boolean!
}

""""""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  clientMutationId: String
  message: String
  repository: Repository
}

""""""
input UpdateSponsorshipPreferencesInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Specify whether others should be able to see that the sponsor is sponsoring
  the sponsorable. Public visibility still does not reveal which tier is used."""
  privacyLevel: SponsorshipPrivacy = PUBLIC
  
  """  Whether the sponsor should receive email updates from the sponsorable."""
  receiveEmails: Boolean = true
  
  """  The ID of the user or organization who is acting as the sponsor, paying for
  the sponsorship. Required if sponsorLogin is not given."""
  sponsorId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "Sponsor")
  
  """  The username of the user or organization who is acting as the sponsor, paying
  for the sponsorship. Required if sponsorId is not given."""
  sponsorLogin: String
  
  """  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given."""
  sponsorableId: ID @possibleTypes(concreteTypes: [
      "Organization", "User"
    ]
    abstractType: "Sponsorable")
  
  """  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given."""
  sponsorableLogin: String
}

""""""
type UpdateSponsorshipPreferencesPayload {
  clientMutationId: String
  sponsorship: Sponsorship
}

""""""
input UpdateSubscriptionInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The new state of the subscription."""
  state: SubscriptionState!
  
  """  The Node ID of the subscribable object to modify."""
  subscribableId: ID! @possibleTypes(concreteTypes: [
      "Commit",
      "Discussion",
      "Issue",
      "PullRequest",
      "Repository",
      "Team",
      "TeamDiscussion"
    ]
    abstractType: "Subscribable")
}

""""""
type UpdateSubscriptionPayload {
  clientMutationId: String
  subscribable: Subscribable
}

""""""
input UpdateTeamDiscussionCommentInput {
  
  """  The updated text of the comment."""
  body: String!
  
  """  The current version of the body content."""
  bodyVersion: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the comment to modify."""
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussionComment"])
}

""""""
type UpdateTeamDiscussionCommentPayload {
  clientMutationId: String
  teamDiscussionComment: TeamDiscussionComment
}

""""""
input UpdateTeamDiscussionInput {
  
  """  The updated text of the discussion."""
  body: String
  
  """  The current version of the body content. If provided, this update operation
  will be rejected if the given version does not match the latest version on the server."""
  bodyVersion: String
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the discussion to modify."""
  id: ID! @possibleTypes(concreteTypes: ["TeamDiscussion"])
  
  """  If provided, sets the pinned state of the updated discussion."""
  pinned: Boolean
  
  """  The updated title of the discussion."""
  title: String
}

""""""
type UpdateTeamDiscussionPayload {
  clientMutationId: String
  teamDiscussion: TeamDiscussion
}

""""""
input UpdateTeamReviewAssignmentInput @preview(toggledBy: "stone-crop-preview"
) {
  
  """  The algorithm to use for review assignment"""
  algorithm: TeamReviewAssignmentAlgorithm = ROUND_ROBIN
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Turn on or off review assignment"""
  enabled: Boolean!
  
  """  An array of team member IDs to exclude"""
  excludedTeamMemberIds: [ID!] @possibleTypes(concreteTypes: ["User"])
  
  """  The Node ID of the team to update review assignments of"""
  id: ID! @possibleTypes(concreteTypes: ["Team"])
  
  """  Notify the entire team of the PR if it is delegated"""
  notifyTeam: Boolean = true
  
  """  The number of team members to assign"""
  teamMemberCount: Int = 1
}

""""""
type UpdateTeamReviewAssignmentPayload {
  clientMutationId: String
  team: Team
}

""""""
input UpdateTeamsRepositoryInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  Permission that should be granted to the teams."""
  permission: RepositoryPermission!
  
  """  Repository ID being granted access to."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  A list of teams being granted access. Limit: 10"""
  teamIds: [ID!]! @possibleTypes(concreteTypes: ["Team"])
}

""""""
type UpdateTeamsRepositoryPayload {
  clientMutationId: String
  repository: Repository
  teams: [Team!]
}

""""""
input UpdateTopicsInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The Node ID of the repository."""
  repositoryId: ID! @possibleTypes(concreteTypes: ["Repository"])
  
  """  An array of topic names."""
  topicNames: [String!]!
}

""""""
type UpdateTopicsPayload {
  clientMutationId: String
  invalidTopicNames: [String!]
  repository: Repository
}

""""""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  anyPinnableItems(
    """    Filter to only a particular kind of pinnable item."""
    type: PinnableItemType
  ): Boolean!
  avatarUrl(
    """    The size of the resulting square image."""
    size: Int
  ): URI!
  bio: String
  bioHTML: HTML!
  canReceiveOrganizationEmailsWhenNotificationsRestricted(
    """    The login of the organization to check."""
    login: String!
  ): Boolean!
  commitComments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): CommitCommentConnection!
  company: String
  companyHTML: HTML!
  contributionsCollection(
    """    Only contributions made at this time or later will be counted. If omitted, defaults to a year ago."""
    from: DateTime
    
    """    The ID of the organization used to filter contributions."""
    organizationID: ID
    
    """    Only contributions made before and up to (including) this time will be
    counted. If omitted, defaults to the current time or one year from the
    provided from argument."""
    to: DateTime
  ): ContributionsCollection!
  createdAt: DateTime!
  databaseId: Int
  email: String!
  enterprises(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter enterprises returned based on the user's membership type."""
    membershipType: EnterpriseMembershipType = ALL
    
    """    Ordering options for the User's enterprises."""
    orderBy: EnterpriseOrder = { field: NAME, direction: ASC }
  ): EnterpriseConnection
  estimatedNextSponsorsPayoutInCents: Int!
  followers(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): FollowerConnection!
  following(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): FollowingConnection!
  gist(
    """    The gist name to find."""
    name: String!
  ): Gist
  gistComments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): GistCommentConnection!
  gists(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for gists returned from the connection"""
    orderBy: GistOrder
    
    """    Filters Gists according to privacy."""
    privacy: GistPrivacy
  ): GistConnection!
  hasSponsorsListing: Boolean!
  hovercard(
    """    The ID of the subject to get the hovercard in the context of"""
    primarySubjectId: ID
  ): Hovercard!
  id: ID!
  interactionAbility: RepositoryInteractionAbility
  isBountyHunter: Boolean!
  isCampusExpert: Boolean!
  isDeveloperProgramMember: Boolean!
  isEmployee: Boolean!
  isFollowingViewer: Boolean!
  isGitHubStar: Boolean!
  isHireable: Boolean!
  isSiteAdmin: Boolean!
  isSponsoredBy(
    """    The target account's login."""
    accountLogin: String!
  ): Boolean!
  isSponsoringViewer: Boolean!
  isViewer: Boolean!
  issueComments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for issue comments returned from the connection."""
    orderBy: IssueCommentOrder
  ): IssueCommentConnection!
  issues(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Filtering options for issues returned from the connection."""
    filterBy: IssueFilters
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for issues returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the issues by."""
    states: [IssueState!]
  ): IssueConnection!
  itemShowcase: ProfileItemShowcase!
  location: String
  login: String!
  monthlyEstimatedSponsorsIncomeInCents: Int!
  name: String
  organization(
    """    The login of the organization to find."""
    login: String!
  ): Organization
  organizationVerifiedDomainEmails(
    """    The login of the organization to match verified domains from."""
    login: String!
  ): [String!]!
  organizations(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the User's organizations."""
    orderBy: OrganizationOrder = null
  ): OrganizationConnection!
  packages(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Find packages by their names."""
    names: [String]
    
    """    Ordering of the returned packages."""
    orderBy: PackageOrder = { field: CREATED_AT, direction: DESC }
    
    """    Filter registry package by type."""
    packageType: PackageType
    
    """    Find packages in a repository by ID."""
    repositoryId: ID
  ): PackageConnection!
  pinnableItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter the types of pinnable items that are returned."""
    types: [PinnableItemType!]
  ): PinnableItemConnection!
  pinnedItems(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter the types of pinned items that are returned."""
    types: [PinnableItemType!]
  ): PinnableItemConnection!
  pinnedItemsRemaining: Int!
  project(
    """    The project number to find."""
    number: Int!
  ): Project
  projectV2(
    """    The project number."""
    number: Int!
  ): ProjectV2
  projects(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for projects returned from the connection"""
    orderBy: ProjectOrder
    
    """    Query to search projects by, currently only searching by name."""
    search: String
    
    """    A list of states to filter the projects by."""
    states: [ProjectState!]
  ): ProjectConnection!
  projectsResourcePath: URI!
  projectsUrl: URI!
  projectsV2(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    How to order the returned projects."""
    orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }
    
    """    A project to search for under the the owner."""
    query: String
  ): ProjectV2Connection!
  pronouns: String
  publicKeys(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): PublicKeyConnection!
  pullRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    The base ref name to filter the pull requests by."""
    baseRefName: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    The head ref name to filter the pull requests by."""
    headRefName: String
    
    """    A list of label names to filter the pull requests by."""
    labels: [String!]
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
    
    """    A list of states to filter the pull requests by."""
    states: [PullRequestState!]
  ): PullRequestConnection!
  recentProjects(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectV2Connection!
  repositories(
    """    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns."""
    affiliations: [RepositoryAffiliation]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    If non-null, filters repositories according to whether they have issues enabled"""
    hasIssuesEnabled: Boolean
    
    """    If non-null, filters repositories according to whether they are archived and not maintained"""
    isArchived: Boolean
    
    """    If non-null, filters repositories according to whether they are forks of another repository"""
    isFork: Boolean
    
    """    If non-null, filters repositories according to whether they have been locked"""
    isLocked: Boolean
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder
    
    """    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns."""
    ownerAffiliations: [RepositoryAffiliation] = [
      OWNER, COLLABORATOR
    ]
    
    """    If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy
  ): RepositoryConnection!
  repositoriesContributedTo(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]"""
    contributionTypes: [RepositoryContributionType]
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    If non-null, filters repositories according to whether they have issues enabled"""
    hasIssues: Boolean
    
    """    If true, include user repositories"""
    includeUserRepositories: Boolean
    
    """    If non-null, filters repositories according to whether they have been locked"""
    isLocked: Boolean
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder
    
    """    If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy
  ): RepositoryConnection!
  repository(
    """    Follow repository renames. If disabled, a repository referenced by its old name will return an error."""
    followRenames: Boolean = true
    
    """    Name of Repository to find."""
    name: String!
  ): Repository
  repositoryDiscussionComments(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter discussion comments to only those that were marked as the answer"""
    onlyAnswers: Boolean = false
    
    """    Filter discussion comments to only those in a specific repository."""
    repositoryId: ID
  ): DiscussionCommentConnection!
  repositoryDiscussions(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Filter discussions to only those that have been answered or not. Defaults to
    including both answered and unanswered discussions."""
    answered: Boolean = null
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for discussions returned from the connection."""
    orderBy: DiscussionOrder = { field: CREATED_AT, direction: DESC }
    
    """    Filter discussions to only those in a specific repository."""
    repositoryId: ID
    
    """    A list of states to filter the discussions by."""
    states: [DiscussionState!] = [
      
    ]
  ): DiscussionConnection!
  resourcePath: URI!
  savedReplies(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    The field to order saved replies by."""
    orderBy: SavedReplyOrder = { field: UPDATED_AT, direction: DESC }
  ): SavedReplyConnection
  socialAccounts(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): SocialAccountConnection!
  sponsoring(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the users and organizations returned from the connection."""
    orderBy: SponsorOrder = { field: RELEVANCE, direction: DESC }
  ): SponsorConnection!
  sponsors(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsors returned from the connection."""
    orderBy: SponsorOrder = { field: RELEVANCE, direction: DESC }
    
    """    If given, will filter for sponsors at the given tier. Will only return
    sponsors whose tier the viewer is permitted to see."""
    tierId: ID
  ): SponsorConnection!
  sponsorsActivities(
    """    Filter activities to only the specified actions."""
    actions: [SponsorsActivityAction!] = [
      
    ]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether to include those events where this sponsorable acted as the sponsor.
    Defaults to only including events where this sponsorable was the recipient
    of a sponsorship."""
    includeAsSponsor: Boolean = false
    
    """    Whether or not to include private activities in the result set. Defaults to including public and private activities."""
    includePrivate: Boolean = true
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for activity returned from the connection."""
    orderBy: SponsorsActivityOrder = { field: TIMESTAMP, direction: DESC }
    
    """    Filter activities returned to only those that occurred in the most recent
    specified time period. Set to ALL to avoid filtering by when the activity
    occurred. Will be ignored if `since` or `until` is given."""
    period: SponsorsActivityPeriod = MONTH
    
    """    Filter activities to those that occurred on or after this time."""
    since: DateTime
    
    """    Filter activities to those that occurred before this time."""
    until: DateTime
  ): SponsorsActivityConnection!
  sponsorsListing: SponsorsListing
  sponsorshipForViewerAsSponsor(
    """    Whether to return the sponsorship only if it's still active. Pass false to
    get the viewer's sponsorship back even if it has been cancelled."""
    activeOnly: Boolean = true
  ): Sponsorship
  sponsorshipForViewerAsSponsorable(
    """    Whether to return the sponsorship only if it's still active. Pass false to
    get the sponsorship back even if it has been cancelled."""
    activeOnly: Boolean = true
  ): Sponsorship
  sponsorshipNewsletters(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsorship updates returned from the connection."""
    orderBy: SponsorshipNewsletterOrder = { field: CREATED_AT, direction: DESC }
  ): SponsorshipNewsletterConnection!
  sponsorshipsAsMaintainer(
    """    Whether to include only sponsorships that are active right now, versus all
    sponsorships this maintainer has ever received."""
    activeOnly: Boolean = true
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer."""
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
  sponsorshipsAsSponsor(
    """    Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made."""
    activeOnly: Boolean = true
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Filter sponsorships returned to those for the specified maintainers. That
    is, the recipient of the sponsorship is a user or organization with one of
    the given logins."""
    maintainerLogins: [String!]
    
    """    Ordering options for sponsorships returned from this connection. If left
    blank, the sponsorships will be ordered based on relevancy to the viewer."""
    orderBy: SponsorshipOrder
  ): SponsorshipConnection!
  starredRepositories(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Order for connection"""
    orderBy: StarOrder
    
    """    Filters starred repositories to only return repositories owned by the viewer."""
    ownedByViewer: Boolean
  ): StarredRepositoryConnection!
  status: UserStatus
  topRepositories(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder!
    
    """    How far back in time to fetch contributed repositories"""
    since: DateTime
  ): RepositoryConnection!
  totalSponsorshipAmountAsSponsorInCents(
    """    Filter payments to those that occurred on or after this time."""
    since: DateTime
    
    """    Filter payments to those made to the users or organizations with the specified usernames."""
    sponsorableLogins: [String!] = [
      
    ]
    
    """    Filter payments to those that occurred before this time."""
    until: DateTime
  ): Int
  twitterUsername: String
  updatedAt: DateTime!
  url: URI!
  viewerCanChangePinnedItems: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanFollow: Boolean!
  viewerCanSponsor: Boolean!
  viewerIsFollowing: Boolean!
  viewerIsSponsoring: Boolean!
  watching(
    """    Affiliation options for repositories returned from the connection. If none
    specified, the results will include repositories for which the current
    viewer is an owner or collaborator, or member."""
    affiliations: [RepositoryAffiliation]
    
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    If non-null, filters repositories according to whether they have issues enabled"""
    hasIssuesEnabled: Boolean
    
    """    If non-null, filters repositories according to whether they have been locked"""
    isLocked: Boolean
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder
    
    """    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns."""
    ownerAffiliations: [RepositoryAffiliation] = [
      OWNER, COLLABORATOR
    ]
    
    """    If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy
  ): RepositoryConnection!
  websiteUrl: URI
}

""""""
enum UserBlockDuration {
  ONE_DAY
  ONE_MONTH
  ONE_WEEK
  PERMANENT
  THREE_DAYS
}

""""""
type UserBlockedEvent implements Node {
  actor: Actor
  blockDuration: UserBlockDuration!
  createdAt: DateTime!
  id: ID!
  subject: User
}

""""""
type UserConnection {
  edges: [UserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type UserContentEdit implements Node {
  createdAt: DateTime!
  deletedAt: DateTime
  deletedBy: Actor
  diff: String
  editedAt: DateTime!
  editor: Actor
  id: ID!
  updatedAt: DateTime!
}

""""""
type UserContentEditConnection {
  edges: [UserContentEditEdge]
  nodes: [UserContentEdit]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type UserContentEditEdge {
  cursor: String!
  node: UserContentEdit
}

""""""
type UserEdge {
  cursor: String!
  node: User
}

""""""
type UserEmailMetadata {
  primary: Boolean
  type: String
  value: String!
}

""""""
type UserStatus implements Node {
  createdAt: DateTime!
  emoji: String
  emojiHTML: HTML
  expiresAt: DateTime
  id: ID!
  indicatesLimitedAvailability: Boolean!
  message: String
  organization: Organization
  updatedAt: DateTime!
  user: User!
}

""""""
type UserStatusConnection {
  edges: [UserStatusEdge]
  nodes: [UserStatus]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type UserStatusEdge {
  cursor: String!
  node: UserStatus
}

""""""
input UserStatusOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order user statuses by."""
  field: UserStatusOrderField!
}

""""""
enum UserStatusOrderField {
  UPDATED_AT
}

""""""
type VerifiableDomain implements Node {
  createdAt: DateTime!
  databaseId: Int
  dnsHostName: URI
  domain: URI!
  hasFoundHostName: Boolean!
  hasFoundVerificationToken: Boolean!
  id: ID!
  isApproved: Boolean!
  isRequiredForPolicyEnforcement: Boolean!
  isVerified: Boolean!
  owner: VerifiableDomainOwner!
  punycodeEncodedDomain: URI!
  tokenExpirationTime: DateTime
  updatedAt: DateTime!
  verificationToken: String
}

""""""
type VerifiableDomainConnection {
  edges: [VerifiableDomainEdge]
  nodes: [VerifiableDomain]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type VerifiableDomainEdge {
  cursor: String!
  node: VerifiableDomain
}

""""""
input VerifiableDomainOrder {
  
  """  The ordering direction."""
  direction: OrderDirection!
  
  """  The field to order verifiable domains by."""
  field: VerifiableDomainOrderField!
}

""""""
enum VerifiableDomainOrderField {
  CREATED_AT
  DOMAIN
}

""""""
union VerifiableDomainOwner = Enterprise | Organization

""""""
input VerifyVerifiableDomainInput {
  
  """  A unique identifier for the client performing the mutation."""
  clientMutationId: String
  
  """  The ID of the verifiable domain to verify."""
  id: ID! @possibleTypes(concreteTypes: ["VerifiableDomain"])
}

""""""
type VerifyVerifiableDomainPayload {
  clientMutationId: String
  domain: VerifiableDomain
}

""""""
type ViewerHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
  viewer: User!
}

""""""
interface Votable {
  upvoteCount: Int!
  viewerCanUpvote: Boolean!
  viewerHasUpvoted: Boolean!
}

""""""
type Workflow implements Node & UniformResourceLocatable {
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  name: String!
  resourcePath: URI!
  runs(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
    
    """    Ordering options for the connection"""
    orderBy: WorkflowRunOrder = { field: CREATED_AT, direction: DESC }
  ): WorkflowRunConnection!
  state: WorkflowState!
  updatedAt: DateTime!
  url: URI!
}

""""""
type WorkflowRun implements Node & UniformResourceLocatable {
  checkSuite: CheckSuite!
  createdAt: DateTime!
  databaseId: Int
  deploymentReviews(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DeploymentReviewConnection!
  event: String!
  file: WorkflowRunFile
  id: ID!
  pendingDeploymentRequests(
    """    Returns the elements in the list that come after the specified cursor."""
    after: String
    
    """    Returns the elements in the list that come before the specified cursor."""
    before: String
    
    """    Returns the first _n_ elements from the list."""
    first: Int
    
    """    Returns the last _n_ elements from the list."""
    last: Int
  ): DeploymentRequestConnection!
  resourcePath: URI!
  runNumber: Int!
  updatedAt: DateTime!
  url: URI!
  workflow: Workflow!
}

""""""
type WorkflowRunConnection {
  edges: [WorkflowRunEdge]
  nodes: [WorkflowRun]
  pageInfo: PageInfo!
  totalCount: Int!
}

""""""
type WorkflowRunEdge {
  cursor: String!
  node: WorkflowRun
}

""""""
type WorkflowRunFile implements Node & UniformResourceLocatable {
  id: ID!
  path: String!
  repositoryFileUrl: URI!
  repositoryName: URI!
  resourcePath: URI!
  run: WorkflowRun!
  url: URI!
  viewerCanPushRepository: Boolean!
  viewerCanReadRepository: Boolean!
}

""""""
input WorkflowRunOrder {
  
  """  The direction in which to order workflow runs by the specified field."""
  direction: OrderDirection!
  
  """  The field by which to order workflows."""
  field: WorkflowRunOrderField!
}

""""""
enum WorkflowRunOrderField {
  CREATED_AT
}

""""""
enum WorkflowState {
  ACTIVE
  DELETED
  DISABLED_FORK
  DISABLED_INACTIVITY
  DISABLED_MANUALLY
}

""""""
scalar X509Certificate

