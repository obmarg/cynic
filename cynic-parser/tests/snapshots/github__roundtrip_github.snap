---
source: cynic-parser/tests/github.rs
expression: parsed.to_sdl()
---
directive @requiredCapabilities(requiredCapabilities: [String!]) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Marks an element of a GraphQL schema as only available via a preview header
"""
directive @preview(toggledBy: String!) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Defines what type of global IDs are accepted for a mutation argument of type ID.
"""
directive @possibleTypes(abstractType: String, concreteTypes: [String!]!) on INPUT_FIELD_DEFINITION

"""
Autogenerated input type of AbortQueuedMigrations
"""
input AbortQueuedMigrationsInput {
  clientMutationId: String
  ownerId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of AbortQueuedMigrations
"""
type AbortQueuedMigrationsPayload {
  clientMutationId: String
  success: Boolean
}

"""
Autogenerated input type of AcceptEnterpriseAdministratorInvitation
"""
input AcceptEnterpriseAdministratorInvitationInput {
  clientMutationId: String
  invitationId: ID!@possibleTypes(concreteTypes: ("EnterpriseAdministratorInvitation"))
}

"""
Autogenerated return type of AcceptEnterpriseAdministratorInvitation
"""
type AcceptEnterpriseAdministratorInvitationPayload {
  clientMutationId: String
  invitation: EnterpriseAdministratorInvitation
  message: String
}

"""
Autogenerated input type of AcceptTopicSuggestion
"""
input AcceptTopicSuggestionInput {
  clientMutationId: String
  name: String!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of AcceptTopicSuggestion
"""
type AcceptTopicSuggestionPayload {
  clientMutationId: String
  topic: Topic
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface Actor {
  avatarUrl: URI!
  login: String!
  resourcePath: URI!
  url: URI!
}

"""
Location information for an actor
"""
type ActorLocation {
  city: String
  country: String
  countryCode: String
  region: String
  regionCode: String
}

"""
The actor's type.
"""
enum ActorType {
  TEAM
  USER
}

"""
Autogenerated input type of AddAssigneesToAssignable
"""
input AddAssigneesToAssignableInput {
  assignableId: ID!@possibleTypes(concreteTypes: ("Issue","PullRequest"), abstractType: "Assignable")
  assigneeIds: [ID!]!@possibleTypes(concreteTypes: ("User"))
  clientMutationId: String
}

"""
Autogenerated return type of AddAssigneesToAssignable
"""
type AddAssigneesToAssignablePayload {
  assignable: Assignable
  clientMutationId: String
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  body: String!
  clientMutationId: String
  subjectId: ID!@possibleTypes(concreteTypes: ("Issue","PullRequest"), abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  clientMutationId: String
  commentEdge: IssueCommentEdge
  subject: Node
  timelineEdge: IssueTimelineItemEdge
}

"""
Autogenerated input type of AddDiscussionComment
"""
input AddDiscussionCommentInput {
  body: String!
  clientMutationId: String
  discussionId: ID!@possibleTypes(concreteTypes: ("Discussion"))
  replyToId: ID@possibleTypes(concreteTypes: ("DiscussionComment"))
}

"""
Autogenerated return type of AddDiscussionComment
"""
type AddDiscussionCommentPayload {
  clientMutationId: String
  comment: DiscussionComment
}

"""
Autogenerated input type of AddDiscussionPollVote
"""
input AddDiscussionPollVoteInput {
  clientMutationId: String
  pollOptionId: ID!@possibleTypes(concreteTypes: ("DiscussionPollOption"))
}

"""
Autogenerated return type of AddDiscussionPollVote
"""
type AddDiscussionPollVotePayload {
  clientMutationId: String
  pollOption: DiscussionPollOption
}

"""
Autogenerated input type of AddEnterpriseOrganizationMember
"""
input AddEnterpriseOrganizationMemberInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
  role: OrganizationMemberRole
  userIds: [ID!]!
}

"""
Autogenerated return type of AddEnterpriseOrganizationMember
"""
type AddEnterpriseOrganizationMemberPayload {
  clientMutationId: String
  users: [User!]
}

"""
Autogenerated input type of AddEnterpriseSupportEntitlement
"""
input AddEnterpriseSupportEntitlementInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  login: String!
}

"""
Autogenerated return type of AddEnterpriseSupportEntitlement
"""
type AddEnterpriseSupportEntitlementPayload {
  clientMutationId: String
  message: String
}

"""
Autogenerated input type of AddLabelsToLabelable
"""
input AddLabelsToLabelableInput {
  clientMutationId: String
  labelIds: [ID!]!@possibleTypes(concreteTypes: ("Label"))
  labelableId: ID!@possibleTypes(concreteTypes: ("Discussion","Issue","PullRequest"), abstractType: "Labelable")
}

"""
Autogenerated return type of AddLabelsToLabelable
"""
type AddLabelsToLabelablePayload {
  clientMutationId: String
  labelable: Labelable
}

"""
Autogenerated input type of AddProjectCard
"""
input AddProjectCardInput {
  clientMutationId: String
  contentId: ID@possibleTypes(concreteTypes: ("Issue","PullRequest"), abstractType: "ProjectCardItem")
  note: String
  projectColumnId: ID!@possibleTypes(concreteTypes: ("ProjectColumn"))
}

"""
Autogenerated return type of AddProjectCard
"""
type AddProjectCardPayload {
  cardEdge: ProjectCardEdge
  clientMutationId: String
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of AddProjectColumn
"""
input AddProjectColumnInput {
  clientMutationId: String
  name: String!
  projectId: ID!@possibleTypes(concreteTypes: ("Project"))
}

"""
Autogenerated return type of AddProjectColumn
"""
type AddProjectColumnPayload {
  clientMutationId: String
  columnEdge: ProjectColumnEdge
  project: Project
}

"""
Autogenerated input type of AddProjectV2DraftIssue
"""
input AddProjectV2DraftIssueInput {
  assigneeIds: [ID!]@possibleTypes(concreteTypes: ("User"))
  body: String
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  title: String!
}

"""
Autogenerated return type of AddProjectV2DraftIssue
"""
type AddProjectV2DraftIssuePayload {
  clientMutationId: String
  projectItem: ProjectV2Item
}

"""
Autogenerated input type of AddProjectV2ItemById
"""
input AddProjectV2ItemByIdInput {
  clientMutationId: String
  contentId: ID!@possibleTypes(concreteTypes: ("DraftIssue","Issue","PullRequest"), abstractType: "ProjectV2ItemContent")
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of AddProjectV2ItemById
"""
type AddProjectV2ItemByIdPayload {
  clientMutationId: String
  item: ProjectV2Item
}

"""
Autogenerated input type of AddPullRequestReviewComment
"""
input AddPullRequestReviewCommentInput {
  body: String
  clientMutationId: String
  commitOID: GitObjectID
  inReplyTo: ID@possibleTypes(concreteTypes: ("PullRequestReviewComment"))
  path: String
  position: Int
  pullRequestId: ID@possibleTypes(concreteTypes: ("PullRequest"))
  pullRequestReviewId: ID@possibleTypes(concreteTypes: ("PullRequestReview"))
}

"""
Autogenerated return type of AddPullRequestReviewComment
"""
type AddPullRequestReviewCommentPayload {
  clientMutationId: String
  comment: PullRequestReviewComment
  commentEdge: PullRequestReviewCommentEdge
}

"""
Autogenerated input type of AddPullRequestReview
"""
input AddPullRequestReviewInput {
  body: String
  clientMutationId: String
  comments: [DraftPullRequestReviewComment]
  commitOID: GitObjectID
  event: PullRequestReviewEvent
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
  threads: [DraftPullRequestReviewThread]
}

"""
Autogenerated return type of AddPullRequestReview
"""
type AddPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
  reviewEdge: PullRequestReviewEdge
}

"""
Autogenerated input type of AddPullRequestReviewThread
"""
input AddPullRequestReviewThreadInput {
  body: String!
  clientMutationId: String
  line: Int
  path: String!
  pullRequestId: ID@possibleTypes(concreteTypes: ("PullRequest"))
  pullRequestReviewId: ID@possibleTypes(concreteTypes: ("PullRequestReview"))
  side: DiffSide = RIGHT
  startLine: Int
  startSide: DiffSide = RIGHT
  subjectType: PullRequestReviewThreadSubjectType = LINE
}

"""
Autogenerated return type of AddPullRequestReviewThread
"""
type AddPullRequestReviewThreadPayload {
  clientMutationId: String
  thread: PullRequestReviewThread
}

"""
Autogenerated input type of AddPullRequestReviewThreadReply
"""
input AddPullRequestReviewThreadReplyInput {
  body: String!
  clientMutationId: String
  pullRequestReviewId: ID@possibleTypes(concreteTypes: ("PullRequestReview"))
  pullRequestReviewThreadId: ID!@possibleTypes(concreteTypes: ("PullRequestReviewThread"))
}

"""
Autogenerated return type of AddPullRequestReviewThreadReply
"""
type AddPullRequestReviewThreadReplyPayload {
  clientMutationId: String
  comment: PullRequestReviewComment
}

"""
Autogenerated input type of AddReaction
"""
input AddReactionInput {
  clientMutationId: String
  content: ReactionContent!
  subjectId: ID!@possibleTypes(concreteTypes: ("CommitComment","Discussion","DiscussionComment","Issue","IssueComment","PullRequest","PullRequestReview","PullRequestReviewComment","Release","TeamDiscussion","TeamDiscussionComment"), abstractType: "Reactable")
}

"""
Autogenerated return type of AddReaction
"""
type AddReactionPayload {
  clientMutationId: String
  reaction: Reaction
  reactionGroups: [ReactionGroup!]
  subject: Reactable
}

"""
Autogenerated input type of AddStar
"""
input AddStarInput {
  clientMutationId: String
  starrableId: ID!@possibleTypes(concreteTypes: ("Gist","Repository","Topic"), abstractType: "Starrable")
}

"""
Autogenerated return type of AddStar
"""
type AddStarPayload {
  clientMutationId: String
  starrable: Starrable
}

"""
Autogenerated input type of AddUpvote
"""
input AddUpvoteInput {
  clientMutationId: String
  subjectId: ID!@possibleTypes(concreteTypes: ("Discussion","DiscussionComment"), abstractType: "Votable")
}

"""
Autogenerated return type of AddUpvote
"""
type AddUpvotePayload {
  clientMutationId: String
  subject: Votable
}

"""
Autogenerated input type of AddVerifiableDomain
"""
input AddVerifiableDomainInput {
  clientMutationId: String
  domain: URI!
  ownerId: ID!@possibleTypes(concreteTypes: ("Enterprise","Organization"), abstractType: "VerifiableDomainOwner")
}

"""
Autogenerated return type of AddVerifiableDomain
"""
type AddVerifiableDomainPayload {
  clientMutationId: String
  domain: VerifiableDomain
}

"""
Represents an 'added_to_merge_queue' event on a given pull request.
"""
type AddedToMergeQueueEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  enqueuer: User
  id: ID!
  mergeQueue: MergeQueue
  pullRequest: PullRequest
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type AddedToProjectEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  project: Project@preview(toggledBy: "starfox-preview")
  projectCard: ProjectCard@preview(toggledBy: "starfox-preview")
  projectColumnName: String!@preview(toggledBy: "starfox-preview")
}

"""
Represents an announcement banner.
"""
interface AnnouncementBanner {
  announcement: String
  announcementExpiresAt: DateTime
  announcementUserDismissible: Boolean
}

"""
A GitHub App.
"""
type App implements Node {
  createdAt: DateTime!
  databaseId: Int
  description: String
  id: ID!
  ipAllowListEntries: IpAllowListEntryConnection!
  logoBackgroundColor: String!
  logoUrl: URI!
  name: String!
  slug: String!
  updatedAt: DateTime!
  url: URI!
}

"""
Autogenerated input type of ApproveDeployments
"""
input ApproveDeploymentsInput {
  clientMutationId: String
  comment: String = ""
  environmentIds: [ID!]!
  workflowRunId: ID!@possibleTypes(concreteTypes: ("WorkflowRun"))
}

"""
Autogenerated return type of ApproveDeployments
"""
type ApproveDeploymentsPayload {
  clientMutationId: String
  deployments: [Deployment!]
}

"""
Autogenerated input type of ApproveVerifiableDomain
"""
input ApproveVerifiableDomainInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("VerifiableDomain"))
}

"""
Autogenerated return type of ApproveVerifiableDomain
"""
type ApproveVerifiableDomainPayload {
  clientMutationId: String
  domain: VerifiableDomain
}

"""
Autogenerated input type of ArchiveProjectV2Item
"""
input ArchiveProjectV2ItemInput {
  clientMutationId: String
  itemId: ID!@possibleTypes(concreteTypes: ("ProjectV2Item"))
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of ArchiveProjectV2Item
"""
type ArchiveProjectV2ItemPayload {
  clientMutationId: String
  item: ProjectV2Item
}

"""
Autogenerated input type of ArchiveRepository
"""
input ArchiveRepositoryInput {
  clientMutationId: String
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of ArchiveRepository
"""
type ArchiveRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

"""
An object that can have users assigned to it.
"""
interface Assignable {
  assignees: UserConnection!
}

"""
Represents an 'assigned' event on any assignable object.
"""
type AssignedEvent implements Node {
  actor: Actor
  assignable: Assignable!
  assignee: Assignee
  createdAt: DateTime!
  id: ID!
  user: User@deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

"""
Types that can be assigned to issues.
"""
union Assignee = Bot | Mannequin | Organization | User

"""
An entry in the audit log.
"""
interface AuditEntry {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  operationType: OperationType
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Types that can initiate an audit log event.
"""
union AuditEntryActor = Bot | Organization | User

"""
Ordering options for Audit Log connections.
"""
input AuditLogOrder {
  direction: OrderDirection
  field: AuditLogOrderField
}

"""
Properties by which Audit Log connections can be ordered.
"""
enum AuditLogOrderField {
  CREATED_AT
}

"""
Represents a 'auto_merge_disabled' event on a given pull request.
"""
type AutoMergeDisabledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  disabler: User
  id: ID!
  pullRequest: PullRequest
  reason: String
  reasonCode: String
}

"""
Represents a 'auto_merge_enabled' event on a given pull request.
"""
type AutoMergeEnabledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  enabler: User
  id: ID!
  pullRequest: PullRequest
}

"""
Represents an auto-merge request for a pull request
"""
type AutoMergeRequest {
  authorEmail: String
  commitBody: String
  commitHeadline: String
  enabledAt: DateTime
  enabledBy: Actor
  mergeMethod: PullRequestMergeMethod!
  pullRequest: PullRequest!
}

"""
Represents a 'auto_rebase_enabled' event on a given pull request.
"""
type AutoRebaseEnabledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  enabler: User
  id: ID!
  pullRequest: PullRequest
}

"""
Represents a 'auto_squash_enabled' event on a given pull request.
"""
type AutoSquashEnabledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  enabler: User
  id: ID!
  pullRequest: PullRequest
}

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
type AutomaticBaseChangeFailedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  newBase: String!
  oldBase: String!
  pullRequest: PullRequest!
}

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
type AutomaticBaseChangeSucceededEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  newBase: String!
  oldBase: String!
  pullRequest: PullRequest!
}

"""
A (potentially binary) string encoded using base64.
"""
scalar Base64String 

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type BaseRefChangedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  currentRefName: String!
  databaseId: Int
  id: ID!
  previousRefName: String!
  pullRequest: PullRequest!
}

"""
Represents a 'base_ref_deleted' event on a given pull request.
"""
type BaseRefDeletedEvent implements Node {
  actor: Actor
  baseRefName: String
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest
}

"""
Represents a 'base_ref_force_pushed' event on a given pull request.
"""
type BaseRefForcePushedEvent implements Node {
  actor: Actor
  afterCommit: Commit
  beforeCommit: Commit
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  ref: Ref
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt 

"""
Represents a Git blame.
"""
type Blame {
  ranges: [BlameRange!]!
}

"""
Represents a range of information from a Git blame.
"""
type BlameRange {
  age: Int!
  commit: Commit!
  endingLine: Int!
  startingLine: Int!
}

"""
Represents a Git blob.
"""
type Blob implements GitObject & Node {
  abbreviatedOid: String!
  byteSize: Int!
  commitResourcePath: URI!
  commitUrl: URI!
  id: ID!
  isBinary: Boolean
  isTruncated: Boolean!
  oid: GitObjectID!
  repository: Repository!
  text: String
}

"""
A special type of user which takes actions on behalf of GitHub Apps.
"""
type Bot implements Actor & Node & UniformResourceLocatable {
  avatarUrl: URI!
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  login: String!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
}

"""
Types which can be actors for `BranchActorAllowance` objects.
"""
union BranchActorAllowanceActor = App | Team | User

"""
Parameters to be used for the branch_name_pattern rule
"""
type BranchNamePatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

"""
Parameters to be used for the branch_name_pattern rule
"""
input BranchNamePatternParametersInput {
  name: String
  negate: Boolean
  operator: String!
  pattern: String!
}

"""
A branch protection rule.
"""
type BranchProtectionRule implements Node {
  allowsDeletions: Boolean!
  allowsForcePushes: Boolean!
  blocksCreations: Boolean!
  branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection!
  bypassForcePushAllowances: BypassForcePushAllowanceConnection!
  bypassPullRequestAllowances: BypassPullRequestAllowanceConnection!
  creator: Actor
  databaseId: Int
  dismissesStaleReviews: Boolean!
  id: ID!
  isAdminEnforced: Boolean!
  lockAllowsFetchAndMerge: Boolean!
  lockBranch: Boolean!
  matchingRefs: RefConnection!
  pattern: String!
  pushAllowances: PushAllowanceConnection!
  repository: Repository
  requireLastPushApproval: Boolean!
  requiredApprovingReviewCount: Int
  requiredDeploymentEnvironments: [String]
  requiredStatusCheckContexts: [String]
  requiredStatusChecks: [RequiredStatusCheckDescription!]
  requiresApprovingReviews: Boolean!
  requiresCodeOwnerReviews: Boolean!
  requiresCommitSignatures: Boolean!
  requiresConversationResolution: Boolean!
  requiresDeployments: Boolean!
  requiresLinearHistory: Boolean!
  requiresStatusChecks: Boolean!
  requiresStrictStatusChecks: Boolean!
  restrictsPushes: Boolean!
  restrictsReviewDismissals: Boolean!
  reviewDismissalAllowances: ReviewDismissalAllowanceConnection!
}

"""
A conflict between two branch protection rules.
"""
type BranchProtectionRuleConflict {
  branchProtectionRule: BranchProtectionRule
  conflictingBranchProtectionRule: BranchProtectionRule
  ref: Ref
}

"""
The connection type for BranchProtectionRuleConflict.
"""
type BranchProtectionRuleConflictConnection {
  edges: [BranchProtectionRuleConflictEdge]
  nodes: [BranchProtectionRuleConflict]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleConflictEdge {
  cursor: String!
  node: BranchProtectionRuleConflict
}

"""
The connection type for BranchProtectionRule.
"""
type BranchProtectionRuleConnection {
  edges: [BranchProtectionRuleEdge]
  nodes: [BranchProtectionRule]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BranchProtectionRuleEdge {
  cursor: String!
  node: BranchProtectionRule
}

"""
Information about a sponsorship to make for a user or organization with a GitHub
Sponsors profile, as part of sponsoring many users or organizations at once.
"""
input BulkSponsorship {
  amount: Int!
  sponsorableId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "Sponsorable")
  sponsorableLogin: String
}

"""
Types that can represent a repository ruleset bypass actor.
"""
union BypassActor = App | Team

"""
A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
"""
type BypassForcePushAllowance implements Node {
  actor: BranchActorAllowanceActor
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

"""
The connection type for BypassForcePushAllowance.
"""
type BypassForcePushAllowanceConnection {
  edges: [BypassForcePushAllowanceEdge]
  nodes: [BypassForcePushAllowance]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassForcePushAllowanceEdge {
  cursor: String!
  node: BypassForcePushAllowance
}

"""
A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
"""
type BypassPullRequestAllowance implements Node {
  actor: BranchActorAllowanceActor
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

"""
The connection type for BypassPullRequestAllowance.
"""
type BypassPullRequestAllowanceConnection {
  edges: [BypassPullRequestAllowanceEdge]
  nodes: [BypassPullRequestAllowance]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BypassPullRequestAllowanceEdge {
  cursor: String!
  node: BypassPullRequestAllowance
}

"""
The Common Vulnerability Scoring System
"""
type CVSS {
  score: Float!
  vectorString: String
}

"""
A common weakness enumeration
"""
type CWE implements Node {
  cweId: String!
  description: String!
  id: ID!
  name: String!
}

"""
The connection type for CWE.
"""
type CWEConnection {
  edges: [CWEEdge]
  nodes: [CWE]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CWEEdge {
  cursor: String!
  node: CWE
}

"""
Autogenerated input type of CancelEnterpriseAdminInvitation
"""
input CancelEnterpriseAdminInvitationInput {
  clientMutationId: String
  invitationId: ID!@possibleTypes(concreteTypes: ("EnterpriseAdministratorInvitation"))
}

"""
Autogenerated return type of CancelEnterpriseAdminInvitation
"""
type CancelEnterpriseAdminInvitationPayload {
  clientMutationId: String
  invitation: EnterpriseAdministratorInvitation
  message: String
}

"""
Autogenerated input type of CancelSponsorship
"""
input CancelSponsorshipInput {
  clientMutationId: String
  sponsorId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "Sponsor")
  sponsorLogin: String
  sponsorableId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "Sponsorable")
  sponsorableLogin: String
}

"""
Autogenerated return type of CancelSponsorship
"""
type CancelSponsorshipPayload {
  clientMutationId: String
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of ChangeUserStatus
"""
input ChangeUserStatusInput {
  clientMutationId: String
  emoji: String
  expiresAt: DateTime
  limitedAvailability: Boolean = false
  message: String
  organizationId: ID@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of ChangeUserStatus
"""
type ChangeUserStatusPayload {
  clientMutationId: String
  status: UserStatus
}

"""
A single check annotation.
"""
type CheckAnnotation {
  annotationLevel: CheckAnnotationLevel
  blobUrl: URI!
  databaseId: Int
  location: CheckAnnotationSpan!
  message: String!
  path: String!
  rawDetails: String
  title: String
}

"""
The connection type for CheckAnnotation.
"""
type CheckAnnotationConnection {
  edges: [CheckAnnotationEdge]
  nodes: [CheckAnnotation]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationData {
  annotationLevel: CheckAnnotationLevel!
  location: CheckAnnotationRange!
  message: String!
  path: String!
  rawDetails: String
  title: String
}

"""
An edge in a connection.
"""
type CheckAnnotationEdge {
  cursor: String!
  node: CheckAnnotation
}

"""
Represents an annotation's information level.
"""
enum CheckAnnotationLevel {
  FAILURE
  NOTICE
  WARNING
}

"""
A character position in a check annotation.
"""
type CheckAnnotationPosition {
  column: Int
  line: Int!
}

"""
Information from a check run analysis to specific lines of code.
"""
input CheckAnnotationRange {
  endColumn: Int
  endLine: Int!
  startColumn: Int
  startLine: Int!
}

"""
An inclusive pair of positions for a check annotation.
"""
type CheckAnnotationSpan {
  end: CheckAnnotationPosition!
  start: CheckAnnotationPosition!
}

"""
The possible states for a check suite or run conclusion.
"""
enum CheckConclusionState {
  ACTION_REQUIRED
  CANCELLED
  FAILURE
  NEUTRAL
  SKIPPED
  STALE
  STARTUP_FAILURE
  SUCCESS
  TIMED_OUT
}

"""
A check run.
"""
type CheckRun implements Node & RequirableByPullRequest & UniformResourceLocatable {
  annotations: CheckAnnotationConnection
  checkSuite: CheckSuite!
  completedAt: DateTime
  conclusion: CheckConclusionState
  databaseId: Int
  deployment: Deployment
  detailsUrl: URI
  externalId: String
  id: ID!
  isRequired: Boolean!
  name: String!
  pendingDeploymentRequest: DeploymentRequest
  permalink: URI!
  repository: Repository!
  resourcePath: URI!
  startedAt: DateTime
  status: CheckStatusState!
  steps: CheckStepConnection
  summary: String
  text: String
  title: String
  url: URI!
}

"""
Possible further actions the integrator can perform.
"""
input CheckRunAction {
  description: String!
  identifier: String!
  label: String!
}

"""
The connection type for CheckRun.
"""
type CheckRunConnection {
  edges: [CheckRunEdge]
  nodes: [CheckRun]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckRunEdge {
  cursor: String!
  node: CheckRun
}

"""
The filters that are available when fetching check runs.
"""
input CheckRunFilter {
  appId: Int
  checkName: String
  checkType: CheckRunType
  conclusions: [CheckConclusionState!]
  status: CheckStatusState
  statuses: [CheckStatusState!]
}

"""
Descriptive details about the check run.
"""
input CheckRunOutput {
  annotations: [CheckAnnotationData!]
  images: [CheckRunOutputImage!]
  summary: String!
  text: String
  title: String!
}

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
input CheckRunOutputImage {
  alt: String!
  caption: String
  imageUrl: URI!
}

"""
The possible states of a check run in a status rollup.
"""
enum CheckRunState {
  ACTION_REQUIRED
  CANCELLED
  COMPLETED
  FAILURE
  IN_PROGRESS
  NEUTRAL
  PENDING
  QUEUED
  SKIPPED
  STALE
  STARTUP_FAILURE
  SUCCESS
  TIMED_OUT
  WAITING
}

"""
Represents a count of the state of a check run.
"""
type CheckRunStateCount {
  count: Int!
  state: CheckRunState!
}

"""
The possible types of check runs.
"""
enum CheckRunType {
  ALL
  LATEST
}

"""
The possible states for a check suite or run status.
"""
enum CheckStatusState {
  COMPLETED
  IN_PROGRESS
  PENDING
  QUEUED
  REQUESTED
  WAITING
}

"""
A single check step.
"""
type CheckStep {
  completedAt: DateTime
  conclusion: CheckConclusionState
  externalId: String
  name: String!
  number: Int!
  secondsToCompletion: Int
  startedAt: DateTime
  status: CheckStatusState!
}

"""
The connection type for CheckStep.
"""
type CheckStepConnection {
  edges: [CheckStepEdge]
  nodes: [CheckStep]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckStepEdge {
  cursor: String!
  node: CheckStep
}

"""
A check suite.
"""
type CheckSuite implements Node {
  app: App
  branch: Ref
  checkRuns: CheckRunConnection
  commit: Commit!
  conclusion: CheckConclusionState
  createdAt: DateTime!
  creator: User
  databaseId: Int
  id: ID!
  matchingPullRequests: PullRequestConnection
  push: Push
  repository: Repository!
  resourcePath: URI!
  status: CheckStatusState!
  updatedAt: DateTime!
  url: URI!
  workflowRun: WorkflowRun
}

"""
The auto-trigger preferences that are available for check suites.
"""
input CheckSuiteAutoTriggerPreference {
  appId: ID!
  setting: Boolean!
}

"""
The connection type for CheckSuite.
"""
type CheckSuiteConnection {
  edges: [CheckSuiteEdge]
  nodes: [CheckSuite]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CheckSuiteEdge {
  cursor: String!
  node: CheckSuite
}

"""
The filters that are available when fetching check suites.
"""
input CheckSuiteFilter {
  appId: Int
  checkName: String
}

"""
An object which can have its data claimed or claim data from another.
"""
union Claimable = Mannequin | User

"""
Autogenerated input type of ClearLabelsFromLabelable
"""
input ClearLabelsFromLabelableInput {
  clientMutationId: String
  labelableId: ID!@possibleTypes(concreteTypes: ("Discussion","Issue","PullRequest"), abstractType: "Labelable")
}

"""
Autogenerated return type of ClearLabelsFromLabelable
"""
type ClearLabelsFromLabelablePayload {
  clientMutationId: String
  labelable: Labelable
}

"""
Autogenerated input type of ClearProjectV2ItemFieldValue
"""
input ClearProjectV2ItemFieldValueInput {
  clientMutationId: String
  fieldId: ID!@possibleTypes(concreteTypes: ("ProjectV2Field","ProjectV2IterationField","ProjectV2SingleSelectField"), abstractType: "ProjectV2FieldConfiguration")
  itemId: ID!@possibleTypes(concreteTypes: ("ProjectV2Item"))
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of ClearProjectV2ItemFieldValue
"""
type ClearProjectV2ItemFieldValuePayload {
  clientMutationId: String
  projectV2Item: ProjectV2Item
}

"""
Autogenerated input type of CloneProject
"""
input CloneProjectInput {
  body: String
  clientMutationId: String
  includeWorkflows: Boolean!
  name: String!
  public: Boolean
  sourceId: ID!@possibleTypes(concreteTypes: ("Project"))
  targetOwnerId: ID!@possibleTypes(concreteTypes: ("Organization","Repository","User"), abstractType: "ProjectOwner")
}

"""
Autogenerated return type of CloneProject
"""
type CloneProjectPayload {
  clientMutationId: String
  jobStatusId: String
  project: Project
}

"""
Autogenerated input type of CloneTemplateRepository
"""
input CloneTemplateRepositoryInput {
  clientMutationId: String
  description: String
  includeAllBranches: Boolean = false
  name: String!
  ownerId: ID!@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "RepositoryOwner")
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CloneTemplateRepository
"""
type CloneTemplateRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

"""
An object that can be closed
"""
interface Closable {
  closed: Boolean!
  closedAt: DateTime
  viewerCanClose: Boolean!
  viewerCanReopen: Boolean!
}

"""
Autogenerated input type of CloseDiscussion
"""
input CloseDiscussionInput {
  clientMutationId: String
  discussionId: ID!@possibleTypes(concreteTypes: ("Discussion"))
  reason: DiscussionCloseReason = RESOLVED
}

"""
Autogenerated return type of CloseDiscussion
"""
type CloseDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

"""
Autogenerated input type of CloseIssue
"""
input CloseIssueInput {
  clientMutationId: String
  issueId: ID!@possibleTypes(concreteTypes: ("Issue"))
  stateReason: IssueClosedStateReason
}

"""
Autogenerated return type of CloseIssue
"""
type CloseIssuePayload {
  clientMutationId: String
  issue: Issue
}

"""
Autogenerated input type of ClosePullRequest
"""
input ClosePullRequestInput {
  clientMutationId: String
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of ClosePullRequest
"""
type ClosePullRequestPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Represents a 'closed' event on any `Closable`.
"""
type ClosedEvent implements Node & UniformResourceLocatable {
  actor: Actor
  closable: Closable!
  closer: Closer
  createdAt: DateTime!
  id: ID!
  resourcePath: URI!
  stateReason: IssueStateReason
  url: URI!
}

"""
The object which triggered a `ClosedEvent`.
"""
union Closer = Commit | PullRequest

"""
The Code of Conduct for a repository
"""
type CodeOfConduct implements Node {
  body: String
  id: ID!
  key: String!
  name: String!
  resourcePath: URI
  url: URI
}

"""
Collaborators affiliation level with a subject.
"""
enum CollaboratorAffiliation {
  ALL
  DIRECT
  OUTSIDE
}

"""
Represents a comment.
"""
interface Comment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime!
  userContentEdits: UserContentEditConnection
  viewerDidAuthor: Boolean!
}

"""
A comment author association with repository.
"""
enum CommentAuthorAssociation {
  COLLABORATOR
  CONTRIBUTOR
  FIRST_TIMER
  FIRST_TIME_CONTRIBUTOR
  MANNEQUIN
  MEMBER
  NONE
  OWNER
}

"""
The possible errors that will prevent a user from updating a comment.
"""
enum CommentCannotUpdateReason {
  ARCHIVED
  DENIED
  INSUFFICIENT_ACCESS
  LOCKED
  LOGIN_REQUIRED
  MAINTENANCE
  VERIFIED_EMAIL_REQUIRED
}

"""
Represents a 'comment_deleted' event on a given issue or pull request.
"""
type CommentDeletedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  deletedCommentAuthor: Actor
  id: ID!
}

"""
Represents a Git commit.
"""
type Commit implements GitObject & Node & Subscribable & UniformResourceLocatable {
  abbreviatedOid: String!
  additions: Int!
  associatedPullRequests: PullRequestConnection
  author: GitActor
  authoredByCommitter: Boolean!
  authoredDate: DateTime!
  authors: GitActorConnection!
  blame: Blame!
  changedFiles: Int!@deprecated(reason: "`changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC.")
  changedFilesIfAvailable: Int
  checkSuites: CheckSuiteConnection
  comments: CommitCommentConnection!
  commitResourcePath: URI!
  commitUrl: URI!
  committedDate: DateTime!
  committedViaWeb: Boolean!
  committer: GitActor
  deletions: Int!
  deployments: DeploymentConnection
  file: TreeEntry
  history: CommitHistoryConnection!
  id: ID!
  message: String!
  messageBody: String!
  messageBodyHTML: HTML!
  messageHeadline: String!
  messageHeadlineHTML: HTML!
  oid: GitObjectID!
  onBehalfOf: Organization
  parents: CommitConnection!
  pushedDate: DateTime@deprecated(reason: "`pushedDate` is no longer supported. Removal on 2023-07-01 UTC.")
  repository: Repository!
  resourcePath: URI!
  signature: GitSignature
  status: Status
  statusCheckRollup: StatusCheckRollup
  submodules: SubmoduleConnection!
  tarballUrl: URI!
  tree: Tree!
  treeResourcePath: URI!
  treeUrl: URI!
  url: URI!
  viewerCanSubscribe: Boolean!
  viewerSubscription: SubscriptionState
  zipballUrl: URI!
}

"""
Specifies an author for filtering Git commits.
"""
input CommitAuthor {
  emails: [String!]
  id: ID
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
type CommitAuthorEmailPatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

"""
Parameters to be used for the commit_author_email_pattern rule
"""
input CommitAuthorEmailPatternParametersInput {
  name: String
  negate: Boolean
  operator: String!
  pattern: String!
}

"""
Represents a comment on a given Commit.
"""
type CommitComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  commit: Commit
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: DateTime
  minimizedReason: String
  path: String
  position: Int
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
  userContentEdits: UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

"""
The connection type for CommitComment.
"""
type CommitCommentConnection {
  edges: [CommitCommentEdge]
  nodes: [CommitComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommitCommentEdge {
  cursor: String!
  node: CommitComment
}

"""
A thread of comments on a commit.
"""
type CommitCommentThread implements Node & RepositoryNode {
  comments: CommitCommentConnection!
  commit: Commit
  id: ID!
  path: String
  position: Int
  repository: Repository!
}

"""
The connection type for Commit.
"""
type CommitConnection {
  edges: [CommitEdge]
  nodes: [Commit]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Ordering options for commit contribution connections.
"""
input CommitContributionOrder {
  direction: OrderDirection!
  field: CommitContributionOrderField!
}

"""
Properties by which commit contribution connections can be ordered.
"""
enum CommitContributionOrderField {
  COMMIT_COUNT
  OCCURRED_AT
}

"""
This aggregates commits made by a user within one repository.
"""
type CommitContributionsByRepository {
  contributions: CreatedCommitContributionConnection!
  repository: Repository!
  resourcePath: URI!
  url: URI!
}

"""
An edge in a connection.
"""
type CommitEdge {
  cursor: String!
  node: Commit
}

"""
The connection type for Commit.
"""
type CommitHistoryConnection {
  edges: [CommitEdge]
  nodes: [Commit]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A message to include with a new commit
"""
input CommitMessage {
  body: String
  headline: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
type CommitMessagePatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

"""
Parameters to be used for the commit_message_pattern rule
"""
input CommitMessagePatternParametersInput {
  name: String
  negate: Boolean
  operator: String!
  pattern: String!
}

"""
A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }
"""
input CommittableBranch {
  branchName: String
  id: ID
  repositoryNameWithOwner: String
}

"""
Parameters to be used for the committer_email_pattern rule
"""
type CommitterEmailPatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

"""
Parameters to be used for the committer_email_pattern rule
"""
input CommitterEmailPatternParametersInput {
  name: String
  negate: Boolean
  operator: String!
  pattern: String!
}

"""
Represents a comparison between two commit revisions.
"""
type Comparison implements Node {
  aheadBy: Int!
  baseTarget: GitObject!
  behindBy: Int!
  commits: ComparisonCommitConnection!
  headTarget: GitObject!
  id: ID!
  status: ComparisonStatus!
}

"""
The connection type for Commit.
"""
type ComparisonCommitConnection {
  authorCount: Int!
  edges: [CommitEdge]
  nodes: [Commit]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The status of a git comparison between two refs.
"""
enum ComparisonStatus {
  AHEAD
  BEHIND
  DIVERGED
  IDENTICAL
}

"""
Represents a 'connected' event on a given issue or pull request.
"""
type ConnectedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  isCrossRepository: Boolean!
  source: ReferencedSubject!
  subject: ReferencedSubject!
}

"""
The Contributing Guidelines for a repository.
"""
type ContributingGuidelines {
  body: String
  resourcePath: URI
  url: URI
}

"""
Represents a contribution a user made on GitHub, such as opening an issue.
"""
interface Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  resourcePath: URI!
  url: URI!
  user: User!
}

"""
A calendar of contributions made on GitHub by a user.
"""
type ContributionCalendar {
  colors: [String!]!
  isHalloween: Boolean!
  months: [ContributionCalendarMonth!]!
  totalContributions: Int!
  weeks: [ContributionCalendarWeek!]!
}

"""
Represents a single day of contributions on GitHub by a user.
"""
type ContributionCalendarDay {
  color: String!
  contributionCount: Int!
  contributionLevel: ContributionLevel!
  date: Date!
  weekday: Int!
}

"""
A month of contributions in a user's contribution graph.
"""
type ContributionCalendarMonth {
  firstDay: Date!
  name: String!
  totalWeeks: Int!
  year: Int!
}

"""
A week of contributions in a user's contribution graph.
"""
type ContributionCalendarWeek {
  contributionDays: [ContributionCalendarDay!]!
  firstDay: Date!
}

"""
Varying levels of contributions from none to many.
"""
enum ContributionLevel {
  FIRST_QUARTILE
  FOURTH_QUARTILE
  NONE
  SECOND_QUARTILE
  THIRD_QUARTILE
}

"""
Ordering options for contribution connections.
"""
input ContributionOrder {
  direction: OrderDirection!
}

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
type ContributionsCollection {
  commitContributionsByRepository: [CommitContributionsByRepository!]!
  contributionCalendar: ContributionCalendar!
  contributionYears: [Int!]!
  doesEndInCurrentMonth: Boolean!
  earliestRestrictedContributionDate: Date
  endedAt: DateTime!
  firstIssueContribution: CreatedIssueOrRestrictedContribution
  firstPullRequestContribution: CreatedPullRequestOrRestrictedContribution
  firstRepositoryContribution: CreatedRepositoryOrRestrictedContribution
  hasActivityInThePast: Boolean!
  hasAnyContributions: Boolean!
  hasAnyRestrictedContributions: Boolean!
  isSingleDay: Boolean!
  issueContributions: CreatedIssueContributionConnection!
  issueContributionsByRepository: [IssueContributionsByRepository!]!
  joinedGitHubContribution: JoinedGitHubContribution
  latestRestrictedContributionDate: Date
  mostRecentCollectionWithActivity: ContributionsCollection
  mostRecentCollectionWithoutActivity: ContributionsCollection
  popularIssueContribution: CreatedIssueContribution
  popularPullRequestContribution: CreatedPullRequestContribution
  pullRequestContributions: CreatedPullRequestContributionConnection!
  pullRequestContributionsByRepository: [PullRequestContributionsByRepository!]!
  pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection!
  pullRequestReviewContributionsByRepository: [PullRequestReviewContributionsByRepository!]!
  repositoryContributions: CreatedRepositoryContributionConnection!
  restrictedContributionsCount: Int!
  startedAt: DateTime!
  totalCommitContributions: Int!
  totalIssueContributions: Int!
  totalPullRequestContributions: Int!
  totalPullRequestReviewContributions: Int!
  totalRepositoriesWithContributedCommits: Int!
  totalRepositoriesWithContributedIssues: Int!
  totalRepositoriesWithContributedPullRequestReviews: Int!
  totalRepositoriesWithContributedPullRequests: Int!
  totalRepositoryContributions: Int!
  user: User!
}

"""
Autogenerated input type of ConvertProjectCardNoteToIssue
"""
input ConvertProjectCardNoteToIssueInput {
  body: String
  clientMutationId: String
  projectCardId: ID!@possibleTypes(concreteTypes: ("ProjectCard"))
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  title: String
}

"""
Autogenerated return type of ConvertProjectCardNoteToIssue
"""
type ConvertProjectCardNoteToIssuePayload {
  clientMutationId: String
  projectCard: ProjectCard
}

"""
Autogenerated input type of ConvertPullRequestToDraft
"""
input ConvertPullRequestToDraftInput {
  clientMutationId: String
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of ConvertPullRequestToDraft
"""
type ConvertPullRequestToDraftPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Represents a 'convert_to_draft' event on a given pull request.
"""
type ConvertToDraftEvent implements Node & UniformResourceLocatable {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type ConvertedNoteToIssueEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  project: Project@preview(toggledBy: "starfox-preview")
  projectCard: ProjectCard@preview(toggledBy: "starfox-preview")
  projectColumnName: String!@preview(toggledBy: "starfox-preview")
}

"""
Represents a 'converted_to_discussion' event on a given issue.
"""
type ConvertedToDiscussionEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  discussion: Discussion
  id: ID!
}

"""
Autogenerated input type of CopyProjectV2
"""
input CopyProjectV2Input {
  clientMutationId: String
  includeDraftIssues: Boolean = false
  ownerId: ID!@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "OrganizationOrUser")
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  title: String!
}

"""
Autogenerated return type of CopyProjectV2
"""
type CopyProjectV2Payload {
  clientMutationId: String
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreateAttributionInvitation
"""
input CreateAttributionInvitationInput {
  clientMutationId: String
  ownerId: ID!@possibleTypes(concreteTypes: ("Bot","Enterprise","Mannequin","Organization","User"))
  sourceId: ID!@possibleTypes(concreteTypes: ("Bot","Enterprise","Mannequin","Organization","User"))
  targetId: ID!@possibleTypes(concreteTypes: ("Bot","Enterprise","Mannequin","Organization","User"))
}

"""
Autogenerated return type of CreateAttributionInvitation
"""
type CreateAttributionInvitationPayload {
  clientMutationId: String
  owner: Organization
  source: Claimable
  target: Claimable
}

"""
Autogenerated input type of CreateBranchProtectionRule
"""
input CreateBranchProtectionRuleInput {
  allowsDeletions: Boolean
  allowsForcePushes: Boolean
  blocksCreations: Boolean
  bypassForcePushActorIds: [ID!]
  bypassPullRequestActorIds: [ID!]
  clientMutationId: String
  dismissesStaleReviews: Boolean
  isAdminEnforced: Boolean
  lockAllowsFetchAndMerge: Boolean
  lockBranch: Boolean
  pattern: String!
  pushActorIds: [ID!]
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  requireLastPushApproval: Boolean
  requiredApprovingReviewCount: Int
  requiredDeploymentEnvironments: [String!]
  requiredStatusCheckContexts: [String!]
  requiredStatusChecks: [RequiredStatusCheckInput!]
  requiresApprovingReviews: Boolean
  requiresCodeOwnerReviews: Boolean
  requiresCommitSignatures: Boolean
  requiresConversationResolution: Boolean
  requiresDeployments: Boolean
  requiresLinearHistory: Boolean
  requiresStatusChecks: Boolean
  requiresStrictStatusChecks: Boolean
  restrictsPushes: Boolean
  restrictsReviewDismissals: Boolean
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of CreateBranchProtectionRule
"""
type CreateBranchProtectionRulePayload {
  branchProtectionRule: BranchProtectionRule
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckRun
"""
input CreateCheckRunInput {
  actions: [CheckRunAction!]
  clientMutationId: String
  completedAt: DateTime
  conclusion: CheckConclusionState
  detailsUrl: URI
  externalId: String
  headSha: GitObjectID!
  name: String!
  output: CheckRunOutput
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  startedAt: DateTime
  status: RequestableCheckStatusState
}

"""
Autogenerated return type of CreateCheckRun
"""
type CreateCheckRunPayload {
  checkRun: CheckRun
  clientMutationId: String
}

"""
Autogenerated input type of CreateCheckSuite
"""
input CreateCheckSuiteInput {
  clientMutationId: String
  headSha: GitObjectID!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of CreateCheckSuite
"""
type CreateCheckSuitePayload {
  checkSuite: CheckSuite
  clientMutationId: String
}

"""
Autogenerated input type of CreateCommitOnBranch
"""
input CreateCommitOnBranchInput {
  branch: CommittableBranch!
  clientMutationId: String
  expectedHeadOid: GitObjectID!
  fileChanges: FileChanges
  message: CommitMessage!
}

"""
Autogenerated return type of CreateCommitOnBranch
"""
type CreateCommitOnBranchPayload {
  clientMutationId: String
  commit: Commit
  ref: Ref
}

"""
Autogenerated input type of CreateDeployment
"""
input CreateDeploymentInput @preview(toggledBy: "flash-preview") {
  autoMerge: Boolean = true
  clientMutationId: String
  description: String = ""
  environment: String = "production"
  payload: String = "{}"
  refId: ID!@possibleTypes(concreteTypes: ("Ref"))
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  requiredContexts: [String!]
  task: String = "deploy"
}

"""
Autogenerated return type of CreateDeployment
"""
type CreateDeploymentPayload @preview(toggledBy: "flash-preview") {
  autoMerged: Boolean
  clientMutationId: String
  deployment: Deployment
}

"""
Autogenerated input type of CreateDeploymentStatus
"""
input CreateDeploymentStatusInput @preview(toggledBy: "flash-preview") {
  autoInactive: Boolean = true
  clientMutationId: String
  deploymentId: ID!@possibleTypes(concreteTypes: ("Deployment"))
  description: String = ""
  environment: String
  environmentUrl: String = ""
  logUrl: String = ""
  state: DeploymentStatusState!
}

"""
Autogenerated return type of CreateDeploymentStatus
"""
type CreateDeploymentStatusPayload @preview(toggledBy: "flash-preview") {
  clientMutationId: String
  deploymentStatus: DeploymentStatus
}

"""
Autogenerated input type of CreateDiscussion
"""
input CreateDiscussionInput {
  body: String!
  categoryId: ID!@possibleTypes(concreteTypes: ("DiscussionCategory"))
  clientMutationId: String
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  title: String!
}

"""
Autogenerated return type of CreateDiscussion
"""
type CreateDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

"""
Autogenerated input type of CreateEnterpriseOrganization
"""
input CreateEnterpriseOrganizationInput {
  adminLogins: [String!]!
  billingEmail: String!
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  login: String!
  profileName: String!
}

"""
Autogenerated return type of CreateEnterpriseOrganization
"""
type CreateEnterpriseOrganizationPayload {
  clientMutationId: String
  enterprise: Enterprise
  organization: Organization
}

"""
Autogenerated input type of CreateEnvironment
"""
input CreateEnvironmentInput {
  clientMutationId: String
  name: String!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of CreateEnvironment
"""
type CreateEnvironmentPayload {
  clientMutationId: String
  environment: Environment
}

"""
Autogenerated input type of CreateIpAllowListEntry
"""
input CreateIpAllowListEntryInput {
  allowListValue: String!
  clientMutationId: String
  isActive: Boolean!
  name: String
  ownerId: ID!@possibleTypes(concreteTypes: ("App","Enterprise","Organization"), abstractType: "IpAllowListOwner")
}

"""
Autogenerated return type of CreateIpAllowListEntry
"""
type CreateIpAllowListEntryPayload {
  clientMutationId: String
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of CreateIssue
"""
input CreateIssueInput {
  assigneeIds: [ID!]@possibleTypes(concreteTypes: ("User"))
  body: String
  clientMutationId: String
  issueTemplate: String
  labelIds: [ID!]@possibleTypes(concreteTypes: ("Label"))
  milestoneId: ID@possibleTypes(concreteTypes: ("Milestone"))
  projectIds: [ID!]@possibleTypes(concreteTypes: ("Project"))
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  title: String!
}

"""
Autogenerated return type of CreateIssue
"""
type CreateIssuePayload {
  clientMutationId: String
  issue: Issue
}

"""
Autogenerated input type of CreateLabel
"""
input CreateLabelInput @preview(toggledBy: "bane-preview") {
  clientMutationId: String
  color: String!
  description: String
  name: String!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of CreateLabel
"""
type CreateLabelPayload @preview(toggledBy: "bane-preview") {
  clientMutationId: String
  label: Label
}

"""
Autogenerated input type of CreateLinkedBranch
"""
input CreateLinkedBranchInput {
  clientMutationId: String
  issueId: ID!@possibleTypes(concreteTypes: ("Issue"))
  name: String
  oid: GitObjectID!
  repositoryId: ID@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of CreateLinkedBranch
"""
type CreateLinkedBranchPayload {
  clientMutationId: String
  issue: Issue
  linkedBranch: LinkedBranch
}

"""
Autogenerated input type of CreateMigrationSource
"""
input CreateMigrationSourceInput {
  accessToken: String
  clientMutationId: String
  githubPat: String
  name: String!
  ownerId: ID!@possibleTypes(concreteTypes: ("Organization"))
  type: MigrationSourceType!
  url: String
}

"""
Autogenerated return type of CreateMigrationSource
"""
type CreateMigrationSourcePayload {
  clientMutationId: String
  migrationSource: MigrationSource
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  body: String
  clientMutationId: String
  name: String!
  ownerId: ID!@possibleTypes(concreteTypes: ("Organization","Repository","User"), abstractType: "ProjectOwner")
  repositoryIds: [ID!]@possibleTypes(concreteTypes: ("Repository"))
  template: ProjectTemplate
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  clientMutationId: String
  project: Project
}

"""
Autogenerated input type of CreateProjectV2Field
"""
input CreateProjectV2FieldInput {
  clientMutationId: String
  dataType: ProjectV2CustomFieldType!
  name: String!
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  singleSelectOptions: [ProjectV2SingleSelectFieldOptionInput!]
}

"""
Autogenerated return type of CreateProjectV2Field
"""
type CreateProjectV2FieldPayload {
  clientMutationId: String
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of CreateProjectV2
"""
input CreateProjectV2Input {
  clientMutationId: String
  ownerId: ID!@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "OrganizationOrUser")
  repositoryId: ID@possibleTypes(concreteTypes: ("Repository"))
  teamId: ID@possibleTypes(concreteTypes: ("Team"))
  title: String!
}

"""
Autogenerated return type of CreateProjectV2
"""
type CreateProjectV2Payload {
  clientMutationId: String
  projectV2: ProjectV2
}

"""
Autogenerated input type of CreatePullRequest
"""
input CreatePullRequestInput {
  baseRefName: String!
  body: String
  clientMutationId: String
  draft: Boolean = false
  headRefName: String!
  headRepositoryId: ID@possibleTypes(concreteTypes: ("Repository"))
  maintainerCanModify: Boolean = true
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  title: String!
}

"""
Autogenerated return type of CreatePullRequest
"""
type CreatePullRequestPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Autogenerated input type of CreateRef
"""
input CreateRefInput {
  clientMutationId: String
  name: String!
  oid: GitObjectID!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of CreateRef
"""
type CreateRefPayload {
  clientMutationId: String
  ref: Ref
}

"""
Autogenerated input type of CreateRepository
"""
input CreateRepositoryInput {
  clientMutationId: String
  description: String
  hasIssuesEnabled: Boolean = true
  hasWikiEnabled: Boolean = false
  homepageUrl: URI
  name: String!
  ownerId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "RepositoryOwner")
  teamId: ID@possibleTypes(concreteTypes: ("Team"))
  template: Boolean = false
  visibility: RepositoryVisibility!
}

"""
Autogenerated return type of CreateRepository
"""
type CreateRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

"""
Autogenerated input type of CreateRepositoryRuleset
"""
input CreateRepositoryRulesetInput {
  bypassActors: [RepositoryRulesetBypassActorInput!]
  clientMutationId: String
  conditions: RepositoryRuleConditionsInput!
  enforcement: RuleEnforcement!
  name: String!
  rules: [RepositoryRuleInput!]
  sourceId: ID!@possibleTypes(concreteTypes: ("Organization","Repository"), abstractType: "RuleSource")
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of CreateRepositoryRuleset
"""
type CreateRepositoryRulesetPayload {
  clientMutationId: String
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of CreateSponsorsListing
"""
input CreateSponsorsListingInput {
  billingCountryOrRegionCode: SponsorsCountryOrRegionCode
  clientMutationId: String
  contactEmail: String
  fiscalHostLogin: String
  fiscallyHostedProjectProfileUrl: String
  fullDescription: String
  residenceCountryOrRegionCode: SponsorsCountryOrRegionCode
  sponsorableLogin: String
}

"""
Autogenerated return type of CreateSponsorsListing
"""
type CreateSponsorsListingPayload {
  clientMutationId: String
  sponsorsListing: SponsorsListing
}

"""
Autogenerated input type of CreateSponsorsTier
"""
input CreateSponsorsTierInput {
  amount: Int!
  clientMutationId: String
  description: String!
  isRecurring: Boolean = true
  publish: Boolean = false
  repositoryId: ID@possibleTypes(concreteTypes: ("Repository"))
  repositoryName: String
  repositoryOwnerLogin: String
  sponsorableId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "Sponsorable")
  sponsorableLogin: String
  welcomeMessage: String
}

"""
Autogenerated return type of CreateSponsorsTier
"""
type CreateSponsorsTierPayload {
  clientMutationId: String
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of CreateSponsorship
"""
input CreateSponsorshipInput {
  amount: Int
  clientMutationId: String
  isRecurring: Boolean
  privacyLevel: SponsorshipPrivacy = PUBLIC
  receiveEmails: Boolean = true
  sponsorId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "Sponsor")
  sponsorLogin: String
  sponsorableId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "Sponsorable")
  sponsorableLogin: String
  tierId: ID@possibleTypes(concreteTypes: ("SponsorsTier"))
}

"""
Autogenerated return type of CreateSponsorship
"""
type CreateSponsorshipPayload {
  clientMutationId: String
  sponsorship: Sponsorship
}

"""
Autogenerated input type of CreateSponsorships
"""
input CreateSponsorshipsInput {
  clientMutationId: String
  privacyLevel: SponsorshipPrivacy = PUBLIC
  receiveEmails: Boolean = false
  sponsorLogin: String!
  sponsorships: [BulkSponsorship!]!
}

"""
Autogenerated return type of CreateSponsorships
"""
type CreateSponsorshipsPayload {
  clientMutationId: String
  sponsorables: [Sponsorable!]
}

"""
Autogenerated input type of CreateTeamDiscussionComment
"""
input CreateTeamDiscussionCommentInput {
  body: String
  clientMutationId: String
  discussionId: ID@possibleTypes(concreteTypes: ("TeamDiscussion"))
}

"""
Autogenerated return type of CreateTeamDiscussionComment
"""
type CreateTeamDiscussionCommentPayload {
  clientMutationId: String
  teamDiscussionComment: TeamDiscussionComment@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
}

"""
Autogenerated input type of CreateTeamDiscussion
"""
input CreateTeamDiscussionInput {
  body: String
  clientMutationId: String
  private: Boolean
  teamId: ID@possibleTypes(concreteTypes: ("Team"))
  title: String
}

"""
Autogenerated return type of CreateTeamDiscussion
"""
type CreateTeamDiscussionPayload {
  clientMutationId: String
  teamDiscussion: TeamDiscussion@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
}

"""
Represents the contribution a user made by committing to a repository.
"""
type CreatedCommitContribution implements Contribution {
  commitCount: Int!
  isRestricted: Boolean!
  occurredAt: DateTime!
  repository: Repository!
  resourcePath: URI!
  url: URI!
  user: User!
}

"""
The connection type for CreatedCommitContribution.
"""
type CreatedCommitContributionConnection {
  edges: [CreatedCommitContributionEdge]
  nodes: [CreatedCommitContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedCommitContributionEdge {
  cursor: String!
  node: CreatedCommitContribution
}

"""
Represents the contribution a user made on GitHub by opening an issue.
"""
type CreatedIssueContribution implements Contribution {
  isRestricted: Boolean!
  issue: Issue!
  occurredAt: DateTime!
  resourcePath: URI!
  url: URI!
  user: User!
}

"""
The connection type for CreatedIssueContribution.
"""
type CreatedIssueContributionConnection {
  edges: [CreatedIssueContributionEdge]
  nodes: [CreatedIssueContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedIssueContributionEdge {
  cursor: String!
  node: CreatedIssueContribution
}

"""
Represents either a issue the viewer can access or a restricted contribution.
"""
union CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
type CreatedPullRequestContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
  user: User!
}

"""
The connection type for CreatedPullRequestContribution.
"""
type CreatedPullRequestContributionConnection {
  edges: [CreatedPullRequestContributionEdge]
  nodes: [CreatedPullRequestContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestContributionEdge {
  cursor: String!
  node: CreatedPullRequestContribution
}

"""
Represents either a pull request the viewer can access or a restricted contribution.
"""
union CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
type CreatedPullRequestReviewContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  pullRequest: PullRequest!
  pullRequestReview: PullRequestReview!
  repository: Repository!
  resourcePath: URI!
  url: URI!
  user: User!
}

"""
The connection type for CreatedPullRequestReviewContribution.
"""
type CreatedPullRequestReviewContributionConnection {
  edges: [CreatedPullRequestReviewContributionEdge]
  nodes: [CreatedPullRequestReviewContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedPullRequestReviewContributionEdge {
  cursor: String!
  node: CreatedPullRequestReviewContribution
}

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
type CreatedRepositoryContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  repository: Repository!
  resourcePath: URI!
  url: URI!
  user: User!
}

"""
The connection type for CreatedRepositoryContribution.
"""
type CreatedRepositoryContributionConnection {
  edges: [CreatedRepositoryContributionEdge]
  nodes: [CreatedRepositoryContribution]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CreatedRepositoryContributionEdge {
  cursor: String!
  node: CreatedRepositoryContribution
}

"""
Represents either a repository the viewer can access or a restricted contribution.
"""
union CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution

"""
Represents a mention made by one issue or pull request to another.
"""
type CrossReferencedEvent implements Node & UniformResourceLocatable {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  isCrossRepository: Boolean!
  referencedAt: DateTime!
  resourcePath: URI!
  source: ReferencedSubject!
  target: ReferencedSubject!
  url: URI!
  willCloseTarget: Boolean!
}

"""
An ISO-8601 encoded date string.
"""
scalar Date 

"""
An ISO-8601 encoded UTC date string.
"""
scalar DateTime 

"""
Autogenerated input type of DeclineTopicSuggestion
"""
input DeclineTopicSuggestionInput {
  clientMutationId: String
  name: String!
  reason: TopicSuggestionDeclineReason!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of DeclineTopicSuggestion
"""
type DeclineTopicSuggestionPayload {
  clientMutationId: String
  topic: Topic
}

"""
The possible base permissions for repositories.
"""
enum DefaultRepositoryPermissionField {
  ADMIN
  NONE
  READ
  WRITE
}

"""
Entities that can be deleted.
"""
interface Deletable {
  viewerCanDelete: Boolean!
}

"""
Autogenerated input type of DeleteBranchProtectionRule
"""
input DeleteBranchProtectionRuleInput {
  branchProtectionRuleId: ID!@possibleTypes(concreteTypes: ("BranchProtectionRule"))
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBranchProtectionRule
"""
type DeleteBranchProtectionRulePayload {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDeployment
"""
input DeleteDeploymentInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("Deployment"))
}

"""
Autogenerated return type of DeleteDeployment
"""
type DeleteDeploymentPayload {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteDiscussionComment
"""
input DeleteDiscussionCommentInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("DiscussionComment"))
}

"""
Autogenerated return type of DeleteDiscussionComment
"""
type DeleteDiscussionCommentPayload {
  clientMutationId: String
  comment: DiscussionComment
}

"""
Autogenerated input type of DeleteDiscussion
"""
input DeleteDiscussionInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("Discussion"))
}

"""
Autogenerated return type of DeleteDiscussion
"""
type DeleteDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

"""
Autogenerated input type of DeleteEnvironment
"""
input DeleteEnvironmentInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("Environment"))
}

"""
Autogenerated return type of DeleteEnvironment
"""
type DeleteEnvironmentPayload {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIpAllowListEntry
"""
input DeleteIpAllowListEntryInput {
  clientMutationId: String
  ipAllowListEntryId: ID!@possibleTypes(concreteTypes: ("IpAllowListEntry"))
}

"""
Autogenerated return type of DeleteIpAllowListEntry
"""
type DeleteIpAllowListEntryPayload {
  clientMutationId: String
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of DeleteIssueComment
"""
input DeleteIssueCommentInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("IssueComment"))
}

"""
Autogenerated return type of DeleteIssueComment
"""
type DeleteIssueCommentPayload {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteIssue
"""
input DeleteIssueInput {
  clientMutationId: String
  issueId: ID!@possibleTypes(concreteTypes: ("Issue"))
}

"""
Autogenerated return type of DeleteIssue
"""
type DeleteIssuePayload {
  clientMutationId: String
  repository: Repository
}

"""
Autogenerated input type of DeleteLabel
"""
input DeleteLabelInput @preview(toggledBy: "bane-preview") {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("Label"))
}

"""
Autogenerated return type of DeleteLabel
"""
type DeleteLabelPayload @preview(toggledBy: "bane-preview") {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteLinkedBranch
"""
input DeleteLinkedBranchInput {
  clientMutationId: String
  linkedBranchId: ID!@possibleTypes(concreteTypes: ("LinkedBranch"))
}

"""
Autogenerated return type of DeleteLinkedBranch
"""
type DeleteLinkedBranchPayload {
  clientMutationId: String
  issue: Issue
}

"""
Autogenerated input type of DeletePackageVersion
"""
input DeletePackageVersionInput {
  clientMutationId: String
  packageVersionId: ID!@possibleTypes(concreteTypes: ("PackageVersion"))
}

"""
Autogenerated return type of DeletePackageVersion
"""
type DeletePackageVersionPayload {
  clientMutationId: String
  success: Boolean
}

"""
Autogenerated input type of DeleteProjectCard
"""
input DeleteProjectCardInput {
  cardId: ID!@possibleTypes(concreteTypes: ("ProjectCard"))
  clientMutationId: String
}

"""
Autogenerated return type of DeleteProjectCard
"""
type DeleteProjectCardPayload {
  clientMutationId: String
  column: ProjectColumn
  deletedCardId: ID
}

"""
Autogenerated input type of DeleteProjectColumn
"""
input DeleteProjectColumnInput {
  clientMutationId: String
  columnId: ID!@possibleTypes(concreteTypes: ("ProjectColumn"))
}

"""
Autogenerated return type of DeleteProjectColumn
"""
type DeleteProjectColumnPayload {
  clientMutationId: String
  deletedColumnId: ID
  project: Project
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("Project"))
}

"""
Autogenerated return type of DeleteProject
"""
type DeleteProjectPayload {
  clientMutationId: String
  owner: ProjectOwner
}

"""
Autogenerated input type of DeleteProjectV2Field
"""
input DeleteProjectV2FieldInput {
  clientMutationId: String
  fieldId: ID!@possibleTypes(concreteTypes: ("ProjectV2Field","ProjectV2IterationField","ProjectV2SingleSelectField"), abstractType: "ProjectV2FieldConfiguration")
}

"""
Autogenerated return type of DeleteProjectV2Field
"""
type DeleteProjectV2FieldPayload {
  clientMutationId: String
  projectV2Field: ProjectV2FieldConfiguration
}

"""
Autogenerated input type of DeleteProjectV2
"""
input DeleteProjectV2Input {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated input type of DeleteProjectV2Item
"""
input DeleteProjectV2ItemInput {
  clientMutationId: String
  itemId: ID!@possibleTypes(concreteTypes: ("ProjectV2Item"))
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of DeleteProjectV2Item
"""
type DeleteProjectV2ItemPayload {
  clientMutationId: String
  deletedItemId: ID
}

"""
Autogenerated return type of DeleteProjectV2
"""
type DeleteProjectV2Payload {
  clientMutationId: String
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeleteProjectV2Workflow
"""
input DeleteProjectV2WorkflowInput {
  clientMutationId: String
  workflowId: ID!@possibleTypes(concreteTypes: ("ProjectV2Workflow"))
}

"""
Autogenerated return type of DeleteProjectV2Workflow
"""
type DeleteProjectV2WorkflowPayload {
  clientMutationId: String
  deletedWorkflowId: ID
  projectV2: ProjectV2
}

"""
Autogenerated input type of DeletePullRequestReviewComment
"""
input DeletePullRequestReviewCommentInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("PullRequestReviewComment"))
}

"""
Autogenerated return type of DeletePullRequestReviewComment
"""
type DeletePullRequestReviewCommentPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
  pullRequestReviewComment: PullRequestReviewComment
}

"""
Autogenerated input type of DeletePullRequestReview
"""
input DeletePullRequestReviewInput {
  clientMutationId: String
  pullRequestReviewId: ID!@possibleTypes(concreteTypes: ("PullRequestReview"))
}

"""
Autogenerated return type of DeletePullRequestReview
"""
type DeletePullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of DeleteRef
"""
input DeleteRefInput {
  clientMutationId: String
  refId: ID!@possibleTypes(concreteTypes: ("Ref"))
}

"""
Autogenerated return type of DeleteRef
"""
type DeleteRefPayload {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteRepositoryRuleset
"""
input DeleteRepositoryRulesetInput {
  clientMutationId: String
  repositoryRulesetId: ID!@possibleTypes(concreteTypes: ("RepositoryRuleset"))
}

"""
Autogenerated return type of DeleteRepositoryRuleset
"""
type DeleteRepositoryRulesetPayload {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussionComment
"""
input DeleteTeamDiscussionCommentInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("TeamDiscussionComment"))
}

"""
Autogenerated return type of DeleteTeamDiscussionComment
"""
type DeleteTeamDiscussionCommentPayload {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteTeamDiscussion
"""
input DeleteTeamDiscussionInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("TeamDiscussion"))
}

"""
Autogenerated return type of DeleteTeamDiscussion
"""
type DeleteTeamDiscussionPayload {
  clientMutationId: String
}

"""
Autogenerated input type of DeleteVerifiableDomain
"""
input DeleteVerifiableDomainInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("VerifiableDomain"))
}

"""
Autogenerated return type of DeleteVerifiableDomain
"""
type DeleteVerifiableDomainPayload {
  clientMutationId: String
  owner: VerifiableDomainOwner
}

"""
Represents a 'demilestoned' event on a given issue or pull request.
"""
type DemilestonedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  milestoneTitle: String!
  subject: MilestoneItem!
}

"""
A Dependabot Update for a dependency in a repository
"""
type DependabotUpdate implements RepositoryNode {
  error: DependabotUpdateError
  pullRequest: PullRequest
  repository: Repository!
}

"""
An error produced from a Dependabot Update
"""
type DependabotUpdateError {
  body: String!
  errorType: String!
  title: String!
}

"""
A dependency manifest entry
"""
type DependencyGraphDependency @preview(toggledBy: "hawkgirl-preview") {
  hasDependencies: Boolean!
  packageLabel: String!@deprecated(reason: "`packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC.")
  packageManager: String
  packageName: String!
  repository: Repository
  requirements: String!
}

"""
The connection type for DependencyGraphDependency.
"""
type DependencyGraphDependencyConnection @preview(toggledBy: "hawkgirl-preview") {
  edges: [DependencyGraphDependencyEdge]
  nodes: [DependencyGraphDependency]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphDependencyEdge @preview(toggledBy: "hawkgirl-preview") {
  cursor: String!
  node: DependencyGraphDependency
}

"""
The possible ecosystems of a dependency graph package.
"""
enum DependencyGraphEcosystem {
  ACTIONS
  COMPOSER
  GO
  MAVEN
  NPM
  NUGET
  PIP
  PUB
  RUBYGEMS
  RUST
  SWIFT
}

"""
Dependency manifest for a repository
"""
type DependencyGraphManifest implements Node @preview(toggledBy: "hawkgirl-preview") {
  blobPath: String!
  dependencies: DependencyGraphDependencyConnection
  dependenciesCount: Int
  exceedsMaxSize: Boolean!
  filename: String!
  id: ID!
  parseable: Boolean!
  repository: Repository!
}

"""
The connection type for DependencyGraphManifest.
"""
type DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview") {
  edges: [DependencyGraphManifestEdge]
  nodes: [DependencyGraphManifest]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DependencyGraphManifestEdge @preview(toggledBy: "hawkgirl-preview") {
  cursor: String!
  node: DependencyGraphManifest
}

"""
A repository deploy key.
"""
type DeployKey implements Node {
  createdAt: DateTime!
  id: ID!
  key: String!
  readOnly: Boolean!
  title: String!
  verified: Boolean!
}

"""
The connection type for DeployKey.
"""
type DeployKeyConnection {
  edges: [DeployKeyEdge]
  nodes: [DeployKey]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeployKeyEdge {
  cursor: String!
  node: DeployKey
}

"""
Represents a 'deployed' event on a given pull request.
"""
type DeployedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  deployment: Deployment!
  id: ID!
  pullRequest: PullRequest!
  ref: Ref
}

"""
Represents triggered deployment instance.
"""
type Deployment implements Node {
  commit: Commit
  commitOid: String!
  createdAt: DateTime!
  creator: Actor!
  databaseId: Int
  description: String
  environment: String
  id: ID!
  latestEnvironment: String
  latestStatus: DeploymentStatus
  originalEnvironment: String
  payload: String
  ref: Ref
  repository: Repository!
  state: DeploymentState
  statuses: DeploymentStatusConnection
  task: String
  updatedAt: DateTime!
}

"""
The connection type for Deployment.
"""
type DeploymentConnection {
  edges: [DeploymentEdge]
  nodes: [Deployment]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentEdge {
  cursor: String!
  node: Deployment
}

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
type DeploymentEnvironmentChangedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  deploymentStatus: DeploymentStatus!
  id: ID!
  pullRequest: PullRequest!
}

"""
Ordering options for deployment connections
"""
input DeploymentOrder {
  direction: OrderDirection!
  field: DeploymentOrderField!
}

"""
Properties by which deployment connections can be ordered.
"""
enum DeploymentOrderField {
  CREATED_AT
}

"""
A protection rule.
"""
type DeploymentProtectionRule {
  databaseId: Int
  reviewers: DeploymentReviewerConnection!
  timeout: Int!
  type: DeploymentProtectionRuleType!
}

"""
The connection type for DeploymentProtectionRule.
"""
type DeploymentProtectionRuleConnection {
  edges: [DeploymentProtectionRuleEdge]
  nodes: [DeploymentProtectionRule]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentProtectionRuleEdge {
  cursor: String!
  node: DeploymentProtectionRule
}

"""
The possible protection rule types.
"""
enum DeploymentProtectionRuleType {
  REQUIRED_REVIEWERS
  WAIT_TIMER
}

"""
A request to deploy a workflow run to an environment.
"""
type DeploymentRequest {
  currentUserCanApprove: Boolean!
  environment: Environment!
  reviewers: DeploymentReviewerConnection!
  waitTimer: Int!
  waitTimerStartedAt: DateTime
}

"""
The connection type for DeploymentRequest.
"""
type DeploymentRequestConnection {
  edges: [DeploymentRequestEdge]
  nodes: [DeploymentRequest]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentRequestEdge {
  cursor: String!
  node: DeploymentRequest
}

"""
A deployment review.
"""
type DeploymentReview implements Node {
  comment: String!
  databaseId: Int
  environments: EnvironmentConnection!
  id: ID!
  state: DeploymentReviewState!
  user: User!
}

"""
The connection type for DeploymentReview.
"""
type DeploymentReviewConnection {
  edges: [DeploymentReviewEdge]
  nodes: [DeploymentReview]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewEdge {
  cursor: String!
  node: DeploymentReview
}

"""
The possible states for a deployment review.
"""
enum DeploymentReviewState {
  APPROVED
  REJECTED
}

"""
Users and teams.
"""
union DeploymentReviewer = Team | User

"""
The connection type for DeploymentReviewer.
"""
type DeploymentReviewerConnection {
  edges: [DeploymentReviewerEdge]
  nodes: [DeploymentReviewer]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentReviewerEdge {
  cursor: String!
  node: DeploymentReviewer
}

"""
The possible states in which a deployment can be.
"""
enum DeploymentState {
  ABANDONED
  ACTIVE
  DESTROYED
  ERROR
  FAILURE
  INACTIVE
  IN_PROGRESS
  PENDING
  QUEUED
  SUCCESS
  WAITING
}

"""
Describes the status of a given deployment attempt.
"""
type DeploymentStatus implements Node {
  createdAt: DateTime!
  creator: Actor!
  deployment: Deployment!
  description: String
  environment: String@preview(toggledBy: "flash-preview")
  environmentUrl: URI
  id: ID!
  logUrl: URI
  state: DeploymentStatusState!
  updatedAt: DateTime!
}

"""
The connection type for DeploymentStatus.
"""
type DeploymentStatusConnection {
  edges: [DeploymentStatusEdge]
  nodes: [DeploymentStatus]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DeploymentStatusEdge {
  cursor: String!
  node: DeploymentStatus
}

"""
The possible states for a deployment status.
"""
enum DeploymentStatusState {
  ERROR
  FAILURE
  INACTIVE
  IN_PROGRESS
  PENDING
  QUEUED
  SUCCESS
  WAITING
}

"""
Autogenerated input type of DequeuePullRequest
"""
input DequeuePullRequestInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of DequeuePullRequest
"""
type DequeuePullRequestPayload {
  clientMutationId: String
  mergeQueueEntry: MergeQueueEntry
}

"""
The possible sides of a diff.
"""
enum DiffSide {
  LEFT
  RIGHT
}

"""
Autogenerated input type of DisablePullRequestAutoMerge
"""
input DisablePullRequestAutoMergeInput {
  clientMutationId: String
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of DisablePullRequestAutoMerge
"""
type DisablePullRequestAutoMergePayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Represents a 'disconnected' event on a given issue or pull request.
"""
type DisconnectedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  isCrossRepository: Boolean!
  source: ReferencedSubject!
  subject: ReferencedSubject!
}

"""
A discussion in a repository.
"""
type Discussion implements Closable & Comment & Deletable & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & Updatable & Votable {
  activeLockReason: LockReason
  answer: DiscussionComment
  answerChosenAt: DateTime
  answerChosenBy: Actor
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  category: DiscussionCategory!
  closed: Boolean!
  closedAt: DateTime
  comments: DiscussionCommentConnection!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isAnswered: Boolean
  labels: LabelConnection
  lastEditedAt: DateTime
  locked: Boolean!
  number: Int!
  poll: DiscussionPoll
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  stateReason: DiscussionStateReason
  title: String!
  updatedAt: DateTime!
  upvoteCount: Int!
  url: URI!
  userContentEdits: UserContentEditConnection
  viewerCanClose: Boolean!
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanReopen: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCanUpvote: Boolean!
  viewerDidAuthor: Boolean!
  viewerHasUpvoted: Boolean!
  viewerSubscription: SubscriptionState
}

"""
A category for discussions in a repository.
"""
type DiscussionCategory implements Node & RepositoryNode {
  createdAt: DateTime!
  description: String
  emoji: String!
  emojiHTML: HTML!
  id: ID!
  isAnswerable: Boolean!
  name: String!
  repository: Repository!
  slug: String!
  updatedAt: DateTime!
}

"""
The connection type for DiscussionCategory.
"""
type DiscussionCategoryConnection {
  edges: [DiscussionCategoryEdge]
  nodes: [DiscussionCategory]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCategoryEdge {
  cursor: String!
  node: DiscussionCategory
}

"""
The possible reasons for closing a discussion.
"""
enum DiscussionCloseReason {
  DUPLICATE
  OUTDATED
  RESOLVED
}

"""
A comment on a discussion.
"""
type DiscussionComment implements Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment & Votable {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  deletedAt: DateTime
  discussion: Discussion
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isAnswer: Boolean!
  isMinimized: Boolean!
  lastEditedAt: DateTime
  minimizedReason: String
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  replies: DiscussionCommentConnection!
  replyTo: DiscussionComment
  resourcePath: URI!
  updatedAt: DateTime!
  upvoteCount: Int!
  url: URI!
  userContentEdits: UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMarkAsAnswer: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUnmarkAsAnswer: Boolean!
  viewerCanUpdate: Boolean!
  viewerCanUpvote: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerHasUpvoted: Boolean!
}

"""
The connection type for DiscussionComment.
"""
type DiscussionCommentConnection {
  edges: [DiscussionCommentEdge]
  nodes: [DiscussionComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionCommentEdge {
  cursor: String!
  node: DiscussionComment
}

"""
The connection type for Discussion.
"""
type DiscussionConnection {
  edges: [DiscussionEdge]
  nodes: [Discussion]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  cursor: String!
  node: Discussion
}

"""
Ways in which lists of discussions can be ordered upon return.
"""
input DiscussionOrder {
  direction: OrderDirection!
  field: DiscussionOrderField!
}

"""
Properties by which discussion connections can be ordered.
"""
enum DiscussionOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
A poll for a discussion.
"""
type DiscussionPoll implements Node {
  discussion: Discussion
  id: ID!
  options: DiscussionPollOptionConnection
  question: String!
  totalVoteCount: Int!
  viewerCanVote: Boolean!
  viewerHasVoted: Boolean!
}

"""
An option for a discussion poll.
"""
type DiscussionPollOption implements Node {
  id: ID!
  option: String!
  poll: DiscussionPoll
  totalVoteCount: Int!
  viewerHasVoted: Boolean!
}

"""
The connection type for DiscussionPollOption.
"""
type DiscussionPollOptionConnection {
  edges: [DiscussionPollOptionEdge]
  nodes: [DiscussionPollOption]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type DiscussionPollOptionEdge {
  cursor: String!
  node: DiscussionPollOption
}

"""
Ordering options for discussion poll option connections.
"""
input DiscussionPollOptionOrder {
  direction: OrderDirection!
  field: DiscussionPollOptionOrderField!
}

"""
Properties by which discussion poll option connections can be ordered.
"""
enum DiscussionPollOptionOrderField {
  AUTHORED_ORDER
  VOTE_COUNT
}

"""
The possible states of a discussion.
"""
enum DiscussionState {
  CLOSED
  OPEN
}

"""
The possible state reasons of a discussion.
"""
enum DiscussionStateReason {
  DUPLICATE
  OUTDATED
  REOPENED
  RESOLVED
}

"""
Autogenerated input type of DismissPullRequestReview
"""
input DismissPullRequestReviewInput {
  clientMutationId: String
  message: String!
  pullRequestReviewId: ID!@possibleTypes(concreteTypes: ("PullRequestReview"))
}

"""
Autogenerated return type of DismissPullRequestReview
"""
type DismissPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
}

"""
The possible reasons that a Dependabot alert was dismissed.
"""
enum DismissReason {
  FIX_STARTED
  INACCURATE
  NOT_USED
  NO_BANDWIDTH
  TOLERABLE_RISK
}

"""
Autogenerated input type of DismissRepositoryVulnerabilityAlert
"""
input DismissRepositoryVulnerabilityAlertInput {
  clientMutationId: String
  dismissReason: DismissReason!
  repositoryVulnerabilityAlertId: ID!@possibleTypes(concreteTypes: ("RepositoryVulnerabilityAlert"))
}

"""
Autogenerated return type of DismissRepositoryVulnerabilityAlert
"""
type DismissRepositoryVulnerabilityAlertPayload {
  clientMutationId: String
  repositoryVulnerabilityAlert: RepositoryVulnerabilityAlert
}

"""
A draft issue within a project.
"""
type DraftIssue implements Node {
  assignees: UserConnection!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  creator: Actor
  id: ID!
  projectV2Items: ProjectV2ItemConnection!
  projectsV2: ProjectV2Connection!
  title: String!
  updatedAt: DateTime!
}

"""
Specifies a review comment to be left with a Pull Request Review.
"""
input DraftPullRequestReviewComment {
  body: String!
  path: String!
  position: Int!
}

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
input DraftPullRequestReviewThread {
  body: String!
  line: Int!
  path: String!
  side: DiffSide = RIGHT
  startLine: Int
  startSide: DiffSide = RIGHT
}

"""
Autogenerated input type of EnablePullRequestAutoMerge
"""
input EnablePullRequestAutoMergeInput {
  authorEmail: String
  clientMutationId: String
  commitBody: String
  commitHeadline: String
  expectedHeadOid: GitObjectID
  mergeMethod: PullRequestMergeMethod = MERGE
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of EnablePullRequestAutoMerge
"""
type EnablePullRequestAutoMergePayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Autogenerated input type of EnqueuePullRequest
"""
input EnqueuePullRequestInput {
  clientMutationId: String
  expectedHeadOid: GitObjectID
  jump: Boolean
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of EnqueuePullRequest
"""
type EnqueuePullRequestPayload {
  clientMutationId: String
  mergeQueueEntry: MergeQueueEntry
}

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
type Enterprise implements AnnouncementBanner & Node {
  announcement: String
  announcementExpiresAt: DateTime
  announcementUserDismissible: Boolean
  avatarUrl: URI!
  billingInfo: EnterpriseBillingInfo
  createdAt: DateTime!
  databaseId: Int
  description: String
  descriptionHTML: HTML!
  id: ID!
  location: String
  members: EnterpriseMemberConnection!
  name: String!
  organizations: OrganizationConnection!
  ownerInfo: EnterpriseOwnerInfo
  resourcePath: URI!
  slug: String!
  url: URI!
  viewerIsAdmin: Boolean!
  websiteUrl: URI
}

"""
The connection type for User.
"""
type EnterpriseAdministratorConnection {
  edges: [EnterpriseAdministratorEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A User who is an administrator of an enterprise.
"""
type EnterpriseAdministratorEdge {
  cursor: String!
  node: User
  role: EnterpriseAdministratorRole!
}

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
type EnterpriseAdministratorInvitation implements Node {
  createdAt: DateTime!
  email: String
  enterprise: Enterprise!
  id: ID!
  invitee: User
  inviter: User
  role: EnterpriseAdministratorRole!
}

"""
The connection type for EnterpriseAdministratorInvitation.
"""
type EnterpriseAdministratorInvitationConnection {
  edges: [EnterpriseAdministratorInvitationEdge]
  nodes: [EnterpriseAdministratorInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseAdministratorInvitationEdge {
  cursor: String!
  node: EnterpriseAdministratorInvitation
}

"""
Ordering options for enterprise administrator invitation connections
"""
input EnterpriseAdministratorInvitationOrder {
  direction: OrderDirection!
  field: EnterpriseAdministratorInvitationOrderField!
}

"""
Properties by which enterprise administrator invitation connections can be ordered.
"""
enum EnterpriseAdministratorInvitationOrderField {
  CREATED_AT
}

"""
The possible administrator roles in an enterprise account.
"""
enum EnterpriseAdministratorRole {
  BILLING_MANAGER
  OWNER
}

"""
The possible values for the enterprise allow private repository forking policy value.
"""
enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {
  ENTERPRISE_ORGANIZATIONS
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS
  EVERYWHERE
  SAME_ORGANIZATION
  SAME_ORGANIZATION_USER_ACCOUNTS
  USER_ACCOUNTS
}

"""
Metadata for an audit entry containing enterprise account information.
"""
interface EnterpriseAuditEntryData {
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
}

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
type EnterpriseBillingInfo {
  allLicensableUsersCount: Int!
  assetPacks: Int!
  bandwidthQuota: Float!
  bandwidthUsage: Float!
  bandwidthUsagePercentage: Int!
  storageQuota: Float!
  storageUsage: Float!
  storageUsagePercentage: Int!
  totalAvailableLicenses: Int!
  totalLicenses: Int!
}

"""
The connection type for Enterprise.
"""
type EnterpriseConnection {
  edges: [EnterpriseEdge]
  nodes: [Enterprise]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The possible values for the enterprise base repository permission setting.
"""
enum EnterpriseDefaultRepositoryPermissionSettingValue {
  ADMIN
  NONE
  NO_POLICY
  READ
  WRITE
}

"""
An edge in a connection.
"""
type EnterpriseEdge {
  cursor: String!
  node: Enterprise
}

"""
The possible values for an enabled/disabled enterprise setting.
"""
enum EnterpriseEnabledDisabledSettingValue {
  DISABLED
  ENABLED
  NO_POLICY
}

"""
The possible values for an enabled/no policy enterprise setting.
"""
enum EnterpriseEnabledSettingValue {
  ENABLED
  NO_POLICY
}

"""
The connection type for OrganizationInvitation.
"""
type EnterpriseFailedInvitationConnection {
  edges: [EnterpriseFailedInvitationEdge]
  nodes: [OrganizationInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
  totalUniqueUserCount: Int!
}

"""
A failed invitation to be a member in an enterprise organization.
"""
type EnterpriseFailedInvitationEdge {
  cursor: String!
  node: OrganizationInvitation
}

"""
An identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseIdentityProvider implements Node {
  digestMethod: SamlDigestAlgorithm
  enterprise: Enterprise
  externalIdentities: ExternalIdentityConnection!
  id: ID!
  idpCertificate: X509Certificate
  issuer: String
  recoveryCodes: [String!]
  signatureMethod: SamlSignatureAlgorithm
  ssoUrl: URI
}

"""
An object that is a member of an enterprise.
"""
union EnterpriseMember = EnterpriseUserAccount | User

"""
The connection type for EnterpriseMember.
"""
type EnterpriseMemberConnection {
  edges: [EnterpriseMemberEdge]
  nodes: [EnterpriseMember]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A User who is a member of an enterprise through one or more organizations.
"""
type EnterpriseMemberEdge {
  cursor: String!
  node: EnterpriseMember
}

"""
Ordering options for enterprise member connections.
"""
input EnterpriseMemberOrder {
  direction: OrderDirection!
  field: EnterpriseMemberOrderField!
}

"""
Properties by which enterprise member connections can be ordered.
"""
enum EnterpriseMemberOrderField {
  CREATED_AT
  LOGIN
}

"""
The possible values for the enterprise members can create repositories setting.
"""
enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  ALL
  DISABLED
  NO_POLICY
  PRIVATE
  PUBLIC
}

"""
The possible values for the members can make purchases setting.
"""
enum EnterpriseMembersCanMakePurchasesSettingValue {
  DISABLED
  ENABLED
}

"""
The possible values we have for filtering Platform::Objects::User#enterprises.
"""
enum EnterpriseMembershipType {
  ADMIN
  ALL
  BILLING_MANAGER
  ORG_MEMBERSHIP
}

"""
Ordering options for enterprises.
"""
input EnterpriseOrder {
  direction: OrderDirection!
  field: EnterpriseOrderField!
}

"""
Properties by which enterprise connections can be ordered.
"""
enum EnterpriseOrderField {
  NAME
}

"""
The connection type for Organization.
"""
type EnterpriseOrganizationMembershipConnection {
  edges: [EnterpriseOrganizationMembershipEdge]
  nodes: [Organization]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An enterprise organization that a user is a member of.
"""
type EnterpriseOrganizationMembershipEdge {
  cursor: String!
  node: Organization
  role: EnterpriseUserAccountMembershipRole!
}

"""
The connection type for User.
"""
type EnterpriseOutsideCollaboratorConnection {
  edges: [EnterpriseOutsideCollaboratorEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
type EnterpriseOutsideCollaboratorEdge {
  cursor: String!
  node: User
  repositories: EnterpriseRepositoryInfoConnection!
}

"""
Enterprise information visible to enterprise owners or enterprise owners'
personal access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type EnterpriseOwnerInfo {
  admins: EnterpriseAdministratorConnection!
  affiliatedUsersWithTwoFactorDisabled: UserConnection!
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue!
  allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection!
  allowPrivateRepositoryForkingSettingPolicyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue!
  defaultRepositoryPermissionSettingOrganizations: OrganizationConnection!
  domains: VerifiableDomainConnection!
  enterpriseServerInstallations: EnterpriseServerInstallationConnection!
  failedInvitations: EnterpriseFailedInvitationConnection!
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!
  ipAllowListEntries: IpAllowListEntryConnection!
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue!
  isUpdatingDefaultRepositoryPermission: Boolean!
  isUpdatingTwoFactorRequirement: Boolean!
  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue!
  membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection!
  membersCanCreateInternalRepositoriesSetting: Boolean
  membersCanCreatePrivateRepositoriesSetting: Boolean
  membersCanCreatePublicRepositoriesSetting: Boolean
  membersCanCreateRepositoriesSetting: EnterpriseMembersCanCreateRepositoriesSettingValue
  membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection!
  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanDeleteIssuesSettingOrganizations: OrganizationConnection!
  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection!
  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection!
  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue!
  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection!
  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue!
  membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection!
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue!
  oidcProvider: OIDCProvider
  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue!
  organizationProjectsSettingOrganizations: OrganizationConnection!
  outsideCollaborators: EnterpriseOutsideCollaboratorConnection!
  pendingAdminInvitations: EnterpriseAdministratorInvitationConnection!
  pendingCollaboratorInvitations: RepositoryInvitationConnection!
  pendingMemberInvitations: EnterprisePendingMemberInvitationConnection!
  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue!
  repositoryProjectsSettingOrganizations: OrganizationConnection!
  samlIdentityProvider: EnterpriseIdentityProvider
  samlIdentityProviderSettingOrganizations: OrganizationConnection!
  supportEntitlements: EnterpriseMemberConnection!
  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue!
  teamDiscussionsSettingOrganizations: OrganizationConnection!
  twoFactorRequiredSetting: EnterpriseEnabledSettingValue!
  twoFactorRequiredSettingOrganizations: OrganizationConnection!
}

"""
The connection type for OrganizationInvitation.
"""
type EnterprisePendingMemberInvitationConnection {
  edges: [EnterprisePendingMemberInvitationEdge]
  nodes: [OrganizationInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
  totalUniqueUserCount: Int!
}

"""
An invitation to be a member in an enterprise organization.
"""
type EnterprisePendingMemberInvitationEdge {
  cursor: String!
  node: OrganizationInvitation
}

"""
A subset of repository information queryable from an enterprise.
"""
type EnterpriseRepositoryInfo implements Node {
  id: ID!
  isPrivate: Boolean!
  name: String!
  nameWithOwner: String!
}

"""
The connection type for EnterpriseRepositoryInfo.
"""
type EnterpriseRepositoryInfoConnection {
  edges: [EnterpriseRepositoryInfoEdge]
  nodes: [EnterpriseRepositoryInfo]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseRepositoryInfoEdge {
  cursor: String!
  node: EnterpriseRepositoryInfo
}

"""
An Enterprise Server installation.
"""
type EnterpriseServerInstallation implements Node {
  createdAt: DateTime!
  customerName: String!
  hostName: String!
  id: ID!
  isConnected: Boolean!
  updatedAt: DateTime!
  userAccounts: EnterpriseServerUserAccountConnection!
  userAccountsUploads: EnterpriseServerUserAccountsUploadConnection!
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationConnection {
  edges: [EnterpriseServerInstallationEdge]
  nodes: [EnterpriseServerInstallation]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseServerInstallationEdge {
  cursor: String!
  node: EnterpriseServerInstallation
}

"""
The connection type for EnterpriseServerInstallation.
"""
type EnterpriseServerInstallationMembershipConnection {
  edges: [EnterpriseServerInstallationMembershipEdge]
  nodes: [EnterpriseServerInstallation]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An Enterprise Server installation that a user is a member of.
"""
type EnterpriseServerInstallationMembershipEdge {
  cursor: String!
  node: EnterpriseServerInstallation
  role: EnterpriseUserAccountMembershipRole!
}

"""
Ordering options for Enterprise Server installation connections.
"""
input EnterpriseServerInstallationOrder {
  direction: OrderDirection!
  field: EnterpriseServerInstallationOrderField!
}

"""
Properties by which Enterprise Server installation connections can be ordered.
"""
enum EnterpriseServerInstallationOrderField {
  CREATED_AT
  CUSTOMER_NAME
  HOST_NAME
}

"""
A user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccount implements Node {
  createdAt: DateTime!
  emails: EnterpriseServerUserAccountEmailConnection!
  enterpriseServerInstallation: EnterpriseServerInstallation!
  id: ID!
  isSiteAdmin: Boolean!
  login: String!
  profileName: String
  remoteCreatedAt: DateTime!
  remoteUserId: Int!
  updatedAt: DateTime!
}

"""
The connection type for EnterpriseServerUserAccount.
"""
type EnterpriseServerUserAccountConnection {
  edges: [EnterpriseServerUserAccountEdge]
  nodes: [EnterpriseServerUserAccount]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseServerUserAccountEdge {
  cursor: String!
  node: EnterpriseServerUserAccount
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type EnterpriseServerUserAccountEmail implements Node {
  createdAt: DateTime!
  email: String!
  id: ID!
  isPrimary: Boolean!
  updatedAt: DateTime!
  userAccount: EnterpriseServerUserAccount!
}

"""
The connection type for EnterpriseServerUserAccountEmail.
"""
type EnterpriseServerUserAccountEmailConnection {
  edges: [EnterpriseServerUserAccountEmailEdge]
  nodes: [EnterpriseServerUserAccountEmail]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseServerUserAccountEmailEdge {
  cursor: String!
  node: EnterpriseServerUserAccountEmail
}

"""
Ordering options for Enterprise Server user account email connections.
"""
input EnterpriseServerUserAccountEmailOrder {
  direction: OrderDirection!
  field: EnterpriseServerUserAccountEmailOrderField!
}

"""
Properties by which Enterprise Server user account email connections can be ordered.
"""
enum EnterpriseServerUserAccountEmailOrderField {
  EMAIL
}

"""
Ordering options for Enterprise Server user account connections.
"""
input EnterpriseServerUserAccountOrder {
  direction: OrderDirection!
  field: EnterpriseServerUserAccountOrderField!
}

"""
Properties by which Enterprise Server user account connections can be ordered.
"""
enum EnterpriseServerUserAccountOrderField {
  LOGIN
  REMOTE_CREATED_AT
}

"""
A user accounts upload from an Enterprise Server installation.
"""
type EnterpriseServerUserAccountsUpload implements Node {
  createdAt: DateTime!
  enterprise: Enterprise!
  enterpriseServerInstallation: EnterpriseServerInstallation!
  id: ID!
  name: String!
  syncState: EnterpriseServerUserAccountsUploadSyncState!
  updatedAt: DateTime!
}

"""
The connection type for EnterpriseServerUserAccountsUpload.
"""
type EnterpriseServerUserAccountsUploadConnection {
  edges: [EnterpriseServerUserAccountsUploadEdge]
  nodes: [EnterpriseServerUserAccountsUpload]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnterpriseServerUserAccountsUploadEdge {
  cursor: String!
  node: EnterpriseServerUserAccountsUpload
}

"""
Ordering options for Enterprise Server user accounts upload connections.
"""
input EnterpriseServerUserAccountsUploadOrder {
  direction: OrderDirection!
  field: EnterpriseServerUserAccountsUploadOrderField!
}

"""
Properties by which Enterprise Server user accounts upload connections can be ordered.
"""
enum EnterpriseServerUserAccountsUploadOrderField {
  CREATED_AT
}

"""
Synchronization state of the Enterprise Server user accounts upload
"""
enum EnterpriseServerUserAccountsUploadSyncState {
  FAILURE
  PENDING
  SUCCESS
}

"""
An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
"""
type EnterpriseUserAccount implements Actor & Node {
  avatarUrl: URI!
  createdAt: DateTime!
  enterprise: Enterprise!
  enterpriseInstallations: EnterpriseServerInstallationMembershipConnection!
  id: ID!
  login: String!
  name: String
  organizations: EnterpriseOrganizationMembershipConnection!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
  user: User
}

"""
The possible roles for enterprise membership.
"""
enum EnterpriseUserAccountMembershipRole {
  MEMBER
  OWNER
  UNAFFILIATED
}

"""
The possible GitHub Enterprise deployments where this user can exist.
"""
enum EnterpriseUserDeployment {
  CLOUD
  SERVER
}

"""
An environment.
"""
type Environment implements Node {
  databaseId: Int
  id: ID!
  name: String!
  protectionRules: DeploymentProtectionRuleConnection!
}

"""
The connection type for Environment.
"""
type EnvironmentConnection {
  edges: [EnvironmentEdge]
  nodes: [Environment]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EnvironmentEdge {
  cursor: String!
  node: Environment
}

"""
Properties by which environments connections can be ordered
"""
enum EnvironmentOrderField {
  NAME
}

"""
Ordering options for environments
"""
input Environments {
  direction: OrderDirection!
  field: EnvironmentOrderField!
}

"""
An external identity provisioned by SAML SSO or SCIM. If SAML is configured on
the organization, the external identity is visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members. If SAML is configured on the enterprise, the external
identity is visible to (1) enterprise owners, (2) enterprise owners' personal
access tokens (classic) with read:enterprise or admin:enterprise scope.
"""
type ExternalIdentity implements Node {
  guid: String!
  id: ID!
  organizationInvitation: OrganizationInvitation
  samlIdentity: ExternalIdentitySamlAttributes
  scimIdentity: ExternalIdentityScimAttributes
  user: User
}

"""
An attribute for the External Identity attributes collection
"""
type ExternalIdentityAttribute {
  metadata: String
  name: String!
  value: String!
}

"""
The connection type for ExternalIdentity.
"""
type ExternalIdentityConnection {
  edges: [ExternalIdentityEdge]
  nodes: [ExternalIdentity]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ExternalIdentityEdge {
  cursor: String!
  node: ExternalIdentity
}

"""
SAML attributes for the External Identity
"""
type ExternalIdentitySamlAttributes {
  attributes: [ExternalIdentityAttribute!]!
  emails: [UserEmailMetadata!]
  familyName: String
  givenName: String
  groups: [String!]
  nameId: String
  username: String
}

"""
SCIM attributes for the External Identity
"""
type ExternalIdentityScimAttributes {
  emails: [UserEmailMetadata!]
  familyName: String
  givenName: String
  groups: [String!]
  username: String
}

"""
A command to add a file at the given path with the given contents as part of a
commit.  Any existing file at that that path will be replaced.
"""
input FileAddition {
  contents: Base64String!
  path: String!
}

"""
A description of a set of changes to a file tree to be made as part of
a git commit, modeled as zero or more file `additions` and zero or more
file `deletions`.

Both fields are optional; omitting both will produce a commit with no
file changes.

`deletions` and `additions` describe changes to files identified
by their path in the git tree using unix-style path separators, i.e.
`/`.  The root of a git tree is an empty string, so paths are not
slash-prefixed.

`path` values must be unique across all `additions` and `deletions`
provided.  Any duplication will result in a validation error.

### Encoding

File contents must be provided in full for each `FileAddition`.

The `contents` of a `FileAddition` must be encoded using RFC 4648
compliant base64, i.e. correct padding is required and no characters
outside the standard alphabet may be used.  Invalid base64
encoding will be rejected with a validation error.

The encoded contents may be binary.

For text files, no assumptions are made about the character encoding of
the file contents (after base64 decoding).  No charset transcoding or
line-ending normalization will be performed; it is the client's
responsibility to manage the character encoding of files they provide.
However, for maximum compatibility we recommend using UTF-8 encoding
and ensuring that all files in a repository use a consistent
line-ending convention (`\n` or `\r\n`), and that all files end
with a newline.

### Modeling file changes

Each of the the five types of conceptual changes that can be made in a
git commit can be described using the `FileChanges` type as follows:

1. New file addition: create file `hello world\n` at path `docs/README.txt`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       }
"""
input FileChanges {
  additions: [FileAddition!] = ()
  deletions: [FileDeletion!] = ()
}

"""
A command to delete the file at the given path as part of a commit.
"""
input FileDeletion {
  path: String!
}

"""
The possible viewed states of a file .
"""
enum FileViewedState {
  DISMISSED
  UNVIEWED
  VIEWED
}

"""
Autogenerated input type of FollowOrganization
"""
input FollowOrganizationInput {
  clientMutationId: String
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of FollowOrganization
"""
type FollowOrganizationPayload {
  clientMutationId: String
  organization: Organization
}

"""
Autogenerated input type of FollowUser
"""
input FollowUserInput {
  clientMutationId: String
  userId: ID!@possibleTypes(concreteTypes: ("User"))
}

"""
Autogenerated return type of FollowUser
"""
type FollowUserPayload {
  clientMutationId: String
  user: User
}

"""
The connection type for User.
"""
type FollowerConnection {
  edges: [UserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The connection type for User.
"""
type FollowingConnection {
  edges: [UserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A funding platform link for a repository.
"""
type FundingLink {
  platform: FundingPlatform!
  url: URI!
}

"""
The possible funding platforms for repository funding links.
"""
enum FundingPlatform {
  COMMUNITY_BRIDGE
  CUSTOM
  GITHUB
  ISSUEHUNT
  KO_FI
  LFX_CROWDFUNDING
  LIBERAPAY
  OPEN_COLLECTIVE
  OTECHIE
  PATREON
  TIDELIFT
}

"""
A generic hovercard context with a message and icon
"""
type GenericHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
}

"""
A Gist.
"""
type Gist implements Node & Starrable & UniformResourceLocatable {
  comments: GistCommentConnection!
  createdAt: DateTime!
  description: String
  files: [GistFile]
  forks: GistConnection!
  id: ID!
  isFork: Boolean!
  isPublic: Boolean!
  name: String!
  owner: RepositoryOwner
  pushedAt: DateTime
  resourcePath: URI!
  stargazerCount: Int!
  stargazers: StargazerConnection!
  updatedAt: DateTime!
  url: URI!
  viewerHasStarred: Boolean!
}

"""
Represents a comment on an Gist.
"""
type GistComment implements Comment & Deletable & Minimizable & Node & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  gist: Gist!
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: DateTime
  minimizedReason: String
  publishedAt: DateTime
  updatedAt: DateTime!
  userContentEdits: UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

"""
The connection type for GistComment.
"""
type GistCommentConnection {
  edges: [GistCommentEdge]
  nodes: [GistComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GistCommentEdge {
  cursor: String!
  node: GistComment
}

"""
The connection type for Gist.
"""
type GistConnection {
  edges: [GistEdge]
  nodes: [Gist]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GistEdge {
  cursor: String!
  node: Gist
}

"""
A file in a gist.
"""
type GistFile {
  encodedName: String
  encoding: String
  extension: String
  isImage: Boolean!
  isTruncated: Boolean!
  language: Language
  name: String
  size: Int
  text: String
}

"""
Ordering options for gist connections
"""
input GistOrder {
  direction: OrderDirection!
  field: GistOrderField!
}

"""
Properties by which gist connections can be ordered.
"""
enum GistOrderField {
  CREATED_AT
  PUSHED_AT
  UPDATED_AT
}

"""
The privacy of a Gist
"""
enum GistPrivacy {
  ALL
  PUBLIC
  SECRET
}

"""
Represents an actor in a Git commit (ie. an author or committer).
"""
type GitActor {
  avatarUrl: URI!
  date: GitTimestamp
  email: String
  name: String
  user: User
}

"""
The connection type for GitActor.
"""
type GitActorConnection {
  edges: [GitActorEdge]
  nodes: [GitActor]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GitActorEdge {
  cursor: String!
  node: GitActor
}

"""
Represents information about the GitHub instance.
"""
type GitHubMetadata {
  gitHubServicesSha: GitObjectID!
  gitIpAddresses: [String!]
  githubEnterpriseImporterIpAddresses: [String!]
  hookIpAddresses: [String!]
  importerIpAddresses: [String!]
  isPasswordAuthenticationVerifiable: Boolean!
  pagesIpAddresses: [String!]
}

"""
Represents a Git object.
"""
interface GitObject {
  abbreviatedOid: String!
  commitResourcePath: URI!
  commitUrl: URI!
  id: ID!
  oid: GitObjectID!
  repository: Repository!
}

"""
A Git object ID.
"""
scalar GitObjectID 

"""
A fully qualified reference name (e.g. `refs/heads/master`).
"""
scalar GitRefname @preview(toggledBy: "update-refs-preview")

"""
Git SSH string
"""
scalar GitSSHRemote 

"""
Information about a signature (GPG or S/MIME) on a Commit or Tag.
"""
interface GitSignature {
  email: String!
  isValid: Boolean!
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

"""
The state of a Git signature.
"""
enum GitSignatureState {
  BAD_CERT
  BAD_EMAIL
  EXPIRED_KEY
  GPGVERIFY_ERROR
  GPGVERIFY_UNAVAILABLE
  INVALID
  MALFORMED_SIG
  NOT_SIGNING_KEY
  NO_USER
  OCSP_ERROR
  OCSP_PENDING
  OCSP_REVOKED
  UNKNOWN_KEY
  UNKNOWN_SIG_TYPE
  UNSIGNED
  UNVERIFIED_EMAIL
  VALID
}

"""
An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
"""
scalar GitTimestamp 

"""
Represents a GPG signature on a Commit or Tag.
"""
type GpgSignature implements GitSignature {
  email: String!
  isValid: Boolean!
  keyId: String
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

"""
Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole
"""
input GrantEnterpriseOrganizationsMigratorRoleInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  login: String!
}

"""
Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole
"""
type GrantEnterpriseOrganizationsMigratorRolePayload {
  clientMutationId: String
  organizations: OrganizationConnection
}

"""
Autogenerated input type of GrantMigratorRole
"""
input GrantMigratorRoleInput {
  actor: String!
  actorType: ActorType!
  clientMutationId: String
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of GrantMigratorRole
"""
type GrantMigratorRolePayload {
  clientMutationId: String
  success: Boolean
}

"""
A string containing HTML code.
"""
scalar HTML 

"""
Represents a 'head_ref_deleted' event on a given pull request.
"""
type HeadRefDeletedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  headRef: Ref
  headRefName: String!
  id: ID!
  pullRequest: PullRequest!
}

"""
Represents a 'head_ref_force_pushed' event on a given pull request.
"""
type HeadRefForcePushedEvent implements Node {
  actor: Actor
  afterCommit: Commit
  beforeCommit: Commit
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  ref: Ref
}

"""
Represents a 'head_ref_restored' event on a given pull request.
"""
type HeadRefRestoredEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
}

"""
Detail needed to display a hovercard for a user
"""
type Hovercard {
  contexts: [HovercardContext!]!
}

"""
An individual line of a hovercard
"""
interface HovercardContext {
  message: String!
  octicon: String!
}

"""
The possible states in which authentication can be configured with an identity provider.
"""
enum IdentityProviderConfigurationState {
  CONFIGURED
  ENFORCED
  UNCONFIGURED
}

"""
Autogenerated input type of ImportProject
"""
input ImportProjectInput {
  body: String
  clientMutationId: String
  columnImports: [ProjectColumnImport!]!
  name: String!
  ownerName: String!
  public: Boolean = false
}

"""
Autogenerated return type of ImportProject
"""
type ImportProjectPayload {
  clientMutationId: String
  project: Project
}

"""
Autogenerated input type of InviteEnterpriseAdmin
"""
input InviteEnterpriseAdminInput {
  clientMutationId: String
  email: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  invitee: String
  role: EnterpriseAdministratorRole
}

"""
Autogenerated return type of InviteEnterpriseAdmin
"""
type InviteEnterpriseAdminPayload {
  clientMutationId: String
  invitation: EnterpriseAdministratorInvitation
}

"""
The possible values for the IP allow list enabled setting.
"""
enum IpAllowListEnabledSettingValue {
  DISABLED
  ENABLED
}

"""
An IP address or range of addresses that is allowed to access an owner's resources.
"""
type IpAllowListEntry implements Node {
  allowListValue: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  name: String
  owner: IpAllowListOwner!
  updatedAt: DateTime!
}

"""
The connection type for IpAllowListEntry.
"""
type IpAllowListEntryConnection {
  edges: [IpAllowListEntryEdge]
  nodes: [IpAllowListEntry]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IpAllowListEntryEdge {
  cursor: String!
  node: IpAllowListEntry
}

"""
Ordering options for IP allow list entry connections.
"""
input IpAllowListEntryOrder {
  direction: OrderDirection!
  field: IpAllowListEntryOrderField!
}

"""
Properties by which IP allow list entry connections can be ordered.
"""
enum IpAllowListEntryOrderField {
  ALLOW_LIST_VALUE
  CREATED_AT
}

"""
The possible values for the IP allow list configuration for installed GitHub Apps setting.
"""
enum IpAllowListForInstalledAppsEnabledSettingValue {
  DISABLED
  ENABLED
}

"""
Types that can own an IP allow list.
"""
union IpAllowListOwner = App | Enterprise | Organization

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment {
  activeLockReason: LockReason
  assignees: UserConnection!
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyResourcePath: URI!
  bodyText: String!
  bodyUrl: URI!
  closed: Boolean!
  closedAt: DateTime
  comments: IssueCommentConnection!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  fullDatabaseId: BigInt
  hovercard: Hovercard!
  id: ID!
  includesCreatedEdit: Boolean!
  isPinned: Boolean
  isReadByViewer: Boolean
  labels: LabelConnection
  lastEditedAt: DateTime
  linkedBranches: LinkedBranchConnection!
  locked: Boolean!
  milestone: Milestone
  number: Int!
  participants: UserConnection!
  projectCards: ProjectCardConnection!
  projectItems: ProjectV2ItemConnection!
  projectV2: ProjectV2
  projectsV2: ProjectV2Connection!
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  state: IssueState!
  stateReason: IssueStateReason
  timeline: IssueTimelineConnection!@deprecated(reason: "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.")
  timelineItems: IssueTimelineItemsConnection!
  title: String!
  titleHTML: String!
  trackedInIssues: IssueConnection!
  trackedIssues: IssueConnection!
  trackedIssuesCount: Int!
  updatedAt: DateTime!
  url: URI!
  userContentEdits: UserContentEditConnection
  viewerCanClose: Boolean!
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanReopen: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerSubscription: SubscriptionState
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
The possible state reasons of a closed issue.
"""
enum IssueClosedStateReason {
  COMPLETED
  NOT_PLANNED
}

"""
Represents a comment on an Issue.
"""
type IssueComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  fullDatabaseId: BigInt
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  issue: Issue!
  lastEditedAt: DateTime
  minimizedReason: String
  publishedAt: DateTime
  pullRequest: PullRequest
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
  userContentEdits: UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

"""
The connection type for IssueComment.
"""
type IssueCommentConnection {
  edges: [IssueCommentEdge]
  nodes: [IssueComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueCommentEdge {
  cursor: String!
  node: IssueComment
}

"""
Ways in which lists of issue comments can be ordered upon return.
"""
input IssueCommentOrder {
  direction: OrderDirection!
  field: IssueCommentOrderField!
}

"""
Properties by which issue comment connections can be ordered.
"""
enum IssueCommentOrderField {
  UPDATED_AT
}

"""
The connection type for Issue.
"""
type IssueConnection {
  edges: [IssueEdge]
  nodes: [Issue]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
This aggregates issues opened by a user within one repository.
"""
type IssueContributionsByRepository {
  contributions: CreatedIssueContributionConnection!
  repository: Repository!
}

"""
An edge in a connection.
"""
type IssueEdge {
  cursor: String!
  node: Issue
}

"""
Ways in which to filter lists of issues.
"""
input IssueFilters {
  assignee: String
  createdBy: String
  labels: [String!]
  mentioned: String
  milestone: String
  milestoneNumber: String
  since: DateTime
  states: [IssueState!]
  viewerSubscribed: Boolean = false
}

"""
Used for return value of Repository.issueOrPullRequest.
"""
union IssueOrPullRequest = Issue | PullRequest

"""
Ways in which lists of issues can be ordered upon return.
"""
input IssueOrder {
  direction: OrderDirection!
  field: IssueOrderField!
}

"""
Properties by which issue connections can be ordered.
"""
enum IssueOrderField {
  COMMENTS
  CREATED_AT
  UPDATED_AT
}

"""
The possible states of an issue.
"""
enum IssueState {
  CLOSED
  OPEN
}

"""
The possible state reasons of an issue.
"""
enum IssueStateReason {
  COMPLETED
  NOT_PLANNED
  REOPENED
}

"""
A repository issue template.
"""
type IssueTemplate {
  about: String
  assignees: UserConnection!
  body: String
  filename: String!
  labels: LabelConnection
  name: String!
  title: String
}

"""
The connection type for IssueTimelineItem.
"""
type IssueTimelineConnection {
  edges: [IssueTimelineItemEdge]
  nodes: [IssueTimelineItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An item in an issue timeline
"""
union IssueTimelineItem = AssignedEvent | ClosedEvent | Commit | CrossReferencedEvent | DemilestonedEvent | IssueComment | LabeledEvent | LockedEvent | MilestonedEvent | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent

"""
An edge in a connection.
"""
type IssueTimelineItemEdge {
  cursor: String!
  node: IssueTimelineItem
}

"""
An item in an issue timeline
"""
union IssueTimelineItems = AddedToProjectEvent | AssignedEvent | ClosedEvent | CommentDeletedEvent | ConnectedEvent | ConvertedNoteToIssueEvent | ConvertedToDiscussionEvent | CrossReferencedEvent | DemilestonedEvent | DisconnectedEvent | IssueComment | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnmarkedAsDuplicateEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent

"""
The connection type for IssueTimelineItems.
"""
type IssueTimelineItemsConnection {
  edges: [IssueTimelineItemsEdge]
  filteredCount: Int!
  nodes: [IssueTimelineItems]
  pageCount: Int!
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: DateTime!
}

"""
An edge in a connection.
"""
type IssueTimelineItemsEdge {
  cursor: String!
  node: IssueTimelineItems
}

"""
The possible item types found in a timeline.
"""
enum IssueTimelineItemsItemType {
  ADDED_TO_PROJECT_EVENT
  ASSIGNED_EVENT
  CLOSED_EVENT
  COMMENT_DELETED_EVENT
  CONNECTED_EVENT
  CONVERTED_NOTE_TO_ISSUE_EVENT
  CONVERTED_TO_DISCUSSION_EVENT
  CROSS_REFERENCED_EVENT
  DEMILESTONED_EVENT
  DISCONNECTED_EVENT
  ISSUE_COMMENT
  LABELED_EVENT
  LOCKED_EVENT
  MARKED_AS_DUPLICATE_EVENT
  MENTIONED_EVENT
  MILESTONED_EVENT
  MOVED_COLUMNS_IN_PROJECT_EVENT
  PINNED_EVENT
  REFERENCED_EVENT
  REMOVED_FROM_PROJECT_EVENT
  RENAMED_TITLE_EVENT
  REOPENED_EVENT
  SUBSCRIBED_EVENT
  TRANSFERRED_EVENT
  UNASSIGNED_EVENT
  UNLABELED_EVENT
  UNLOCKED_EVENT
  UNMARKED_AS_DUPLICATE_EVENT
  UNPINNED_EVENT
  UNSUBSCRIBED_EVENT
  USER_BLOCKED_EVENT
}

"""
Represents a user signing up for a GitHub account.
"""
type JoinedGitHubContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  resourcePath: URI!
  url: URI!
  user: User!
}

"""
A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
"""
type Label implements Node {
  color: String!
  createdAt: DateTime
  description: String
  id: ID!
  isDefault: Boolean!
  issues: IssueConnection!
  name: String!
  pullRequests: PullRequestConnection!
  repository: Repository!
  resourcePath: URI!
  updatedAt: DateTime
  url: URI!
}

"""
The connection type for Label.
"""
type LabelConnection {
  edges: [LabelEdge]
  nodes: [Label]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LabelEdge {
  cursor: String!
  node: Label
}

"""
Ways in which lists of labels can be ordered upon return.
"""
input LabelOrder {
  direction: OrderDirection!
  field: LabelOrderField!
}

"""
Properties by which label connections can be ordered.
"""
enum LabelOrderField {
  CREATED_AT
  NAME
}

"""
An object that can have labels assigned to it.
"""
interface Labelable {
  labels: LabelConnection
}

"""
Represents a 'labeled' event on a given issue or pull request.
"""
type LabeledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  label: Label!
  labelable: Labelable!
}

"""
Represents a given language found in repositories.
"""
type Language implements Node {
  color: String
  id: ID!
  name: String!
}

"""
A list of languages associated with the parent.
"""
type LanguageConnection {
  edges: [LanguageEdge]
  nodes: [Language]
  pageInfo: PageInfo!
  totalCount: Int!
  totalSize: Int!
}

"""
Represents the language of a repository.
"""
type LanguageEdge {
  cursor: String!
  node: Language!
  size: Int!
}

"""
Ordering options for language connections.
"""
input LanguageOrder {
  direction: OrderDirection!
  field: LanguageOrderField!
}

"""
Properties by which language connections can be ordered.
"""
enum LanguageOrderField {
  SIZE
}

"""
A repository's open source license
"""
type License implements Node {
  body: String!
  conditions: [LicenseRule]!
  description: String
  featured: Boolean!
  hidden: Boolean!
  id: ID!
  implementation: String
  key: String!
  limitations: [LicenseRule]!
  name: String!
  nickname: String
  permissions: [LicenseRule]!
  pseudoLicense: Boolean!
  spdxId: String
  url: URI
}

"""
Describes a License's conditions, permissions, and limitations
"""
type LicenseRule {
  description: String!
  key: String!
  label: String!
}

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
input LinkProjectV2ToRepositoryInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
type LinkProjectV2ToRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
input LinkProjectV2ToTeamInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  teamId: ID!@possibleTypes(concreteTypes: ("Team"))
}

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
type LinkProjectV2ToTeamPayload {
  clientMutationId: String
  team: Team
}

"""
Autogenerated input type of LinkRepositoryToProject
"""
input LinkRepositoryToProjectInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("Project"))
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of LinkRepositoryToProject
"""
type LinkRepositoryToProjectPayload {
  clientMutationId: String
  project: Project
  repository: Repository
}

"""
A branch linked to an issue.
"""
type LinkedBranch implements Node {
  id: ID!
  ref: Ref
}

"""
The connection type for LinkedBranch.
"""
type LinkedBranchConnection {
  edges: [LinkedBranchEdge]
  nodes: [LinkedBranch]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LinkedBranchEdge {
  cursor: String!
  node: LinkedBranch
}

"""
Autogenerated input type of LockLockable
"""
input LockLockableInput {
  clientMutationId: String
  lockReason: LockReason
  lockableId: ID!@possibleTypes(concreteTypes: ("Discussion","Issue","PullRequest"), abstractType: "Lockable")
}

"""
Autogenerated return type of LockLockable
"""
type LockLockablePayload {
  actor: Actor
  clientMutationId: String
  lockedRecord: Lockable
}

"""
The possible reasons that an issue or pull request was locked.
"""
enum LockReason {
  OFF_TOPIC
  RESOLVED
  SPAM
  TOO_HEATED
}

"""
An object that can be locked.
"""
interface Lockable {
  activeLockReason: LockReason
  locked: Boolean!
}

"""
Represents a 'locked' event on a given issue or pull request.
"""
type LockedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  lockReason: LockReason
  lockable: Lockable!
}

"""
A placeholder user for attribution of imported data on GitHub.
"""
type Mannequin implements Actor & Node & UniformResourceLocatable {
  avatarUrl: URI!
  claimant: User
  createdAt: DateTime!
  databaseId: Int
  email: String
  id: ID!
  login: String!
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
}

"""
The connection type for Mannequin.
"""
type MannequinConnection {
  edges: [MannequinEdge]
  nodes: [Mannequin]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a mannequin.
"""
type MannequinEdge {
  cursor: String!
  node: Mannequin
}

"""
Ordering options for mannequins.
"""
input MannequinOrder {
  direction: OrderDirection!
  field: MannequinOrderField!
}

"""
Properties by which mannequins can be ordered.
"""
enum MannequinOrderField {
  CREATED_AT
  LOGIN
}

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
input MarkDiscussionCommentAsAnswerInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("DiscussionComment"))
}

"""
Autogenerated return type of MarkDiscussionCommentAsAnswer
"""
type MarkDiscussionCommentAsAnswerPayload {
  clientMutationId: String
  discussion: Discussion
}

"""
Autogenerated input type of MarkFileAsViewed
"""
input MarkFileAsViewedInput {
  clientMutationId: String
  path: String!
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of MarkFileAsViewed
"""
type MarkFileAsViewedPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Autogenerated input type of MarkProjectV2AsTemplate
"""
input MarkProjectV2AsTemplateInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of MarkProjectV2AsTemplate
"""
type MarkProjectV2AsTemplatePayload {
  clientMutationId: String
  projectV2: ProjectV2
}

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
input MarkPullRequestReadyForReviewInput {
  clientMutationId: String
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of MarkPullRequestReadyForReview
"""
type MarkPullRequestReadyForReviewPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Represents a 'marked_as_duplicate' event on a given issue or pull request.
"""
type MarkedAsDuplicateEvent implements Node {
  actor: Actor
  canonical: IssueOrPullRequest
  createdAt: DateTime!
  duplicate: IssueOrPullRequest
  id: ID!
  isCrossRepository: Boolean!
}

"""
A public description of a Marketplace category.
"""
type MarketplaceCategory implements Node {
  description: String
  howItWorks: String
  id: ID!
  name: String!
  primaryListingCount: Int!
  resourcePath: URI!
  secondaryListingCount: Int!
  slug: String!
  url: URI!
}

"""
A listing in the GitHub integration marketplace.
"""
type MarketplaceListing implements Node {
  app: App
  companyUrl: URI
  configurationResourcePath: URI!
  configurationUrl: URI!
  documentationUrl: URI
  extendedDescription: String
  extendedDescriptionHTML: HTML!
  fullDescription: String!
  fullDescriptionHTML: HTML!
  hasPublishedFreeTrialPlans: Boolean!
  hasTermsOfService: Boolean!
  hasVerifiedOwner: Boolean!
  howItWorks: String
  howItWorksHTML: HTML!
  id: ID!
  installationUrl: URI
  installedForViewer: Boolean!
  isArchived: Boolean!
  isDraft: Boolean!
  isPaid: Boolean!
  isPublic: Boolean!
  isRejected: Boolean!
  isUnverified: Boolean!
  isUnverifiedPending: Boolean!
  isVerificationPendingFromDraft: Boolean!
  isVerificationPendingFromUnverified: Boolean!
  isVerified: Boolean!
  logoBackgroundColor: String!
  logoUrl: URI
  name: String!
  normalizedShortDescription: String!
  pricingUrl: URI
  primaryCategory: MarketplaceCategory!
  privacyPolicyUrl: URI!
  resourcePath: URI!
  screenshotUrls: [String]!
  secondaryCategory: MarketplaceCategory
  shortDescription: String!
  slug: String!
  statusUrl: URI
  supportEmail: String
  supportUrl: URI!
  termsOfServiceUrl: URI
  url: URI!
  viewerCanAddPlans: Boolean!
  viewerCanApprove: Boolean!
  viewerCanDelist: Boolean!
  viewerCanEdit: Boolean!
  viewerCanEditCategories: Boolean!
  viewerCanEditPlans: Boolean!
  viewerCanRedraft: Boolean!
  viewerCanReject: Boolean!
  viewerCanRequestApproval: Boolean!
  viewerHasPurchased: Boolean!
  viewerHasPurchasedForAllOrganizations: Boolean!
  viewerIsListingAdmin: Boolean!
}

"""
Look up Marketplace Listings
"""
type MarketplaceListingConnection {
  edges: [MarketplaceListingEdge]
  nodes: [MarketplaceListing]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MarketplaceListingEdge {
  cursor: String!
  node: MarketplaceListing
}

"""
Entities that have members who can set status messages.
"""
interface MemberStatusable {
  memberStatuses: UserStatusConnection!
}

"""
Audit log entry for a members_can_delete_repos.clear event.
"""
type MembersCanDeleteReposClearAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a members_can_delete_repos.disable event.
"""
type MembersCanDeleteReposDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a members_can_delete_repos.enable event.
"""
type MembersCanDeleteReposEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Represents a 'mentioned' event on a given issue or pull request.
"""
type MentionedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
}

"""
Autogenerated input type of MergeBranch
"""
input MergeBranchInput {
  authorEmail: String
  base: String!
  clientMutationId: String
  commitMessage: String
  head: String!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of MergeBranch
"""
type MergeBranchPayload {
  clientMutationId: String
  mergeCommit: Commit
}

"""
The possible default commit messages for merges.
"""
enum MergeCommitMessage {
  BLANK
  PR_BODY
  PR_TITLE
}

"""
The possible default commit titles for merges.
"""
enum MergeCommitTitle {
  MERGE_MESSAGE
  PR_TITLE
}

"""
Autogenerated input type of MergePullRequest
"""
input MergePullRequestInput {
  authorEmail: String
  clientMutationId: String
  commitBody: String
  commitHeadline: String
  expectedHeadOid: GitObjectID
  mergeMethod: PullRequestMergeMethod = MERGE
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of MergePullRequest
"""
type MergePullRequestPayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
}

"""
The queue of pull request entries to be merged into a protected branch in a repository.
"""
type MergeQueue implements Node {
  configuration: MergeQueueConfiguration
  entries: MergeQueueEntryConnection
  id: ID!
  nextEntryEstimatedTimeToMerge: Int
  repository: Repository
  resourcePath: URI!
  url: URI!
}

"""
Configuration for a MergeQueue
"""
type MergeQueueConfiguration {
  checkResponseTimeout: Int
  maximumEntriesToBuild: Int
  maximumEntriesToMerge: Int
  mergeMethod: PullRequestMergeMethod
  mergingStrategy: MergeQueueMergingStrategy
  minimumEntriesToMerge: Int
  minimumEntriesToMergeWaitTime: Int
}

"""
Entries in a MergeQueue
"""
type MergeQueueEntry implements Node {
  baseCommit: Commit
  enqueuedAt: DateTime!
  enqueuer: Actor!
  estimatedTimeToMerge: Int
  headCommit: Commit
  id: ID!
  jump: Boolean!
  mergeQueue: MergeQueue
  position: Int!
  pullRequest: PullRequest
  solo: Boolean!
  state: MergeQueueEntryState!
}

"""
The connection type for MergeQueueEntry.
"""
type MergeQueueEntryConnection {
  edges: [MergeQueueEntryEdge]
  nodes: [MergeQueueEntry]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MergeQueueEntryEdge {
  cursor: String!
  node: MergeQueueEntry
}

"""
The possible states for a merge queue entry.
"""
enum MergeQueueEntryState {
  AWAITING_CHECKS
  LOCKED
  MERGEABLE
  QUEUED
  UNMERGEABLE
}

"""
The possible merging strategies for a merge queue.
"""
enum MergeQueueMergingStrategy {
  ALLGREEN
  HEADGREEN
}

"""
Detailed status information about a pull request merge.
"""
enum MergeStateStatus {
  BEHIND
  BLOCKED
  CLEAN
  DIRTY
  DRAFT @deprecated(reason: "DRAFT state will be removed from this enum and `isDraft` should be used instead Use PullRequest.isDraft instead. Removal on 2021-01-01 UTC.")
  HAS_HOOKS
  UNKNOWN
  UNSTABLE
}

"""
Whether or not a PullRequest can be merged.
"""
enum MergeableState {
  CONFLICTING
  MERGEABLE
  UNKNOWN
}

"""
Represents a 'merged' event on a given pull request.
"""
type MergedEvent implements Node & UniformResourceLocatable {
  actor: Actor
  commit: Commit
  createdAt: DateTime!
  id: ID!
  mergeRef: Ref
  mergeRefName: String!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
}

"""
Represents a GitHub Enterprise Importer (GEI) migration.
"""
interface Migration {
  continueOnError: Boolean!
  createdAt: DateTime!
  databaseId: String
  failureReason: String
  id: ID!
  migrationLogUrl: URI
  migrationSource: MigrationSource!
  repositoryName: String!
  sourceUrl: URI!
  state: MigrationState!
  warningsCount: Int!
}

"""
A GitHub Enterprise Importer (GEI) migration source.
"""
type MigrationSource implements Node {
  id: ID!
  name: String!
  type: MigrationSourceType!
  url: URI!
}

"""
Represents the different GitHub Enterprise Importer (GEI) migration sources.
"""
enum MigrationSourceType {
  AZURE_DEVOPS
  BITBUCKET_SERVER
  GITHUB_ARCHIVE
}

"""
The GitHub Enterprise Importer (GEI) migration state.
"""
enum MigrationState {
  FAILED
  FAILED_VALIDATION
  IN_PROGRESS
  NOT_STARTED
  PENDING_VALIDATION
  QUEUED
  SUCCEEDED
}

"""
Represents a Milestone object on a given repository.
"""
type Milestone implements Closable & Node & UniformResourceLocatable {
  closed: Boolean!
  closedAt: DateTime
  createdAt: DateTime!
  creator: Actor
  description: String
  dueOn: DateTime
  id: ID!
  issues: IssueConnection!
  number: Int!
  progressPercentage: Float!
  pullRequests: PullRequestConnection!
  repository: Repository!
  resourcePath: URI!
  state: MilestoneState!
  title: String!
  updatedAt: DateTime!
  url: URI!
  viewerCanClose: Boolean!
  viewerCanReopen: Boolean!
}

"""
The connection type for Milestone.
"""
type MilestoneConnection {
  edges: [MilestoneEdge]
  nodes: [Milestone]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type MilestoneEdge {
  cursor: String!
  node: Milestone
}

"""
Types that can be inside a Milestone.
"""
union MilestoneItem = Issue | PullRequest

"""
Ordering options for milestone connections.
"""
input MilestoneOrder {
  direction: OrderDirection!
  field: MilestoneOrderField!
}

"""
Properties by which milestone connections can be ordered.
"""
enum MilestoneOrderField {
  CREATED_AT
  DUE_DATE
  NUMBER
  UPDATED_AT
}

"""
The possible states of a milestone.
"""
enum MilestoneState {
  CLOSED
  OPEN
}

"""
Represents a 'milestoned' event on a given issue or pull request.
"""
type MilestonedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  milestoneTitle: String!
  subject: MilestoneItem!
}

"""
Entities that can be minimized.
"""
interface Minimizable {
  isMinimized: Boolean!
  minimizedReason: String
  viewerCanMinimize: Boolean!
}

"""
Autogenerated input type of MinimizeComment
"""
input MinimizeCommentInput {
  classifier: ReportedContentClassifiers!
  clientMutationId: String
  subjectId: ID!@possibleTypes(concreteTypes: ("CommitComment","DiscussionComment","GistComment","IssueComment","PullRequestReviewComment"), abstractType: "Minimizable")
}

"""
Autogenerated return type of MinimizeComment
"""
type MinimizeCommentPayload {
  clientMutationId: String
  minimizedComment: Minimizable
}

"""
Autogenerated input type of MoveProjectCard
"""
input MoveProjectCardInput {
  afterCardId: ID@possibleTypes(concreteTypes: ("ProjectCard"))
  cardId: ID!@possibleTypes(concreteTypes: ("ProjectCard"))
  clientMutationId: String
  columnId: ID!@possibleTypes(concreteTypes: ("ProjectColumn"))
}

"""
Autogenerated return type of MoveProjectCard
"""
type MoveProjectCardPayload {
  cardEdge: ProjectCardEdge
  clientMutationId: String
}

"""
Autogenerated input type of MoveProjectColumn
"""
input MoveProjectColumnInput {
  afterColumnId: ID@possibleTypes(concreteTypes: ("ProjectColumn"))
  clientMutationId: String
  columnId: ID!@possibleTypes(concreteTypes: ("ProjectColumn"))
}

"""
Autogenerated return type of MoveProjectColumn
"""
type MoveProjectColumnPayload {
  clientMutationId: String
  columnEdge: ProjectColumnEdge
}

"""
Represents a 'moved_columns_in_project' event on a given issue or pull request.
"""
type MovedColumnsInProjectEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  previousProjectColumnName: String!@preview(toggledBy: "starfox-preview")
  project: Project@preview(toggledBy: "starfox-preview")
  projectCard: ProjectCard@preview(toggledBy: "starfox-preview")
  projectColumnName: String!@preview(toggledBy: "starfox-preview")
}

"""
The root query for implementing GraphQL mutations.
"""
type Mutation {
  abortQueuedMigrations: AbortQueuedMigrationsPayload
  acceptEnterpriseAdministratorInvitation: AcceptEnterpriseAdministratorInvitationPayload
  acceptTopicSuggestion: AcceptTopicSuggestionPayload
  addAssigneesToAssignable: AddAssigneesToAssignablePayload
  addComment: AddCommentPayload
  addDiscussionComment: AddDiscussionCommentPayload
  addDiscussionPollVote: AddDiscussionPollVotePayload
  addEnterpriseOrganizationMember: AddEnterpriseOrganizationMemberPayload
  addEnterpriseSupportEntitlement: AddEnterpriseSupportEntitlementPayload
  addLabelsToLabelable: AddLabelsToLabelablePayload
  addProjectCard: AddProjectCardPayload
  addProjectColumn: AddProjectColumnPayload
  addProjectV2DraftIssue: AddProjectV2DraftIssuePayload
  addProjectV2ItemById: AddProjectV2ItemByIdPayload
  addPullRequestReview: AddPullRequestReviewPayload
  addPullRequestReviewComment: AddPullRequestReviewCommentPayload
  addPullRequestReviewThread: AddPullRequestReviewThreadPayload
  addPullRequestReviewThreadReply: AddPullRequestReviewThreadReplyPayload
  addReaction: AddReactionPayload
  addStar: AddStarPayload
  addUpvote: AddUpvotePayload
  addVerifiableDomain: AddVerifiableDomainPayload
  approveDeployments: ApproveDeploymentsPayload
  approveVerifiableDomain: ApproveVerifiableDomainPayload
  archiveProjectV2Item: ArchiveProjectV2ItemPayload
  archiveRepository: ArchiveRepositoryPayload
  cancelEnterpriseAdminInvitation: CancelEnterpriseAdminInvitationPayload
  cancelSponsorship: CancelSponsorshipPayload
  changeUserStatus: ChangeUserStatusPayload
  clearLabelsFromLabelable: ClearLabelsFromLabelablePayload
  clearProjectV2ItemFieldValue: ClearProjectV2ItemFieldValuePayload
  cloneProject: CloneProjectPayload
  cloneTemplateRepository: CloneTemplateRepositoryPayload
  closeDiscussion: CloseDiscussionPayload
  closeIssue: CloseIssuePayload
  closePullRequest: ClosePullRequestPayload
  convertProjectCardNoteToIssue: ConvertProjectCardNoteToIssuePayload
  convertPullRequestToDraft: ConvertPullRequestToDraftPayload
  copyProjectV2: CopyProjectV2Payload
  createAttributionInvitation: CreateAttributionInvitationPayload
  createBranchProtectionRule: CreateBranchProtectionRulePayload
  createCheckRun: CreateCheckRunPayload
  createCheckSuite: CreateCheckSuitePayload
  createCommitOnBranch: CreateCommitOnBranchPayload
  createDeployment: CreateDeploymentPayload@preview(toggledBy: "flash-preview")
  createDeploymentStatus: CreateDeploymentStatusPayload@preview(toggledBy: "flash-preview")
  createDiscussion: CreateDiscussionPayload
  createEnterpriseOrganization: CreateEnterpriseOrganizationPayload
  createEnvironment: CreateEnvironmentPayload
  createIpAllowListEntry: CreateIpAllowListEntryPayload
  createIssue: CreateIssuePayload
  createLabel: CreateLabelPayload@preview(toggledBy: "bane-preview")
  createLinkedBranch: CreateLinkedBranchPayload
  createMigrationSource: CreateMigrationSourcePayload
  createProject: CreateProjectPayload
  createProjectV2: CreateProjectV2Payload
  createProjectV2Field: CreateProjectV2FieldPayload
  createPullRequest: CreatePullRequestPayload
  createRef: CreateRefPayload
  createRepository: CreateRepositoryPayload
  createRepositoryRuleset: CreateRepositoryRulesetPayload
  createSponsorsListing: CreateSponsorsListingPayload
  createSponsorsTier: CreateSponsorsTierPayload
  createSponsorship: CreateSponsorshipPayload
  createSponsorships: CreateSponsorshipsPayload
  createTeamDiscussion: CreateTeamDiscussionPayload
  createTeamDiscussionComment: CreateTeamDiscussionCommentPayload
  declineTopicSuggestion: DeclineTopicSuggestionPayload
  deleteBranchProtectionRule: DeleteBranchProtectionRulePayload
  deleteDeployment: DeleteDeploymentPayload
  deleteDiscussion: DeleteDiscussionPayload
  deleteDiscussionComment: DeleteDiscussionCommentPayload
  deleteEnvironment: DeleteEnvironmentPayload
  deleteIpAllowListEntry: DeleteIpAllowListEntryPayload
  deleteIssue: DeleteIssuePayload
  deleteIssueComment: DeleteIssueCommentPayload
  deleteLabel: DeleteLabelPayload@preview(toggledBy: "bane-preview")
  deleteLinkedBranch: DeleteLinkedBranchPayload
  deletePackageVersion: DeletePackageVersionPayload@preview(toggledBy: "package-deletes-preview")
  deleteProject: DeleteProjectPayload
  deleteProjectCard: DeleteProjectCardPayload
  deleteProjectColumn: DeleteProjectColumnPayload
  deleteProjectV2: DeleteProjectV2Payload
  deleteProjectV2Field: DeleteProjectV2FieldPayload
  deleteProjectV2Item: DeleteProjectV2ItemPayload
  deleteProjectV2Workflow: DeleteProjectV2WorkflowPayload
  deletePullRequestReview: DeletePullRequestReviewPayload
  deletePullRequestReviewComment: DeletePullRequestReviewCommentPayload
  deleteRef: DeleteRefPayload
  deleteRepositoryRuleset: DeleteRepositoryRulesetPayload
  deleteTeamDiscussion: DeleteTeamDiscussionPayload
  deleteTeamDiscussionComment: DeleteTeamDiscussionCommentPayload
  deleteVerifiableDomain: DeleteVerifiableDomainPayload
  dequeuePullRequest: DequeuePullRequestPayload
  disablePullRequestAutoMerge: DisablePullRequestAutoMergePayload
  dismissPullRequestReview: DismissPullRequestReviewPayload
  dismissRepositoryVulnerabilityAlert: DismissRepositoryVulnerabilityAlertPayload
  enablePullRequestAutoMerge: EnablePullRequestAutoMergePayload
  enqueuePullRequest: EnqueuePullRequestPayload
  followOrganization: FollowOrganizationPayload
  followUser: FollowUserPayload
  grantEnterpriseOrganizationsMigratorRole: GrantEnterpriseOrganizationsMigratorRolePayload
  grantMigratorRole: GrantMigratorRolePayload
  importProject: ImportProjectPayload@preview(toggledBy: "slothette-preview")
  inviteEnterpriseAdmin: InviteEnterpriseAdminPayload
  linkProjectV2ToRepository: LinkProjectV2ToRepositoryPayload
  linkProjectV2ToTeam: LinkProjectV2ToTeamPayload
  linkRepositoryToProject: LinkRepositoryToProjectPayload
  lockLockable: LockLockablePayload
  markDiscussionCommentAsAnswer: MarkDiscussionCommentAsAnswerPayload
  markFileAsViewed: MarkFileAsViewedPayload
  markProjectV2AsTemplate: MarkProjectV2AsTemplatePayload
  markPullRequestReadyForReview: MarkPullRequestReadyForReviewPayload
  mergeBranch: MergeBranchPayload
  mergePullRequest: MergePullRequestPayload
  minimizeComment: MinimizeCommentPayload
  moveProjectCard: MoveProjectCardPayload
  moveProjectColumn: MoveProjectColumnPayload
  pinIssue: PinIssuePayload
  publishSponsorsTier: PublishSponsorsTierPayload
  regenerateEnterpriseIdentityProviderRecoveryCodes: RegenerateEnterpriseIdentityProviderRecoveryCodesPayload
  regenerateVerifiableDomainToken: RegenerateVerifiableDomainTokenPayload
  rejectDeployments: RejectDeploymentsPayload
  removeAssigneesFromAssignable: RemoveAssigneesFromAssignablePayload
  removeEnterpriseAdmin: RemoveEnterpriseAdminPayload
  removeEnterpriseIdentityProvider: RemoveEnterpriseIdentityProviderPayload
  removeEnterpriseMember: RemoveEnterpriseMemberPayload
  removeEnterpriseOrganization: RemoveEnterpriseOrganizationPayload
  removeEnterpriseSupportEntitlement: RemoveEnterpriseSupportEntitlementPayload
  removeLabelsFromLabelable: RemoveLabelsFromLabelablePayload
  removeOutsideCollaborator: RemoveOutsideCollaboratorPayload
  removeReaction: RemoveReactionPayload
  removeStar: RemoveStarPayload
  removeUpvote: RemoveUpvotePayload
  reopenDiscussion: ReopenDiscussionPayload
  reopenIssue: ReopenIssuePayload
  reopenPullRequest: ReopenPullRequestPayload
  requestReviews: RequestReviewsPayload
  rerequestCheckSuite: RerequestCheckSuitePayload
  resolveReviewThread: ResolveReviewThreadPayload
  retireSponsorsTier: RetireSponsorsTierPayload
  revertPullRequest: RevertPullRequestPayload
  revokeEnterpriseOrganizationsMigratorRole: RevokeEnterpriseOrganizationsMigratorRolePayload
  revokeMigratorRole: RevokeMigratorRolePayload
  setEnterpriseIdentityProvider: SetEnterpriseIdentityProviderPayload
  setOrganizationInteractionLimit: SetOrganizationInteractionLimitPayload
  setRepositoryInteractionLimit: SetRepositoryInteractionLimitPayload
  setUserInteractionLimit: SetUserInteractionLimitPayload
  startOrganizationMigration: StartOrganizationMigrationPayload
  startRepositoryMigration: StartRepositoryMigrationPayload
  submitPullRequestReview: SubmitPullRequestReviewPayload
  transferEnterpriseOrganization: TransferEnterpriseOrganizationPayload
  transferIssue: TransferIssuePayload
  unarchiveProjectV2Item: UnarchiveProjectV2ItemPayload
  unarchiveRepository: UnarchiveRepositoryPayload
  unfollowOrganization: UnfollowOrganizationPayload
  unfollowUser: UnfollowUserPayload
  unlinkProjectV2FromRepository: UnlinkProjectV2FromRepositoryPayload
  unlinkProjectV2FromTeam: UnlinkProjectV2FromTeamPayload
  unlinkRepositoryFromProject: UnlinkRepositoryFromProjectPayload
  unlockLockable: UnlockLockablePayload
  unmarkDiscussionCommentAsAnswer: UnmarkDiscussionCommentAsAnswerPayload
  unmarkFileAsViewed: UnmarkFileAsViewedPayload
  unmarkIssueAsDuplicate: UnmarkIssueAsDuplicatePayload
  unmarkProjectV2AsTemplate: UnmarkProjectV2AsTemplatePayload
  unminimizeComment: UnminimizeCommentPayload
  unpinIssue: UnpinIssuePayload
  unresolveReviewThread: UnresolveReviewThreadPayload
  updateBranchProtectionRule: UpdateBranchProtectionRulePayload
  updateCheckRun: UpdateCheckRunPayload
  updateCheckSuitePreferences: UpdateCheckSuitePreferencesPayload
  updateDiscussion: UpdateDiscussionPayload
  updateDiscussionComment: UpdateDiscussionCommentPayload
  updateEnterpriseAdministratorRole: UpdateEnterpriseAdministratorRolePayload
  updateEnterpriseAllowPrivateRepositoryForkingSetting: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload
  updateEnterpriseDefaultRepositoryPermissionSetting: UpdateEnterpriseDefaultRepositoryPermissionSettingPayload
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload
  updateEnterpriseMembersCanCreateRepositoriesSetting: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload
  updateEnterpriseMembersCanDeleteIssuesSetting: UpdateEnterpriseMembersCanDeleteIssuesSettingPayload
  updateEnterpriseMembersCanDeleteRepositoriesSetting: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload
  updateEnterpriseMembersCanInviteCollaboratorsSetting: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload
  updateEnterpriseMembersCanMakePurchasesSetting: UpdateEnterpriseMembersCanMakePurchasesSettingPayload
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload
  updateEnterpriseMembersCanViewDependencyInsightsSetting: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload
  updateEnterpriseOrganizationProjectsSetting: UpdateEnterpriseOrganizationProjectsSettingPayload
  updateEnterpriseOwnerOrganizationRole: UpdateEnterpriseOwnerOrganizationRolePayload
  updateEnterpriseProfile: UpdateEnterpriseProfilePayload
  updateEnterpriseRepositoryProjectsSetting: UpdateEnterpriseRepositoryProjectsSettingPayload
  updateEnterpriseTeamDiscussionsSetting: UpdateEnterpriseTeamDiscussionsSettingPayload
  updateEnterpriseTwoFactorAuthenticationRequiredSetting: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload
  updateEnvironment: UpdateEnvironmentPayload
  updateIpAllowListEnabledSetting: UpdateIpAllowListEnabledSettingPayload
  updateIpAllowListEntry: UpdateIpAllowListEntryPayload
  updateIpAllowListForInstalledAppsEnabledSetting: UpdateIpAllowListForInstalledAppsEnabledSettingPayload
  updateIssue: UpdateIssuePayload
  updateIssueComment: UpdateIssueCommentPayload
  updateLabel: UpdateLabelPayload@preview(toggledBy: "bane-preview")
  updateNotificationRestrictionSetting: UpdateNotificationRestrictionSettingPayload
  updateOrganizationAllowPrivateRepositoryForkingSetting: UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload
  updateOrganizationWebCommitSignoffSetting: UpdateOrganizationWebCommitSignoffSettingPayload
  updateProject: UpdateProjectPayload
  updateProjectCard: UpdateProjectCardPayload
  updateProjectColumn: UpdateProjectColumnPayload
  updateProjectV2: UpdateProjectV2Payload
  updateProjectV2Collaborators: UpdateProjectV2CollaboratorsPayload
  updateProjectV2DraftIssue: UpdateProjectV2DraftIssuePayload
  updateProjectV2ItemFieldValue: UpdateProjectV2ItemFieldValuePayload
  updateProjectV2ItemPosition: UpdateProjectV2ItemPositionPayload
  updatePullRequest: UpdatePullRequestPayload
  updatePullRequestBranch: UpdatePullRequestBranchPayload
  updatePullRequestReview: UpdatePullRequestReviewPayload
  updatePullRequestReviewComment: UpdatePullRequestReviewCommentPayload
  updateRef: UpdateRefPayload
  updateRefs: UpdateRefsPayload@preview(toggledBy: "update-refs-preview")
  updateRepository: UpdateRepositoryPayload
  updateRepositoryRuleset: UpdateRepositoryRulesetPayload
  updateRepositoryWebCommitSignoffSetting: UpdateRepositoryWebCommitSignoffSettingPayload
  updateSponsorshipPreferences: UpdateSponsorshipPreferencesPayload
  updateSubscription: UpdateSubscriptionPayload
  updateTeamDiscussion: UpdateTeamDiscussionPayload
  updateTeamDiscussionComment: UpdateTeamDiscussionCommentPayload
  updateTeamReviewAssignment: UpdateTeamReviewAssignmentPayload@preview(toggledBy: "stone-crop-preview")
  updateTeamsRepository: UpdateTeamsRepositoryPayload
  updateTopics: UpdateTopicsPayload
  verifyVerifiableDomain: VerifyVerifiableDomainPayload
}

"""
An object with an ID.
"""
interface Node {
  id: ID!
}

"""
The possible values for the notification restriction setting.
"""
enum NotificationRestrictionSettingValue {
  DISABLED
  ENABLED
}

"""
An OIDC identity provider configured to provision identities for an enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with read:enterprise or admin:enterprise scope.
"""
type OIDCProvider implements Node {
  enterprise: Enterprise
  externalIdentities: ExternalIdentityConnection!
  id: ID!
  providerType: OIDCProviderType!
  tenantId: String!
}

"""
The OIDC identity provider type
"""
enum OIDCProviderType {
  AAD
}

"""
Metadata for an audit entry with action oauth_application.*
"""
interface OauthApplicationAuditEntryData {
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
}

"""
Audit log entry for a oauth_application.create event.
"""
type OauthApplicationCreateAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  applicationUrl: URI
  callbackUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  rateLimit: Int
  state: OauthApplicationCreateAuditEntryState
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The state of an OAuth application when it was created.
"""
enum OauthApplicationCreateAuditEntryState {
  ACTIVE
  PENDING_DELETION
  SUSPENDED
}

"""
The corresponding operation type for the action
"""
enum OperationType {
  ACCESS
  AUTHENTICATION
  CREATE
  MODIFY
  REMOVE
  RESTORE
  TRANSFER
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  ASC
  DESC
}

"""
Audit log entry for a org.add_billing_manager
"""
type OrgAddBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  invitationEmail: String
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.add_member
"""
type OrgAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  permission: OrgAddMemberAuditEntryPermission
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The permissions available to members on an Organization.
"""
enum OrgAddMemberAuditEntryPermission {
  ADMIN
  READ
}

"""
Audit log entry for a org.block_user
"""
type OrgBlockUserAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  blockedUser: User
  blockedUserName: String
  blockedUserResourcePath: URI
  blockedUserUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.config.disable_collaborators_only event.
"""
type OrgConfigDisableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.config.enable_collaborators_only event.
"""
type OrgConfigEnableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.create event.
"""
type OrgCreateAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  billingPlan: OrgCreateAuditEntryBillingPlan
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The billing plans available for organizations.
"""
enum OrgCreateAuditEntryBillingPlan {
  BUSINESS
  BUSINESS_PLUS
  FREE
  TIERED_PER_SEAT
  UNLIMITED
}

"""
Audit log entry for a org.disable_oauth_app_restrictions event.
"""
type OrgDisableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.disable_saml event.
"""
type OrgDisableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  digestMethodUrl: URI
  id: ID!
  issuerUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  signatureMethodUrl: URI
  singleSignOnUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
type OrgDisableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
type OrgEnableOauthAppRestrictionsAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.enable_saml event.
"""
type OrgEnableSamlAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  digestMethodUrl: URI
  id: ID!
  issuerUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  signatureMethodUrl: URI
  singleSignOnUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
type OrgEnableTwoFactorRequirementAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Ordering options for an organization's enterprise owner connections.
"""
input OrgEnterpriseOwnerOrder {
  direction: OrderDirection!
  field: OrgEnterpriseOwnerOrderField!
}

"""
Properties by which enterprise owners can be ordered.
"""
enum OrgEnterpriseOwnerOrderField {
  LOGIN
}

"""
Audit log entry for a org.invite_member event.
"""
type OrgInviteMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  email: String
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationInvitation: OrganizationInvitation
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.invite_to_business event.
"""
type OrgInviteToBusinessAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
type OrgOauthAppAccessApprovedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_blocked event.
"""
type OrgOauthAppAccessBlockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
type OrgOauthAppAccessDeniedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
type OrgOauthAppAccessRequestedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.oauth_app_access_unblocked event.
"""
type OrgOauthAppAccessUnblockedAuditEntry implements AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: URI
  oauthApplicationUrl: URI
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.remove_billing_manager event.
"""
type OrgRemoveBillingManagerAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  reason: OrgRemoveBillingManagerAuditEntryReason
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The reason a billing manager was removed from an Organization.
"""
enum OrgRemoveBillingManagerAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

"""
Audit log entry for a org.remove_member event.
"""
type OrgRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  membershipTypes: [OrgRemoveMemberAuditEntryMembershipType!]
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  reason: OrgRemoveMemberAuditEntryReason
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The type of membership a user has with an Organization.
"""
enum OrgRemoveMemberAuditEntryMembershipType {
  ADMIN
  BILLING_MANAGER
  DIRECT_MEMBER
  OUTSIDE_COLLABORATOR
  SUSPENDED
  UNAFFILIATED
}

"""
The reason a member was removed from an Organization.
"""
enum OrgRemoveMemberAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
  TWO_FACTOR_ACCOUNT_RECOVERY
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  USER_ACCOUNT_DELETED
}

"""
Audit log entry for a org.remove_outside_collaborator event.
"""
type OrgRemoveOutsideCollaboratorAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  membershipTypes: [OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  reason: OrgRemoveOutsideCollaboratorAuditEntryReason
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The type of membership a user has with an Organization.
"""
enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  BILLING_MANAGER
  OUTSIDE_COLLABORATOR
  UNAFFILIATED
}

"""
The reason an outside collaborator was removed from an Organization.
"""
enum OrgRemoveOutsideCollaboratorAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

"""
Audit log entry for a org.restore_member event.
"""
type OrgRestoreMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  restoredCustomEmailRoutingsCount: Int
  restoredIssueAssignmentsCount: Int
  restoredMemberships: [OrgRestoreMemberAuditEntryMembership!]
  restoredMembershipsCount: Int
  restoredRepositoriesCount: Int
  restoredRepositoryStarsCount: Int
  restoredRepositoryWatchesCount: Int
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Types of memberships that can be restored for an Organization member.
"""
union OrgRestoreMemberAuditEntryMembership = OrgRestoreMemberMembershipOrganizationAuditEntryData | OrgRestoreMemberMembershipRepositoryAuditEntryData | OrgRestoreMemberMembershipTeamAuditEntryData

"""
Metadata for an organization membership for org.restore_member actions
"""
type OrgRestoreMemberMembershipOrganizationAuditEntryData implements OrganizationAuditEntryData {
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
}

"""
Metadata for a repository membership for org.restore_member actions
"""
type OrgRestoreMemberMembershipRepositoryAuditEntryData implements RepositoryAuditEntryData {
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
}

"""
Metadata for a team membership for org.restore_member actions
"""
type OrgRestoreMemberMembershipTeamAuditEntryData implements TeamAuditEntryData {
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
}

"""
Audit log entry for a org.unblock_user
"""
type OrgUnblockUserAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  blockedUser: User
  blockedUserName: String
  blockedUserResourcePath: URI
  blockedUserUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a org.update_default_repository_permission
"""
type OrgUpdateDefaultRepositoryPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  permission: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  permissionWas: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The default permission a repository can have in an Organization.
"""
enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  ADMIN
  NONE
  READ
  WRITE
}

"""
Audit log entry for a org.update_member event.
"""
type OrgUpdateMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  permission: OrgUpdateMemberAuditEntryPermission
  permissionWas: OrgUpdateMemberAuditEntryPermission
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The permissions available to members on an Organization.
"""
enum OrgUpdateMemberAuditEntryPermission {
  ADMIN
  READ
}

"""
Audit log entry for a org.update_member_repository_creation_permission event.
"""
type OrgUpdateMemberRepositoryCreationPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  canCreateRepositories: Boolean
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
}

"""
The permissions available for repository creation on an Organization.
"""
enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  ALL
  INTERNAL
  NONE
  PRIVATE
  PRIVATE_INTERNAL
  PUBLIC
  PUBLIC_INTERNAL
  PUBLIC_PRIVATE
}

"""
Audit log entry for a org.update_member_repository_invitation_permission event.
"""
type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  canInviteOutsideCollaboratorsToRepositories: Boolean
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
An account on GitHub, with one or more owners, that has repositories, members and teams.
"""
type Organization implements Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  announcement: String
  announcementExpiresAt: DateTime
  announcementUserDismissible: Boolean
  anyPinnableItems: Boolean!
  archivedAt: DateTime
  auditLog: OrganizationAuditEntryConnection!
  avatarUrl: URI!
  createdAt: DateTime!
  databaseId: Int
  description: String
  descriptionHTML: String
  domains: VerifiableDomainConnection
  email: String
  enterpriseOwners: OrganizationEnterpriseOwnerConnection!
  estimatedNextSponsorsPayoutInCents: Int!
  hasSponsorsListing: Boolean!
  id: ID!
  interactionAbility: RepositoryInteractionAbility
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue!
  ipAllowListEntries: IpAllowListEntryConnection!
  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue!
  isSponsoredBy: Boolean!
  isSponsoringViewer: Boolean!
  isVerified: Boolean!
  itemShowcase: ProfileItemShowcase!
  location: String
  login: String!
  mannequins: MannequinConnection!
  memberStatuses: UserStatusConnection!
  membersCanForkPrivateRepositories: Boolean!
  membersWithRole: OrganizationMemberConnection!
  monthlyEstimatedSponsorsIncomeInCents: Int!
  name: String
  newTeamResourcePath: URI!
  newTeamUrl: URI!
  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue!
  organizationBillingEmail: String
  packages: PackageConnection!
  pendingMembers: UserConnection!
  pinnableItems: PinnableItemConnection!
  pinnedItems: PinnableItemConnection!
  pinnedItemsRemaining: Int!
  project: Project
  projectV2: ProjectV2
  projects: ProjectConnection!
  projectsResourcePath: URI!
  projectsUrl: URI!
  projectsV2: ProjectV2Connection!
  recentProjects: ProjectV2Connection!
  repositories: RepositoryConnection!
  repository: Repository
  repositoryDiscussionComments: DiscussionCommentConnection!
  repositoryDiscussions: DiscussionConnection!
  repositoryMigrations: RepositoryMigrationConnection!
  requiresTwoFactorAuthentication: Boolean
  resourcePath: URI!
  ruleset: RepositoryRuleset
  rulesets: RepositoryRulesetConnection
  samlIdentityProvider: OrganizationIdentityProvider
  sponsoring: SponsorConnection!
  sponsors: SponsorConnection!
  sponsorsActivities: SponsorsActivityConnection!
  sponsorsListing: SponsorsListing
  sponsorshipForViewerAsSponsor: Sponsorship
  sponsorshipForViewerAsSponsorable: Sponsorship
  sponsorshipNewsletters: SponsorshipNewsletterConnection!
  sponsorshipsAsMaintainer: SponsorshipConnection!
  sponsorshipsAsSponsor: SponsorshipConnection!
  team: Team
  teams: TeamConnection!
  teamsResourcePath: URI!
  teamsUrl: URI!
  totalSponsorshipAmountAsSponsorInCents: Int
  twitterUsername: String
  updatedAt: DateTime!
  url: URI!
  viewerCanAdminister: Boolean!
  viewerCanChangePinnedItems: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanCreateRepositories: Boolean!
  viewerCanCreateTeams: Boolean!
  viewerCanSponsor: Boolean!
  viewerIsAMember: Boolean!
  viewerIsFollowing: Boolean!
  viewerIsSponsoring: Boolean!
  webCommitSignoffRequired: Boolean!
  websiteUrl: URI
}

"""
An audit entry in an organization audit log.
"""
union OrganizationAuditEntry = MembersCanDeleteReposClearAuditEntry | MembersCanDeleteReposDisableAuditEntry | MembersCanDeleteReposEnableAuditEntry | OauthApplicationCreateAuditEntry | OrgAddBillingManagerAuditEntry | OrgAddMemberAuditEntry | OrgBlockUserAuditEntry | OrgConfigDisableCollaboratorsOnlyAuditEntry | OrgConfigEnableCollaboratorsOnlyAuditEntry | OrgCreateAuditEntry | OrgDisableOauthAppRestrictionsAuditEntry | OrgDisableSamlAuditEntry | OrgDisableTwoFactorRequirementAuditEntry | OrgEnableOauthAppRestrictionsAuditEntry | OrgEnableSamlAuditEntry | OrgEnableTwoFactorRequirementAuditEntry | OrgInviteMemberAuditEntry | OrgInviteToBusinessAuditEntry | OrgOauthAppAccessApprovedAuditEntry | OrgOauthAppAccessBlockedAuditEntry | OrgOauthAppAccessDeniedAuditEntry | OrgOauthAppAccessRequestedAuditEntry | OrgOauthAppAccessUnblockedAuditEntry | OrgRemoveBillingManagerAuditEntry | OrgRemoveMemberAuditEntry | OrgRemoveOutsideCollaboratorAuditEntry | OrgRestoreMemberAuditEntry | OrgUnblockUserAuditEntry | OrgUpdateDefaultRepositoryPermissionAuditEntry | OrgUpdateMemberAuditEntry | OrgUpdateMemberRepositoryCreationPermissionAuditEntry | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | PrivateRepositoryForkingDisableAuditEntry | PrivateRepositoryForkingEnableAuditEntry | RepoAccessAuditEntry | RepoAddMemberAuditEntry | RepoAddTopicAuditEntry | RepoArchivedAuditEntry | RepoChangeMergeSettingAuditEntry | RepoConfigDisableAnonymousGitAccessAuditEntry | RepoConfigDisableCollaboratorsOnlyAuditEntry | RepoConfigDisableContributorsOnlyAuditEntry | RepoConfigDisableSockpuppetDisallowedAuditEntry | RepoConfigEnableAnonymousGitAccessAuditEntry | RepoConfigEnableCollaboratorsOnlyAuditEntry | RepoConfigEnableContributorsOnlyAuditEntry | RepoConfigEnableSockpuppetDisallowedAuditEntry | RepoConfigLockAnonymousGitAccessAuditEntry | RepoConfigUnlockAnonymousGitAccessAuditEntry | RepoCreateAuditEntry | RepoDestroyAuditEntry | RepoRemoveMemberAuditEntry | RepoRemoveTopicAuditEntry | RepositoryVisibilityChangeDisableAuditEntry | RepositoryVisibilityChangeEnableAuditEntry | TeamAddMemberAuditEntry | TeamAddRepositoryAuditEntry | TeamChangeParentTeamAuditEntry | TeamRemoveMemberAuditEntry | TeamRemoveRepositoryAuditEntry

"""
The connection type for OrganizationAuditEntry.
"""
type OrganizationAuditEntryConnection {
  edges: [OrganizationAuditEntryEdge]
  nodes: [OrganizationAuditEntry]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Metadata for an audit entry with action org.*
"""
interface OrganizationAuditEntryData {
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
}

"""
An edge in a connection.
"""
type OrganizationAuditEntryEdge {
  cursor: String!
  node: OrganizationAuditEntry
}

"""
A list of organizations managed by an enterprise.
"""
type OrganizationConnection {
  edges: [OrganizationEdge]
  nodes: [Organization]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  cursor: String!
  node: Organization
}

"""
The connection type for User.
"""
type OrganizationEnterpriseOwnerConnection {
  edges: [OrganizationEnterpriseOwnerEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An enterprise owner in the context of an organization that is part of the enterprise.
"""
type OrganizationEnterpriseOwnerEdge {
  cursor: String!
  node: User
  organizationRole: RoleInOrganization!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for
Organizations. Visible to (1) organization owners, (2) organization owners'
personal access tokens (classic) with read:org or admin:org scope, (3) GitHub
App with an installation token with read or write access to members.
"""
type OrganizationIdentityProvider implements Node {
  digestMethod: URI
  externalIdentities: ExternalIdentityConnection!
  id: ID!
  idpCertificate: X509Certificate
  issuer: String
  organization: Organization
  signatureMethod: URI
  ssoUrl: URI
}

"""
An Invitation for a user to an organization.
"""
type OrganizationInvitation implements Node {
  createdAt: DateTime!
  email: String
  id: ID!
  invitationSource: OrganizationInvitationSource!
  invitationType: OrganizationInvitationType!
  invitee: User
  inviter: User!
  organization: Organization!
  role: OrganizationInvitationRole!
}

"""
The connection type for OrganizationInvitation.
"""
type OrganizationInvitationConnection {
  edges: [OrganizationInvitationEdge]
  nodes: [OrganizationInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OrganizationInvitationEdge {
  cursor: String!
  node: OrganizationInvitation
}

"""
The possible organization invitation roles.
"""
enum OrganizationInvitationRole {
  ADMIN
  BILLING_MANAGER
  DIRECT_MEMBER
  REINSTATE
}

"""
The possible organization invitation sources.
"""
enum OrganizationInvitationSource {
  MEMBER
  SCIM
  UNKNOWN
}

"""
The possible organization invitation types.
"""
enum OrganizationInvitationType {
  EMAIL
  USER
}

"""
The connection type for User.
"""
type OrganizationMemberConnection {
  edges: [OrganizationMemberEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a user within an organization.
"""
type OrganizationMemberEdge {
  cursor: String!
  hasTwoFactorEnabled: Boolean
  node: User
  role: OrganizationMemberRole
}

"""
The possible roles within an organization for its members.
"""
enum OrganizationMemberRole {
  ADMIN
  MEMBER
}

"""
The possible values for the members can create repositories setting on an organization.
"""
enum OrganizationMembersCanCreateRepositoriesSettingValue {
  ALL
  DISABLED
  INTERNAL
  PRIVATE
}

"""
A GitHub Enterprise Importer (GEI) organization migration.
"""
type OrganizationMigration implements Node {
  createdAt: DateTime!
  databaseId: String
  failureReason: String
  id: ID!
  remainingRepositoriesCount: Int
  sourceOrgName: String!
  sourceOrgUrl: URI!
  state: OrganizationMigrationState!
  targetOrgName: String!
  totalRepositoriesCount: Int
}

"""
The Octoshift Organization migration state.
"""
enum OrganizationMigrationState {
  FAILED
  FAILED_VALIDATION
  IN_PROGRESS
  NOT_STARTED
  PENDING_VALIDATION
  POST_REPO_MIGRATION
  PRE_REPO_MIGRATION
  QUEUED
  REPO_MIGRATION
  SUCCEEDED
}

"""
Used for argument of CreateProjectV2 mutation.
"""
union OrganizationOrUser = Organization | User

"""
Ordering options for organization connections.
"""
input OrganizationOrder {
  direction: OrderDirection!
  field: OrganizationOrderField!
}

"""
Properties by which organization connections can be ordered.
"""
enum OrganizationOrderField {
  CREATED_AT
  LOGIN
}

"""
An organization teams hovercard context
"""
type OrganizationTeamsHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
  relevantTeams: TeamConnection!
  teamsResourcePath: URI!
  teamsUrl: URI!
  totalTeamCount: Int!
}

"""
An organization list hovercard context
"""
type OrganizationsHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
  relevantOrganizations: OrganizationConnection!
  totalOrganizationCount: Int!
}

"""
Information for an uploaded package.
"""
type Package implements Node {
  id: ID!
  latestVersion: PackageVersion
  name: String!
  packageType: PackageType!
  repository: Repository
  statistics: PackageStatistics
  version: PackageVersion
  versions: PackageVersionConnection!
}

"""
The connection type for Package.
"""
type PackageConnection {
  edges: [PackageEdge]
  nodes: [Package]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PackageEdge {
  cursor: String!
  node: Package
}

"""
A file in a package version.
"""
type PackageFile implements Node {
  id: ID!
  md5: String
  name: String!
  packageVersion: PackageVersion
  sha1: String
  sha256: String
  size: Int
  updatedAt: DateTime!
  url: URI
}

"""
The connection type for PackageFile.
"""
type PackageFileConnection {
  edges: [PackageFileEdge]
  nodes: [PackageFile]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PackageFileEdge {
  cursor: String!
  node: PackageFile
}

"""
Ways in which lists of package files can be ordered upon return.
"""
input PackageFileOrder {
  direction: OrderDirection
  field: PackageFileOrderField
}

"""
Properties by which package file connections can be ordered.
"""
enum PackageFileOrderField {
  CREATED_AT
}

"""
Ways in which lists of packages can be ordered upon return.
"""
input PackageOrder {
  direction: OrderDirection
  field: PackageOrderField
}

"""
Properties by which package connections can be ordered.
"""
enum PackageOrderField {
  CREATED_AT
}

"""
Represents an owner of a package.
"""
interface PackageOwner {
  id: ID!
  packages: PackageConnection!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type PackageStatistics {
  downloadsTotalCount: Int!
}

"""
A version tag contains the mapping between a tag name and a version.
"""
type PackageTag implements Node {
  id: ID!
  name: String!
  version: PackageVersion
}

"""
The possible types of a package.
"""
enum PackageType {
  DEBIAN
  DOCKER @deprecated(reason: "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC.")
  MAVEN @deprecated(reason: "MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC.")
  NPM @deprecated(reason: "NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC.")
  NUGET @deprecated(reason: "NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC.")
  PYPI
  RUBYGEMS @deprecated(reason: "RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC.")
}

"""
Information about a specific package version.
"""
type PackageVersion implements Node {
  files: PackageFileConnection!
  id: ID!
  package: Package
  platform: String
  preRelease: Boolean!
  readme: String
  release: Release
  statistics: PackageVersionStatistics
  summary: String
  version: String!
}

"""
The connection type for PackageVersion.
"""
type PackageVersionConnection {
  edges: [PackageVersionEdge]
  nodes: [PackageVersion]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PackageVersionEdge {
  cursor: String!
  node: PackageVersion
}

"""
Ways in which lists of package versions can be ordered upon return.
"""
input PackageVersionOrder {
  direction: OrderDirection
  field: PackageVersionOrderField
}

"""
Properties by which package version connections can be ordered.
"""
enum PackageVersionOrderField {
  CREATED_AT
}

"""
Represents a object that contains package version activity statistics such as downloads.
"""
type PackageVersionStatistics {
  downloadsTotalCount: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""
The possible types of patch statuses.
"""
enum PatchStatus {
  ADDED
  CHANGED
  COPIED
  DELETED
  MODIFIED
  RENAMED
}

"""
Types that can grant permissions on a repository to a user
"""
union PermissionGranter = Organization | Repository | Team

"""
A level of permission and source for a user's access to a repository.
"""
type PermissionSource {
  organization: Organization!
  permission: DefaultRepositoryPermissionField!
  source: PermissionGranter!
}

"""
Autogenerated input type of PinIssue
"""
input PinIssueInput {
  clientMutationId: String
  issueId: ID!@possibleTypes(concreteTypes: ("Issue"))
}

"""
Autogenerated return type of PinIssue
"""
type PinIssuePayload {
  clientMutationId: String
  issue: Issue
}

"""
Types that can be pinned to a profile page.
"""
union PinnableItem = Gist | Repository

"""
The connection type for PinnableItem.
"""
type PinnableItemConnection {
  edges: [PinnableItemEdge]
  nodes: [PinnableItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PinnableItemEdge {
  cursor: String!
  node: PinnableItem
}

"""
Represents items that can be pinned to a profile page or dashboard.
"""
enum PinnableItemType {
  GIST
  ISSUE
  ORGANIZATION
  PROJECT
  PULL_REQUEST
  REPOSITORY
  TEAM
  USER
}

"""
A Pinned Discussion is a discussion pinned to a repository's index page.
"""
type PinnedDiscussion implements Node & RepositoryNode {
  createdAt: DateTime!
  databaseId: Int
  discussion: Discussion!
  gradientStopColors: [String!]!
  id: ID!
  pattern: PinnedDiscussionPattern!
  pinnedBy: Actor!
  preconfiguredGradient: PinnedDiscussionGradient
  repository: Repository!
  updatedAt: DateTime!
}

"""
The connection type for PinnedDiscussion.
"""
type PinnedDiscussionConnection {
  edges: [PinnedDiscussionEdge]
  nodes: [PinnedDiscussion]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PinnedDiscussionEdge {
  cursor: String!
  node: PinnedDiscussion
}

"""
Preconfigured gradients that may be used to style discussions pinned within a repository.
"""
enum PinnedDiscussionGradient {
  BLUE_MINT
  BLUE_PURPLE
  PINK_BLUE
  PURPLE_CORAL
  RED_ORANGE
}

"""
Preconfigured background patterns that may be used to style discussions pinned within a repository.
"""
enum PinnedDiscussionPattern {
  CHEVRON_UP
  DOT
  DOT_FILL
  HEART_FILL
  PLUS
  ZAP
}

"""
Represents a 'pinned' event on a given issue or pull request.
"""
type PinnedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  issue: Issue!
}

"""
A Pinned Issue is a issue pinned to a repository's index page.
"""
type PinnedIssue implements Node {
  databaseId: Int
  fullDatabaseId: BigInt
  id: ID!
  issue: Issue!
  pinnedBy: Actor!
  repository: Repository!
}

"""
The connection type for PinnedIssue.
"""
type PinnedIssueConnection {
  edges: [PinnedIssueEdge]
  nodes: [PinnedIssue]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PinnedIssueEdge {
  cursor: String!
  node: PinnedIssue
}

"""
An ISO-8601 encoded UTC date string with millisecond precision.
"""
scalar PreciseDateTime 

"""
Audit log entry for a private_repository_forking.disable event.
"""
type PrivateRepositoryForkingDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a private_repository_forking.enable event.
"""
type PrivateRepositoryForkingEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own.
"""
type ProfileItemShowcase {
  hasPinnedItems: Boolean!
  items: PinnableItemConnection!
}

"""
Represents any entity on GitHub that has a profile page.
"""
interface ProfileOwner {
  anyPinnableItems: Boolean!
  email: String
  id: ID!
  itemShowcase: ProfileItemShowcase!
  location: String
  login: String!
  name: String
  pinnableItems: PinnableItemConnection!
  pinnedItems: PinnableItemConnection!
  pinnedItemsRemaining: Int!
  viewerCanChangePinnedItems: Boolean!
  websiteUrl: URI
}

"""
Projects manage issues, pull requests and notes within a project owner.
"""
type Project implements Closable & Node & Updatable {
  body: String
  bodyHTML: HTML!
  closed: Boolean!
  closedAt: DateTime
  columns: ProjectColumnConnection!
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  id: ID!
  name: String!
  number: Int!
  owner: ProjectOwner!
  pendingCards: ProjectCardConnection!
  progress: ProjectProgress!
  resourcePath: URI!
  state: ProjectState!
  updatedAt: DateTime!
  url: URI!
  viewerCanClose: Boolean!
  viewerCanReopen: Boolean!
  viewerCanUpdate: Boolean!
}

"""
A card in a project.
"""
type ProjectCard implements Node {
  column: ProjectColumn
  content: ProjectCardItem
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  id: ID!
  isArchived: Boolean!
  note: String
  project: Project!
  resourcePath: URI!
  state: ProjectCardState
  updatedAt: DateTime!
  url: URI!
}

"""
The possible archived states of a project card.
"""
enum ProjectCardArchivedState {
  ARCHIVED
  NOT_ARCHIVED
}

"""
The connection type for ProjectCard.
"""
type ProjectCardConnection {
  edges: [ProjectCardEdge]
  nodes: [ProjectCard]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectCardEdge {
  cursor: String!
  node: ProjectCard
}

"""
An issue or PR and its owning repository to be used in a project card.
"""
input ProjectCardImport {
  number: Int!
  repository: String!
}

"""
Types that can be inside Project Cards.
"""
union ProjectCardItem = Issue | PullRequest

"""
Various content states of a ProjectCard
"""
enum ProjectCardState {
  CONTENT_ONLY
  NOTE_ONLY
  REDACTED
}

"""
A column inside a project.
"""
type ProjectColumn implements Node {
  cards: ProjectCardConnection!
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  name: String!
  project: Project!
  purpose: ProjectColumnPurpose
  resourcePath: URI!
  updatedAt: DateTime!
  url: URI!
}

"""
The connection type for ProjectColumn.
"""
type ProjectColumnConnection {
  edges: [ProjectColumnEdge]
  nodes: [ProjectColumn]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectColumnEdge {
  cursor: String!
  node: ProjectColumn
}

"""
A project column and a list of its issues and PRs.
"""
input ProjectColumnImport {
  columnName: String!
  issues: [ProjectCardImport!]
  position: Int!
}

"""
The semantic purpose of the column - todo, in progress, or done.
"""
enum ProjectColumnPurpose {
  DONE
  IN_PROGRESS
  TODO
}

"""
A list of projects associated with the owner.
"""
type ProjectConnection {
  edges: [ProjectEdge]
  nodes: [Project]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectEdge {
  cursor: String!
  node: Project
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  CREATED_AT
  NAME
  UPDATED_AT
}

"""
Represents an owner of a Project.
"""
interface ProjectOwner {
  id: ID!
  project: Project
  projects: ProjectConnection!
  projectsResourcePath: URI!
  projectsUrl: URI!
  viewerCanCreateProjects: Boolean!
}

"""
Project progress stats.
"""
type ProjectProgress {
  doneCount: Int!
  donePercentage: Float!
  enabled: Boolean!
  inProgressCount: Int!
  inProgressPercentage: Float!
  todoCount: Int!
  todoPercentage: Float!
}

"""
State of the project; either 'open' or 'closed'
"""
enum ProjectState {
  CLOSED
  OPEN
}

"""
GitHub-provided templates for Projects
"""
enum ProjectTemplate {
  AUTOMATED_KANBAN_V2
  AUTOMATED_REVIEWS_KANBAN
  BASIC_KANBAN
  BUG_TRIAGE
}

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
type ProjectV2 implements Closable & Node & Updatable {
  closed: Boolean!
  closedAt: DateTime
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  field: ProjectV2FieldConfiguration
  fields: ProjectV2FieldConfigurationConnection!
  id: ID!
  items: ProjectV2ItemConnection!
  number: Int!
  owner: ProjectV2Owner!
  public: Boolean!
  readme: String
  repositories: RepositoryConnection!
  resourcePath: URI!
  shortDescription: String
  teams: TeamConnection!
  template: Boolean!
  title: String!
  updatedAt: DateTime!
  url: URI!
  view: ProjectV2View
  viewerCanClose: Boolean!
  viewerCanReopen: Boolean!
  viewerCanUpdate: Boolean!
  views: ProjectV2ViewConnection!
  workflow: ProjectV2Workflow
  workflows: ProjectV2WorkflowConnection!
}

"""
Possible collaborators for a project.
"""
union ProjectV2Actor = Team | User

"""
The connection type for ProjectV2Actor.
"""
type ProjectV2ActorConnection {
  edges: [ProjectV2ActorEdge]
  nodes: [ProjectV2Actor]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ActorEdge {
  cursor: String!
  node: ProjectV2Actor
}

"""
A collaborator to update on a project. Only one of the userId or teamId should be provided.
"""
input ProjectV2Collaborator {
  role: ProjectV2Roles!
  teamId: ID@possibleTypes(concreteTypes: ("Team"))
  userId: ID@possibleTypes(concreteTypes: ("User"))
}

"""
The connection type for ProjectV2.
"""
type ProjectV2Connection {
  edges: [ProjectV2Edge]
  nodes: [ProjectV2]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The type of a project field.
"""
enum ProjectV2CustomFieldType {
  DATE
  NUMBER
  SINGLE_SELECT
  TEXT
}

"""
An edge in a connection.
"""
type ProjectV2Edge {
  cursor: String!
  node: ProjectV2
}

"""
A field inside a project.
"""
type ProjectV2Field implements Node & ProjectV2FieldCommon {
  createdAt: DateTime!
  dataType: ProjectV2FieldType!
  databaseId: Int
  id: ID!
  name: String!
  project: ProjectV2!
  updatedAt: DateTime!
}

"""
Common fields across different project field types
"""
interface ProjectV2FieldCommon {
  createdAt: DateTime!
  dataType: ProjectV2FieldType!
  databaseId: Int
  id: ID!
  name: String!
  project: ProjectV2!
  updatedAt: DateTime!
}

"""
Configurations for project fields.
"""
union ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField

"""
The connection type for ProjectV2FieldConfiguration.
"""
type ProjectV2FieldConfigurationConnection {
  edges: [ProjectV2FieldConfigurationEdge]
  nodes: [ProjectV2FieldConfiguration]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldConfigurationEdge {
  cursor: String!
  node: ProjectV2FieldConfiguration
}

"""
The connection type for ProjectV2Field.
"""
type ProjectV2FieldConnection {
  edges: [ProjectV2FieldEdge]
  nodes: [ProjectV2Field]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2FieldEdge {
  cursor: String!
  node: ProjectV2Field
}

"""
Ordering options for project v2 field connections
"""
input ProjectV2FieldOrder {
  direction: OrderDirection!
  field: ProjectV2FieldOrderField!
}

"""
Properties by which project v2 field connections can be ordered.
"""
enum ProjectV2FieldOrderField {
  CREATED_AT
  NAME
  POSITION
}

"""
The type of a project field.
"""
enum ProjectV2FieldType {
  ASSIGNEES
  DATE
  ITERATION
  LABELS
  LINKED_PULL_REQUESTS
  MILESTONE
  NUMBER
  REPOSITORY
  REVIEWERS
  SINGLE_SELECT
  TEXT
  TITLE
  TRACKED_BY
  TRACKS
}

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
input ProjectV2FieldValue {
  date: Date
  iterationId: String
  number: Float
  singleSelectOptionId: String
  text: String
}

"""
Ways in which to filter lists of projects.
"""
input ProjectV2Filters {
  state: ProjectV2State
}

"""
An item within a Project.
"""
type ProjectV2Item implements Node {
  content: ProjectV2ItemContent
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  fieldValueByName: ProjectV2ItemFieldValue
  fieldValues: ProjectV2ItemFieldValueConnection!
  id: ID!
  isArchived: Boolean!
  project: ProjectV2!
  type: ProjectV2ItemType!
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Item.
"""
type ProjectV2ItemConnection {
  edges: [ProjectV2ItemEdge]
  nodes: [ProjectV2Item]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Types that can be inside Project Items.
"""
union ProjectV2ItemContent = DraftIssue | Issue | PullRequest

"""
An edge in a connection.
"""
type ProjectV2ItemEdge {
  cursor: String!
  node: ProjectV2Item
}

"""
The value of a date field in a Project item.
"""
type ProjectV2ItemFieldDateValue implements Node & ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  date: Date
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  updatedAt: DateTime!
}

"""
The value of an iteration field in a Project item.
"""
type ProjectV2ItemFieldIterationValue implements Node & ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  duration: Int!
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  iterationId: String!
  startDate: Date!
  title: String!
  titleHTML: String!
  updatedAt: DateTime!
}

"""
The value of the labels field in a Project item.
"""
type ProjectV2ItemFieldLabelValue {
  field: ProjectV2FieldConfiguration!
  labels: LabelConnection
}

"""
The value of a milestone field in a Project item.
"""
type ProjectV2ItemFieldMilestoneValue {
  field: ProjectV2FieldConfiguration!
  milestone: Milestone
}

"""
The value of a number field in a Project item.
"""
type ProjectV2ItemFieldNumberValue implements Node & ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  number: Float
  updatedAt: DateTime!
}

"""
The value of a pull request field in a Project item.
"""
type ProjectV2ItemFieldPullRequestValue {
  field: ProjectV2FieldConfiguration!
  pullRequests: PullRequestConnection
}

"""
The value of a repository field in a Project item.
"""
type ProjectV2ItemFieldRepositoryValue {
  field: ProjectV2FieldConfiguration!
  repository: Repository
}

"""
The value of a reviewers field in a Project item.
"""
type ProjectV2ItemFieldReviewerValue {
  field: ProjectV2FieldConfiguration!
  reviewers: RequestedReviewerConnection
}

"""
The value of a single select field in a Project item.
"""
type ProjectV2ItemFieldSingleSelectValue implements Node & ProjectV2ItemFieldValueCommon {
  color: ProjectV2SingleSelectFieldOptionColor!
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  description: String
  descriptionHTML: String
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  name: String
  nameHTML: String
  optionId: String
  updatedAt: DateTime!
}

"""
The value of a text field in a Project item.
"""
type ProjectV2ItemFieldTextValue implements Node & ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  text: String
  updatedAt: DateTime!
}

"""
The value of a user field in a Project item.
"""
type ProjectV2ItemFieldUserValue {
  field: ProjectV2FieldConfiguration!
  users: UserConnection
}

"""
Project field values
"""
union ProjectV2ItemFieldValue = ProjectV2ItemFieldDateValue | ProjectV2ItemFieldIterationValue | ProjectV2ItemFieldLabelValue | ProjectV2ItemFieldMilestoneValue | ProjectV2ItemFieldNumberValue | ProjectV2ItemFieldPullRequestValue | ProjectV2ItemFieldRepositoryValue | ProjectV2ItemFieldReviewerValue | ProjectV2ItemFieldSingleSelectValue | ProjectV2ItemFieldTextValue | ProjectV2ItemFieldUserValue

"""
Common fields across different project field value types
"""
interface ProjectV2ItemFieldValueCommon {
  createdAt: DateTime!
  creator: Actor
  databaseId: Int
  field: ProjectV2FieldConfiguration!
  id: ID!
  item: ProjectV2Item!
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2ItemFieldValue.
"""
type ProjectV2ItemFieldValueConnection {
  edges: [ProjectV2ItemFieldValueEdge]
  nodes: [ProjectV2ItemFieldValue]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ItemFieldValueEdge {
  cursor: String!
  node: ProjectV2ItemFieldValue
}

"""
Ordering options for project v2 item field value connections
"""
input ProjectV2ItemFieldValueOrder {
  direction: OrderDirection!
  field: ProjectV2ItemFieldValueOrderField!
}

"""
Properties by which project v2 item field value connections can be ordered.
"""
enum ProjectV2ItemFieldValueOrderField {
  POSITION
}

"""
Ordering options for project v2 item connections
"""
input ProjectV2ItemOrder {
  direction: OrderDirection!
  field: ProjectV2ItemOrderField!
}

"""
Properties by which project v2 item connections can be ordered.
"""
enum ProjectV2ItemOrderField {
  POSITION
}

"""
The type of a project item.
"""
enum ProjectV2ItemType {
  DRAFT_ISSUE
  ISSUE
  PULL_REQUEST
  REDACTED
}

"""
An iteration field inside a project.
"""
type ProjectV2IterationField implements Node & ProjectV2FieldCommon {
  configuration: ProjectV2IterationFieldConfiguration!
  createdAt: DateTime!
  dataType: ProjectV2FieldType!
  databaseId: Int
  id: ID!
  name: String!
  project: ProjectV2!
  updatedAt: DateTime!
}

"""
Iteration field configuration for a project.
"""
type ProjectV2IterationFieldConfiguration {
  completedIterations: [ProjectV2IterationFieldIteration!]!
  duration: Int!
  iterations: [ProjectV2IterationFieldIteration!]!
  startDay: Int!
}

"""
Iteration field iteration settings for a project.
"""
type ProjectV2IterationFieldIteration {
  duration: Int!
  id: String!
  startDate: Date!
  title: String!
  titleHTML: String!
}

"""
Ways in which lists of projects can be ordered upon return.
"""
input ProjectV2Order {
  direction: OrderDirection!
  field: ProjectV2OrderField!
}

"""
Properties by which projects can be ordered.
"""
enum ProjectV2OrderField {
  CREATED_AT
  NUMBER
  TITLE
  UPDATED_AT
}

"""
Represents an owner of a project (beta).
"""
interface ProjectV2Owner {
  id: ID!
  projectV2: ProjectV2
  projectsV2: ProjectV2Connection!
}

"""
Recent projects for the owner.
"""
interface ProjectV2Recent {
  recentProjects: ProjectV2Connection!
}

"""
The possible roles of a collaborator on a project.
"""
enum ProjectV2Roles {
  ADMIN
  NONE
  READER
  WRITER
}

"""
A single select field inside a project.
"""
type ProjectV2SingleSelectField implements Node & ProjectV2FieldCommon {
  createdAt: DateTime!
  dataType: ProjectV2FieldType!
  databaseId: Int
  id: ID!
  name: String!
  options: [ProjectV2SingleSelectFieldOption!]!
  project: ProjectV2!
  updatedAt: DateTime!
}

"""
Single select field option for a configuration for a project.
"""
type ProjectV2SingleSelectFieldOption {
  color: ProjectV2SingleSelectFieldOptionColor!
  description: String!
  descriptionHTML: String!
  id: String!
  name: String!
  nameHTML: String!
}

"""
The display color of a single-select field option.
"""
enum ProjectV2SingleSelectFieldOptionColor {
  BLUE
  GRAY
  GREEN
  ORANGE
  PINK
  PURPLE
  RED
  YELLOW
}

"""
Represents a single select field option
"""
input ProjectV2SingleSelectFieldOptionInput {
  color: ProjectV2SingleSelectFieldOptionColor!
  description: String!
  name: String!
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortBy {
  direction: OrderDirection!
  field: ProjectV2Field!
}

"""
The connection type for ProjectV2SortBy.
"""
type ProjectV2SortByConnection {
  edges: [ProjectV2SortByEdge]
  nodes: [ProjectV2SortBy]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByEdge {
  cursor: String!
  node: ProjectV2SortBy
}

"""
Represents a sort by field and direction.
"""
type ProjectV2SortByField {
  direction: OrderDirection!
  field: ProjectV2FieldConfiguration!
}

"""
The connection type for ProjectV2SortByField.
"""
type ProjectV2SortByFieldConnection {
  edges: [ProjectV2SortByFieldEdge]
  nodes: [ProjectV2SortByField]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2SortByFieldEdge {
  cursor: String!
  node: ProjectV2SortByField
}

"""
The possible states of a project v2.
"""
enum ProjectV2State {
  CLOSED
  OPEN
}

"""
A view within a ProjectV2.
"""
type ProjectV2View implements Node {
  createdAt: DateTime!
  databaseId: Int
  fields: ProjectV2FieldConfigurationConnection
  filter: String
  groupBy: ProjectV2FieldConnection@deprecated(reason: "The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.")
  groupByFields: ProjectV2FieldConfigurationConnection
  id: ID!
  layout: ProjectV2ViewLayout!
  name: String!
  number: Int!
  project: ProjectV2!
  sortBy: ProjectV2SortByConnection@deprecated(reason: "The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.")
  sortByFields: ProjectV2SortByFieldConnection
  updatedAt: DateTime!
  verticalGroupBy: ProjectV2FieldConnection@deprecated(reason: "The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.")
  verticalGroupByFields: ProjectV2FieldConfigurationConnection
  visibleFields: ProjectV2FieldConnection@deprecated(reason: "The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC.")
}

"""
The connection type for ProjectV2View.
"""
type ProjectV2ViewConnection {
  edges: [ProjectV2ViewEdge]
  nodes: [ProjectV2View]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2ViewEdge {
  cursor: String!
  node: ProjectV2View
}

"""
The layout of a project v2 view.
"""
enum ProjectV2ViewLayout {
  BOARD_LAYOUT
  ROADMAP_LAYOUT
  TABLE_LAYOUT
}

"""
Ordering options for project v2 view connections
"""
input ProjectV2ViewOrder {
  direction: OrderDirection!
  field: ProjectV2ViewOrderField!
}

"""
Properties by which project v2 view connections can be ordered.
"""
enum ProjectV2ViewOrderField {
  CREATED_AT
  NAME
  POSITION
}

"""
A workflow inside a project.
"""
type ProjectV2Workflow implements Node {
  createdAt: DateTime!
  databaseId: Int
  enabled: Boolean!
  id: ID!
  name: String!
  number: Int!
  project: ProjectV2!
  updatedAt: DateTime!
}

"""
The connection type for ProjectV2Workflow.
"""
type ProjectV2WorkflowConnection {
  edges: [ProjectV2WorkflowEdge]
  nodes: [ProjectV2Workflow]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectV2WorkflowEdge {
  cursor: String!
  node: ProjectV2Workflow
}

"""
Ordering options for project v2 workflows connections
"""
input ProjectV2WorkflowOrder {
  direction: OrderDirection!
  field: ProjectV2WorkflowsOrderField!
}

"""
Properties by which project workflows can be ordered.
"""
enum ProjectV2WorkflowsOrderField {
  CREATED_AT
  NAME
  NUMBER
  UPDATED_AT
}

"""
A user's public key.
"""
type PublicKey implements Node {
  accessedAt: DateTime
  createdAt: DateTime
  fingerprint: String!
  id: ID!
  isReadOnly: Boolean
  key: String!
  updatedAt: DateTime
}

"""
The connection type for PublicKey.
"""
type PublicKeyConnection {
  edges: [PublicKeyEdge]
  nodes: [PublicKey]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PublicKeyEdge {
  cursor: String!
  node: PublicKey
}

"""
Autogenerated input type of PublishSponsorsTier
"""
input PublishSponsorsTierInput {
  clientMutationId: String
  tierId: ID!@possibleTypes(concreteTypes: ("SponsorsTier"))
}

"""
Autogenerated return type of PublishSponsorsTier
"""
type PublishSponsorsTierPayload {
  clientMutationId: String
  sponsorsTier: SponsorsTier
}

"""
A repository pull request.
"""
type PullRequest implements Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  activeLockReason: LockReason
  additions: Int!
  assignees: UserConnection!
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  autoMergeRequest: AutoMergeRequest
  baseRef: Ref
  baseRefName: String!
  baseRefOid: GitObjectID!
  baseRepository: Repository
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  canBeRebased: Boolean!@preview(toggledBy: "merge-info-preview")
  changedFiles: Int!
  checksResourcePath: URI!
  checksUrl: URI!
  closed: Boolean!
  closedAt: DateTime
  closingIssuesReferences: IssueConnection
  comments: IssueCommentConnection!
  commits: PullRequestCommitConnection!
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  deletions: Int!
  editor: Actor
  files: PullRequestChangedFileConnection
  headRef: Ref
  headRefName: String!
  headRefOid: GitObjectID!
  headRepository: Repository
  headRepositoryOwner: RepositoryOwner
  hovercard: Hovercard!
  id: ID!
  includesCreatedEdit: Boolean!
  isCrossRepository: Boolean!
  isDraft: Boolean!
  isReadByViewer: Boolean
  labels: LabelConnection
  lastEditedAt: DateTime
  latestOpinionatedReviews: PullRequestReviewConnection
  latestReviews: PullRequestReviewConnection
  locked: Boolean!
  maintainerCanModify: Boolean!
  mergeCommit: Commit
  mergeQueueEntry: MergeQueueEntry
  mergeStateStatus: MergeStateStatus!@preview(toggledBy: "merge-info-preview")
  mergeable: MergeableState!
  merged: Boolean!
  mergedAt: DateTime
  mergedBy: Actor
  milestone: Milestone
  number: Int!
  participants: UserConnection!
  permalink: URI!
  potentialMergeCommit: Commit
  projectCards: ProjectCardConnection!
  projectItems: ProjectV2ItemConnection!
  projectV2: ProjectV2
  projectsV2: ProjectV2Connection!
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  revertResourcePath: URI!
  revertUrl: URI!
  reviewDecision: PullRequestReviewDecision
  reviewRequests: ReviewRequestConnection
  reviewThreads: PullRequestReviewThreadConnection!
  reviews: PullRequestReviewConnection
  state: PullRequestState!
  suggestedReviewers: [SuggestedReviewer]!
  timeline: PullRequestTimelineConnection!@deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")
  timelineItems: PullRequestTimelineItemsConnection!
  title: String!
  titleHTML: HTML!
  totalCommentsCount: Int
  updatedAt: DateTime!
  url: URI!
  userContentEdits: UserContentEditConnection
  viewerCanApplySuggestion: Boolean!
  viewerCanClose: Boolean!
  viewerCanDeleteHeadRef: Boolean!
  viewerCanDisableAutoMerge: Boolean!
  viewerCanEditFiles: Boolean!
  viewerCanEnableAutoMerge: Boolean!
  viewerCanMergeAsAdmin: Boolean!
  viewerCanReact: Boolean!
  viewerCanReopen: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCanUpdateBranch: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerLatestReview: PullRequestReview
  viewerLatestReviewRequest: ReviewRequest
  viewerMergeBodyText: String!
  viewerMergeHeadlineText: String!
  viewerSubscription: SubscriptionState
}

"""
The possible methods for updating a pull request's head branch with the base branch.
"""
enum PullRequestBranchUpdateMethod {
  MERGE
  REBASE
}

"""
A file changed in a pull request.
"""
type PullRequestChangedFile {
  additions: Int!
  changeType: PatchStatus!
  deletions: Int!
  path: String!
  viewerViewedState: FileViewedState!
}

"""
The connection type for PullRequestChangedFile.
"""
type PullRequestChangedFileConnection {
  edges: [PullRequestChangedFileEdge]
  nodes: [PullRequestChangedFile]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestChangedFileEdge {
  cursor: String!
  node: PullRequestChangedFile
}

"""
Represents a Git commit part of a pull request.
"""
type PullRequestCommit implements Node & UniformResourceLocatable {
  commit: Commit!
  id: ID!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
}

"""
Represents a commit comment thread part of a pull request.
"""
type PullRequestCommitCommentThread implements Node & RepositoryNode {
  comments: CommitCommentConnection!
  commit: Commit!
  id: ID!
  path: String
  position: Int
  pullRequest: PullRequest!
  repository: Repository!
}

"""
The connection type for PullRequestCommit.
"""
type PullRequestCommitConnection {
  edges: [PullRequestCommitEdge]
  nodes: [PullRequestCommit]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestCommitEdge {
  cursor: String!
  node: PullRequestCommit
}

"""
The connection type for PullRequest.
"""
type PullRequestConnection {
  edges: [PullRequestEdge]
  nodes: [PullRequest]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
This aggregates pull requests opened by a user within one repository.
"""
type PullRequestContributionsByRepository {
  contributions: CreatedPullRequestContributionConnection!
  repository: Repository!
}

"""
An edge in a connection.
"""
type PullRequestEdge {
  cursor: String!
  node: PullRequest
}

"""
Represents available types of methods to use when merging a pull request.
"""
enum PullRequestMergeMethod {
  MERGE
  REBASE
  SQUASH
}

"""
Ways in which lists of issues can be ordered upon return.
"""
input PullRequestOrder {
  direction: OrderDirection!
  field: PullRequestOrderField!
}

"""
Properties by which pull_requests connections can be ordered.
"""
enum PullRequestOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
type PullRequestParameters {
  dismissStaleReviewsOnPush: Boolean!
  requireCodeOwnerReview: Boolean!
  requireLastPushApproval: Boolean!
  requiredApprovingReviewCount: Int!
  requiredReviewThreadResolution: Boolean!
}

"""
Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
"""
input PullRequestParametersInput {
  dismissStaleReviewsOnPush: Boolean!
  requireCodeOwnerReview: Boolean!
  requireLastPushApproval: Boolean!
  requiredApprovingReviewCount: Int!
  requiredReviewThreadResolution: Boolean!
}

"""
A review object for a given pull request.
"""
type PullRequestReview implements Comment & Deletable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  authorCanPushToRepository: Boolean!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  comments: PullRequestReviewCommentConnection!
  commit: Commit
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: DateTime
  onBehalfOf: TeamConnection!
  publishedAt: DateTime
  pullRequest: PullRequest!
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  repository: Repository!
  resourcePath: URI!
  state: PullRequestReviewState!
  submittedAt: DateTime
  updatedAt: DateTime!
  url: URI!
  userContentEdits: UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

"""
A review comment associated with a given repository pull request.
"""
type PullRequestReviewComment implements Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  commit: Commit
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  diffHunk: String!
  draftedAt: DateTime!
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: DateTime
  line: Int
  minimizedReason: String
  originalCommit: Commit
  originalLine: Int
  originalPosition: Int!@deprecated(reason: "We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.")
  originalStartLine: Int
  outdated: Boolean!
  path: String!
  position: Int@deprecated(reason: "We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC.")
  publishedAt: DateTime
  pullRequest: PullRequest!
  pullRequestReview: PullRequestReview
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  replyTo: PullRequestReviewComment
  repository: Repository!
  resourcePath: URI!
  startLine: Int
  state: PullRequestReviewCommentState!
  subjectType: PullRequestReviewThreadSubjectType!
  updatedAt: DateTime!
  url: URI!
  userContentEdits: UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

"""
The connection type for PullRequestReviewComment.
"""
type PullRequestReviewCommentConnection {
  edges: [PullRequestReviewCommentEdge]
  nodes: [PullRequestReviewComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestReviewCommentEdge {
  cursor: String!
  node: PullRequestReviewComment
}

"""
The possible states of a pull request review comment.
"""
enum PullRequestReviewCommentState {
  PENDING
  SUBMITTED
}

"""
The connection type for PullRequestReview.
"""
type PullRequestReviewConnection {
  edges: [PullRequestReviewEdge]
  nodes: [PullRequestReview]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
This aggregates pull request reviews made by a user within one repository.
"""
type PullRequestReviewContributionsByRepository {
  contributions: CreatedPullRequestReviewContributionConnection!
  repository: Repository!
}

"""
The review status of a pull request.
"""
enum PullRequestReviewDecision {
  APPROVED
  CHANGES_REQUESTED
  REVIEW_REQUIRED
}

"""
An edge in a connection.
"""
type PullRequestReviewEdge {
  cursor: String!
  node: PullRequestReview
}

"""
The possible events to perform on a pull request review.
"""
enum PullRequestReviewEvent {
  APPROVE
  COMMENT
  DISMISS
  REQUEST_CHANGES
}

"""
The possible states of a pull request review.
"""
enum PullRequestReviewState {
  APPROVED
  CHANGES_REQUESTED
  COMMENTED
  DISMISSED
  PENDING
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestReviewThread implements Node {
  comments: PullRequestReviewCommentConnection!
  diffSide: DiffSide!
  id: ID!
  isCollapsed: Boolean!
  isOutdated: Boolean!
  isResolved: Boolean!
  line: Int
  originalLine: Int
  originalStartLine: Int
  path: String!
  pullRequest: PullRequest!
  repository: Repository!
  resolvedBy: User
  startDiffSide: DiffSide
  startLine: Int
  subjectType: PullRequestReviewThreadSubjectType!
  viewerCanReply: Boolean!
  viewerCanResolve: Boolean!
  viewerCanUnresolve: Boolean!
}

"""
Review comment threads for a pull request review.
"""
type PullRequestReviewThreadConnection {
  edges: [PullRequestReviewThreadEdge]
  nodes: [PullRequestReviewThread]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestReviewThreadEdge {
  cursor: String!
  node: PullRequestReviewThread
}

"""
The possible subject types of a pull request review comment.
"""
enum PullRequestReviewThreadSubjectType {
  FILE
  LINE
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type PullRequestRevisionMarker {
  createdAt: DateTime!
  lastSeenCommit: Commit!
  pullRequest: PullRequest!
}

"""
The possible states of a pull request.
"""
enum PullRequestState {
  CLOSED
  MERGED
  OPEN
}

"""
A repository pull request template.
"""
type PullRequestTemplate {
  body: String
  filename: String
  repository: Repository!
}

"""
A threaded list of comments for a given pull request.
"""
type PullRequestThread implements Node {
  comments: PullRequestReviewCommentConnection!
  diffSide: DiffSide!
  id: ID!
  isCollapsed: Boolean!
  isOutdated: Boolean!
  isResolved: Boolean!
  line: Int
  path: String!
  pullRequest: PullRequest!
  repository: Repository!
  resolvedBy: User
  startDiffSide: DiffSide
  startLine: Int
  subjectType: PullRequestReviewThreadSubjectType!
  viewerCanReply: Boolean!
  viewerCanResolve: Boolean!
  viewerCanUnresolve: Boolean!
}

"""
The connection type for PullRequestTimelineItem.
"""
type PullRequestTimelineConnection {
  edges: [PullRequestTimelineItemEdge]
  nodes: [PullRequestTimelineItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItem = AssignedEvent | BaseRefDeletedEvent | BaseRefForcePushedEvent | ClosedEvent | Commit | CommitCommentThread | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MergedEvent | MilestonedEvent | PullRequestReview | PullRequestReviewComment | PullRequestReviewThread | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent

"""
An edge in a connection.
"""
type PullRequestTimelineItemEdge {
  cursor: String!
  node: PullRequestTimelineItem
}

"""
An item in a pull request timeline
"""
union PullRequestTimelineItems = AddedToMergeQueueEvent | AddedToProjectEvent | AssignedEvent | AutoMergeDisabledEvent | AutoMergeEnabledEvent | AutoRebaseEnabledEvent | AutoSquashEnabledEvent | AutomaticBaseChangeFailedEvent | AutomaticBaseChangeSucceededEvent | BaseRefChangedEvent | BaseRefDeletedEvent | BaseRefForcePushedEvent | ClosedEvent | CommentDeletedEvent | ConnectedEvent | ConvertToDraftEvent | ConvertedNoteToIssueEvent | ConvertedToDiscussionEvent | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | DisconnectedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MergedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | PullRequestCommit | PullRequestCommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestRevisionMarker | ReadyForReviewEvent | ReferencedEvent | RemovedFromMergeQueueEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnmarkedAsDuplicateEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent

"""
The connection type for PullRequestTimelineItems.
"""
type PullRequestTimelineItemsConnection {
  edges: [PullRequestTimelineItemsEdge]
  filteredCount: Int!
  nodes: [PullRequestTimelineItems]
  pageCount: Int!
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: DateTime!
}

"""
An edge in a connection.
"""
type PullRequestTimelineItemsEdge {
  cursor: String!
  node: PullRequestTimelineItems
}

"""
The possible item types found in a timeline.
"""
enum PullRequestTimelineItemsItemType {
  ADDED_TO_MERGE_QUEUE_EVENT
  ADDED_TO_PROJECT_EVENT
  ASSIGNED_EVENT
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT
  AUTO_MERGE_DISABLED_EVENT
  AUTO_MERGE_ENABLED_EVENT
  AUTO_REBASE_ENABLED_EVENT
  AUTO_SQUASH_ENABLED_EVENT
  BASE_REF_CHANGED_EVENT
  BASE_REF_DELETED_EVENT
  BASE_REF_FORCE_PUSHED_EVENT
  CLOSED_EVENT
  COMMENT_DELETED_EVENT
  CONNECTED_EVENT
  CONVERTED_NOTE_TO_ISSUE_EVENT
  CONVERTED_TO_DISCUSSION_EVENT
  CONVERT_TO_DRAFT_EVENT
  CROSS_REFERENCED_EVENT
  DEMILESTONED_EVENT
  DEPLOYED_EVENT
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
  DISCONNECTED_EVENT
  HEAD_REF_DELETED_EVENT
  HEAD_REF_FORCE_PUSHED_EVENT
  HEAD_REF_RESTORED_EVENT
  ISSUE_COMMENT
  LABELED_EVENT
  LOCKED_EVENT
  MARKED_AS_DUPLICATE_EVENT
  MENTIONED_EVENT
  MERGED_EVENT
  MILESTONED_EVENT
  MOVED_COLUMNS_IN_PROJECT_EVENT
  PINNED_EVENT
  PULL_REQUEST_COMMIT
  PULL_REQUEST_COMMIT_COMMENT_THREAD
  PULL_REQUEST_REVIEW
  PULL_REQUEST_REVIEW_THREAD
  PULL_REQUEST_REVISION_MARKER
  READY_FOR_REVIEW_EVENT
  REFERENCED_EVENT
  REMOVED_FROM_MERGE_QUEUE_EVENT
  REMOVED_FROM_PROJECT_EVENT
  RENAMED_TITLE_EVENT
  REOPENED_EVENT
  REVIEW_DISMISSED_EVENT
  REVIEW_REQUESTED_EVENT
  REVIEW_REQUEST_REMOVED_EVENT
  SUBSCRIBED_EVENT
  TRANSFERRED_EVENT
  UNASSIGNED_EVENT
  UNLABELED_EVENT
  UNLOCKED_EVENT
  UNMARKED_AS_DUPLICATE_EVENT
  UNPINNED_EVENT
  UNSUBSCRIBED_EVENT
  USER_BLOCKED_EVENT
}

"""
The possible target states when updating a pull request.
"""
enum PullRequestUpdateState {
  CLOSED
  OPEN
}

"""
A Git push.
"""
type Push implements Node {
  id: ID!
  nextSha: GitObjectID
  permalink: URI!
  previousSha: GitObjectID
  pusher: Actor!
  repository: Repository!
}

"""
A team, user, or app who has the ability to push to a protected branch.
"""
type PushAllowance implements Node {
  actor: PushAllowanceActor
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

"""
Types that can be an actor.
"""
union PushAllowanceActor = App | Team | User

"""
The connection type for PushAllowance.
"""
type PushAllowanceConnection {
  edges: [PushAllowanceEdge]
  nodes: [PushAllowance]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PushAllowanceEdge {
  cursor: String!
  node: PushAllowance
}

"""
The query root of GitHub's GraphQL interface.
"""
type Query {
  codeOfConduct: CodeOfConduct
  codesOfConduct: [CodeOfConduct]
  enterprise: Enterprise
  enterpriseAdministratorInvitation: EnterpriseAdministratorInvitation
  enterpriseAdministratorInvitationByToken: EnterpriseAdministratorInvitation
  license: License
  licenses: [License]!
  marketplaceCategories: [MarketplaceCategory!]!
  marketplaceCategory: MarketplaceCategory
  marketplaceListing: MarketplaceListing
  marketplaceListings: MarketplaceListingConnection!
  meta: GitHubMetadata!
  node: Node
  nodes: [Node]!
  organization: Organization
  rateLimit: RateLimit
  relay: Query!
  repository: Repository
  repositoryOwner: RepositoryOwner
  resource: UniformResourceLocatable
  search: SearchResultItemConnection!
  securityAdvisories: SecurityAdvisoryConnection!
  securityAdvisory: SecurityAdvisory
  securityVulnerabilities: SecurityVulnerabilityConnection!
  sponsorables: SponsorableItemConnection!
  topic: Topic
  user: User
  viewer: User!
}

"""
Represents the client's rate limit.
"""
type RateLimit {
  cost: Int!
  limit: Int!
  nodeCount: Int!
  remaining: Int!
  resetAt: DateTime!
  used: Int!
}

"""
Represents a subject that can be reacted on.
"""
interface Reactable {
  databaseId: Int
  id: ID!
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  viewerCanReact: Boolean!
}

"""
The connection type for User.
"""
type ReactingUserConnection {
  edges: [ReactingUserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a user that's made a reaction.
"""
type ReactingUserEdge {
  cursor: String!
  node: User!
  reactedAt: DateTime!
}

"""
An emoji reaction to a particular piece of content.
"""
type Reaction implements Node {
  content: ReactionContent!
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  reactable: Reactable!
  user: User
}

"""
A list of reactions that have been left on the subject.
"""
type ReactionConnection {
  edges: [ReactionEdge]
  nodes: [Reaction]
  pageInfo: PageInfo!
  totalCount: Int!
  viewerHasReacted: Boolean!
}

"""
Emojis that can be attached to Issues, Pull Requests and Comments.
"""
enum ReactionContent {
  CONFUSED
  EYES
  HEART
  HOORAY
  LAUGH
  ROCKET
  THUMBS_DOWN
  THUMBS_UP
}

"""
An edge in a connection.
"""
type ReactionEdge {
  cursor: String!
  node: Reaction
}

"""
A group of emoji reactions to a particular piece of content.
"""
type ReactionGroup {
  content: ReactionContent!
  createdAt: DateTime
  reactors: ReactorConnection!
  subject: Reactable!
  users: ReactingUserConnection!@deprecated(reason: "Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.")
  viewerHasReacted: Boolean!
}

"""
Ways in which lists of reactions can be ordered upon return.
"""
input ReactionOrder {
  direction: OrderDirection!
  field: ReactionOrderField!
}

"""
A list of fields that reactions can be ordered by.
"""
enum ReactionOrderField {
  CREATED_AT
}

"""
Types that can be assigned to reactions.
"""
union Reactor = Bot | Mannequin | Organization | User

"""
The connection type for Reactor.
"""
type ReactorConnection {
  edges: [ReactorEdge]
  nodes: [Reactor]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents an author of a reaction.
"""
type ReactorEdge {
  cursor: String!
  node: Reactor!
  reactedAt: DateTime!
}

"""
Represents a 'ready_for_review' event on a given pull request.
"""
type ReadyForReviewEvent implements Node & UniformResourceLocatable {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  resourcePath: URI!
  url: URI!
}

"""
Represents a Git reference.
"""
type Ref implements Node {
  associatedPullRequests: PullRequestConnection!
  branchProtectionRule: BranchProtectionRule
  compare: Comparison
  id: ID!
  name: String!
  prefix: String!
  refUpdateRule: RefUpdateRule
  repository: Repository!
  target: GitObject
}

"""
The connection type for Ref.
"""
type RefConnection {
  edges: [RefEdge]
  nodes: [Ref]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RefEdge {
  cursor: String!
  node: Ref
}

"""
Parameters to be used for the ref_name condition
"""
type RefNameConditionTarget {
  exclude: [String!]!
  include: [String!]!
}

"""
Parameters to be used for the ref_name condition
"""
input RefNameConditionTargetInput {
  exclude: [String!]!
  include: [String!]!
}

"""
Ways in which lists of git refs can be ordered upon return.
"""
input RefOrder {
  direction: OrderDirection!
  field: RefOrderField!
}

"""
Properties by which ref connections can be ordered.
"""
enum RefOrderField {
  ALPHABETICAL
  TAG_COMMIT_DATE
}

"""
A ref update
"""
input RefUpdate @preview(toggledBy: "update-refs-preview") {
  afterOid: GitObjectID!
  beforeOid: GitObjectID
  force: Boolean = false
  name: GitRefname!
}

"""
A ref update rules for a viewer.
"""
type RefUpdateRule {
  allowsDeletions: Boolean!
  allowsForcePushes: Boolean!
  blocksCreations: Boolean!
  pattern: String!
  requiredApprovingReviewCount: Int
  requiredStatusCheckContexts: [String]
  requiresCodeOwnerReviews: Boolean!
  requiresConversationResolution: Boolean!
  requiresLinearHistory: Boolean!
  requiresSignatures: Boolean!
  viewerAllowedToDismissReviews: Boolean!
  viewerCanPush: Boolean!
}

"""
Represents a 'referenced' event on a given `ReferencedSubject`.
"""
type ReferencedEvent implements Node {
  actor: Actor
  commit: Commit
  commitRepository: Repository!
  createdAt: DateTime!
  id: ID!
  isCrossRepository: Boolean!
  isDirectReference: Boolean!
  subject: ReferencedSubject!
}

"""
Any referencable object
"""
union ReferencedSubject = Issue | PullRequest

"""
Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
input RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
}

"""
Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  clientMutationId: String
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of RegenerateVerifiableDomainToken
"""
input RegenerateVerifiableDomainTokenInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("VerifiableDomain"))
}

"""
Autogenerated return type of RegenerateVerifiableDomainToken
"""
type RegenerateVerifiableDomainTokenPayload {
  clientMutationId: String
  verificationToken: String
}

"""
Autogenerated input type of RejectDeployments
"""
input RejectDeploymentsInput {
  clientMutationId: String
  comment: String = ""
  environmentIds: [ID!]!
  workflowRunId: ID!@possibleTypes(concreteTypes: ("WorkflowRun"))
}

"""
Autogenerated return type of RejectDeployments
"""
type RejectDeploymentsPayload {
  clientMutationId: String
  deployments: [Deployment!]
}

"""
A release contains the content for a release.
"""
type Release implements Node & Reactable & UniformResourceLocatable {
  author: User
  createdAt: DateTime!
  databaseId: Int
  description: String
  descriptionHTML: HTML
  id: ID!
  isDraft: Boolean!
  isLatest: Boolean!
  isPrerelease: Boolean!
  mentions: UserConnection
  name: String
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  releaseAssets: ReleaseAssetConnection!
  repository: Repository!
  resourcePath: URI!
  shortDescriptionHTML: HTML
  tag: Ref
  tagCommit: Commit
  tagName: String!
  updatedAt: DateTime!
  url: URI!
  viewerCanReact: Boolean!
}

"""
A release asset contains the content for a release asset.
"""
type ReleaseAsset implements Node {
  contentType: String!
  createdAt: DateTime!
  downloadCount: Int!
  downloadUrl: URI!
  id: ID!
  name: String!
  release: Release
  size: Int!
  updatedAt: DateTime!
  uploadedBy: User!
  url: URI!
}

"""
The connection type for ReleaseAsset.
"""
type ReleaseAssetConnection {
  edges: [ReleaseAssetEdge]
  nodes: [ReleaseAsset]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReleaseAssetEdge {
  cursor: String!
  node: ReleaseAsset
}

"""
The connection type for Release.
"""
type ReleaseConnection {
  edges: [ReleaseEdge]
  nodes: [Release]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReleaseEdge {
  cursor: String!
  node: Release
}

"""
Ways in which lists of releases can be ordered upon return.
"""
input ReleaseOrder {
  direction: OrderDirection!
  field: ReleaseOrderField!
}

"""
Properties by which release connections can be ordered.
"""
enum ReleaseOrderField {
  CREATED_AT
  NAME
}

"""
Autogenerated input type of RemoveAssigneesFromAssignable
"""
input RemoveAssigneesFromAssignableInput {
  assignableId: ID!@possibleTypes(concreteTypes: ("Issue","PullRequest"), abstractType: "Assignable")
  assigneeIds: [ID!]!@possibleTypes(concreteTypes: ("User"))
  clientMutationId: String
}

"""
Autogenerated return type of RemoveAssigneesFromAssignable
"""
type RemoveAssigneesFromAssignablePayload {
  assignable: Assignable
  clientMutationId: String
}

"""
Autogenerated input type of RemoveEnterpriseAdmin
"""
input RemoveEnterpriseAdminInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  login: String!
}

"""
Autogenerated return type of RemoveEnterpriseAdmin
"""
type RemoveEnterpriseAdminPayload {
  admin: User
  clientMutationId: String
  enterprise: Enterprise
  message: String
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseIdentityProvider
"""
input RemoveEnterpriseIdentityProviderInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
}

"""
Autogenerated return type of RemoveEnterpriseIdentityProvider
"""
type RemoveEnterpriseIdentityProviderPayload {
  clientMutationId: String
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of RemoveEnterpriseMember
"""
input RemoveEnterpriseMemberInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  userId: ID!@possibleTypes(concreteTypes: ("User"))
}

"""
Autogenerated return type of RemoveEnterpriseMember
"""
type RemoveEnterpriseMemberPayload {
  clientMutationId: String
  enterprise: Enterprise
  user: User
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
input RemoveEnterpriseOrganizationInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of RemoveEnterpriseOrganization
"""
type RemoveEnterpriseOrganizationPayload {
  clientMutationId: String
  enterprise: Enterprise
  organization: Organization
  viewer: User
}

"""
Autogenerated input type of RemoveEnterpriseSupportEntitlement
"""
input RemoveEnterpriseSupportEntitlementInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  login: String!
}

"""
Autogenerated return type of RemoveEnterpriseSupportEntitlement
"""
type RemoveEnterpriseSupportEntitlementPayload {
  clientMutationId: String
  message: String
}

"""
Autogenerated input type of RemoveLabelsFromLabelable
"""
input RemoveLabelsFromLabelableInput {
  clientMutationId: String
  labelIds: [ID!]!@possibleTypes(concreteTypes: ("Label"))
  labelableId: ID!@possibleTypes(concreteTypes: ("Discussion","Issue","PullRequest"), abstractType: "Labelable")
}

"""
Autogenerated return type of RemoveLabelsFromLabelable
"""
type RemoveLabelsFromLabelablePayload {
  clientMutationId: String
  labelable: Labelable
}

"""
Autogenerated input type of RemoveOutsideCollaborator
"""
input RemoveOutsideCollaboratorInput {
  clientMutationId: String
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
  userId: ID!@possibleTypes(concreteTypes: ("User"))
}

"""
Autogenerated return type of RemoveOutsideCollaborator
"""
type RemoveOutsideCollaboratorPayload {
  clientMutationId: String
  removedUser: User
}

"""
Autogenerated input type of RemoveReaction
"""
input RemoveReactionInput {
  clientMutationId: String
  content: ReactionContent!
  subjectId: ID!@possibleTypes(concreteTypes: ("CommitComment","Discussion","DiscussionComment","Issue","IssueComment","PullRequest","PullRequestReview","PullRequestReviewComment","Release","TeamDiscussion","TeamDiscussionComment"), abstractType: "Reactable")
}

"""
Autogenerated return type of RemoveReaction
"""
type RemoveReactionPayload {
  clientMutationId: String
  reaction: Reaction
  reactionGroups: [ReactionGroup!]
  subject: Reactable
}

"""
Autogenerated input type of RemoveStar
"""
input RemoveStarInput {
  clientMutationId: String
  starrableId: ID!@possibleTypes(concreteTypes: ("Gist","Repository","Topic"), abstractType: "Starrable")
}

"""
Autogenerated return type of RemoveStar
"""
type RemoveStarPayload {
  clientMutationId: String
  starrable: Starrable
}

"""
Autogenerated input type of RemoveUpvote
"""
input RemoveUpvoteInput {
  clientMutationId: String
  subjectId: ID!@possibleTypes(concreteTypes: ("Discussion","DiscussionComment"), abstractType: "Votable")
}

"""
Autogenerated return type of RemoveUpvote
"""
type RemoveUpvotePayload {
  clientMutationId: String
  subject: Votable
}

"""
Represents a 'removed_from_merge_queue' event on a given pull request.
"""
type RemovedFromMergeQueueEvent implements Node {
  actor: Actor
  beforeCommit: Commit
  createdAt: DateTime!
  enqueuer: User
  id: ID!
  mergeQueue: MergeQueue
  pullRequest: PullRequest
  reason: String
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  project: Project@preview(toggledBy: "starfox-preview")
  projectColumnName: String!@preview(toggledBy: "starfox-preview")
}

"""
Represents a 'renamed' event on a given issue or pull request
"""
type RenamedTitleEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  currentTitle: String!
  id: ID!
  previousTitle: String!
  subject: RenamedTitleSubject!
}

"""
An object which has a renamable title
"""
union RenamedTitleSubject = Issue | PullRequest

"""
Autogenerated input type of ReopenDiscussion
"""
input ReopenDiscussionInput {
  clientMutationId: String
  discussionId: ID!@possibleTypes(concreteTypes: ("Discussion"))
}

"""
Autogenerated return type of ReopenDiscussion
"""
type ReopenDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

"""
Autogenerated input type of ReopenIssue
"""
input ReopenIssueInput {
  clientMutationId: String
  issueId: ID!@possibleTypes(concreteTypes: ("Issue"))
}

"""
Autogenerated return type of ReopenIssue
"""
type ReopenIssuePayload {
  clientMutationId: String
  issue: Issue
}

"""
Autogenerated input type of ReopenPullRequest
"""
input ReopenPullRequestInput {
  clientMutationId: String
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of ReopenPullRequest
"""
type ReopenPullRequestPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Represents a 'reopened' event on any `Closable`.
"""
type ReopenedEvent implements Node {
  actor: Actor
  closable: Closable!
  createdAt: DateTime!
  id: ID!
  stateReason: IssueStateReason
}

"""
Audit log entry for a repo.access event.
"""
type RepoAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoAccessAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoAccessAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

"""
Audit log entry for a repo.add_member event.
"""
type RepoAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoAddMemberAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoAddMemberAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

"""
Audit log entry for a repo.add_topic event.
"""
type RepoAddTopicAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  topic: Topic
  topicName: String
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.archived event.
"""
type RepoArchivedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoArchivedAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoArchivedAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

"""
Audit log entry for a repo.change_merge_setting event.
"""
type RepoChangeMergeSettingAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isEnabled: Boolean
  mergeType: RepoChangeMergeSettingAuditEntryMergeType
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The merge options available for pull requests to this repository.
"""
enum RepoChangeMergeSettingAuditEntryMergeType {
  MERGE
  REBASE
  SQUASH
}

"""
Audit log entry for a repo.config.disable_anonymous_git_access event.
"""
type RepoConfigDisableAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_collaborators_only event.
"""
type RepoConfigDisableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_contributors_only event.
"""
type RepoConfigDisableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
"""
type RepoConfigDisableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.enable_anonymous_git_access event.
"""
type RepoConfigEnableAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.enable_collaborators_only event.
"""
type RepoConfigEnableCollaboratorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.enable_contributors_only event.
"""
type RepoConfigEnableContributorsOnlyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
"""
type RepoConfigEnableSockpuppetDisallowedAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.lock_anonymous_git_access event.
"""
type RepoConfigLockAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.config.unlock_anonymous_git_access event.
"""
type RepoConfigUnlockAnonymousGitAccessAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repo.create event.
"""
type RepoCreateAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  forkParentName: String
  forkSourceName: String
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoCreateAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoCreateAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

"""
Audit log entry for a repo.destroy event.
"""
type RepoDestroyAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoDestroyAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoDestroyAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

"""
Audit log entry for a repo.remove_member event.
"""
type RepoRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
  visibility: RepoRemoveMemberAuditEntryVisibility
}

"""
The privacy of a repository
"""
enum RepoRemoveMemberAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

"""
Audit log entry for a repo.remove_topic event.
"""
type RepoRemoveTopicAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  topic: Topic
  topicName: String
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The reasons a piece of content can be reported or minimized.
"""
enum ReportedContentClassifiers {
  ABUSE
  DUPLICATE
  OFF_TOPIC
  OUTDATED
  RESOLVED
  SPAM
}

"""
A repository contains the content for a project.
"""
type Repository implements Node & PackageOwner & ProjectOwner & ProjectV2Recent & RepositoryInfo & Starrable & Subscribable & UniformResourceLocatable {
  allowUpdateBranch: Boolean!
  archivedAt: DateTime
  assignableUsers: UserConnection!
  autoMergeAllowed: Boolean!
  branchProtectionRules: BranchProtectionRuleConnection!
  codeOfConduct: CodeOfConduct
  codeowners: RepositoryCodeowners
  collaborators: RepositoryCollaboratorConnection
  commitComments: CommitCommentConnection!
  contactLinks: [RepositoryContactLink!]
  contributingGuidelines: ContributingGuidelines
  createdAt: DateTime!
  databaseId: Int
  defaultBranchRef: Ref
  deleteBranchOnMerge: Boolean!
  dependencyGraphManifests: DependencyGraphManifestConnection@preview(toggledBy: "hawkgirl-preview")
  deployKeys: DeployKeyConnection!
  deployments: DeploymentConnection!
  description: String
  descriptionHTML: HTML!
  discussion: Discussion
  discussionCategories: DiscussionCategoryConnection!
  discussionCategory: DiscussionCategory
  discussions: DiscussionConnection!
  diskUsage: Int
  environment: Environment
  environments: EnvironmentConnection!
  forkCount: Int!
  forkingAllowed: Boolean!
  forks: RepositoryConnection!
  fundingLinks: [FundingLink!]!
  hasDiscussionsEnabled: Boolean!
  hasIssuesEnabled: Boolean!
  hasProjectsEnabled: Boolean!
  hasVulnerabilityAlertsEnabled: Boolean!
  hasWikiEnabled: Boolean!
  homepageUrl: URI
  id: ID!
  interactionAbility: RepositoryInteractionAbility
  isArchived: Boolean!
  isBlankIssuesEnabled: Boolean!
  isDisabled: Boolean!
  isEmpty: Boolean!
  isFork: Boolean!
  isInOrganization: Boolean!
  isLocked: Boolean!
  isMirror: Boolean!
  isPrivate: Boolean!
  isSecurityPolicyEnabled: Boolean
  isTemplate: Boolean!
  isUserConfigurationRepository: Boolean!
  issue: Issue
  issueOrPullRequest: IssueOrPullRequest
  issueTemplates: [IssueTemplate!]
  issues: IssueConnection!
  label: Label
  labels: LabelConnection
  languages: LanguageConnection
  latestRelease: Release
  licenseInfo: License
  lockReason: RepositoryLockReason
  mentionableUsers: UserConnection!
  mergeCommitAllowed: Boolean!
  mergeCommitMessage: MergeCommitMessage!
  mergeCommitTitle: MergeCommitTitle!
  mergeQueue: MergeQueue
  milestone: Milestone
  milestones: MilestoneConnection
  mirrorUrl: URI
  name: String!
  nameWithOwner: String!
  object: GitObject
  openGraphImageUrl: URI!
  owner: RepositoryOwner!
  packages: PackageConnection!
  parent: Repository
  pinnedDiscussions: PinnedDiscussionConnection!
  pinnedIssues: PinnedIssueConnection
  primaryLanguage: Language
  project: Project
  projectV2: ProjectV2
  projects: ProjectConnection!
  projectsResourcePath: URI!
  projectsUrl: URI!
  projectsV2: ProjectV2Connection!
  pullRequest: PullRequest
  pullRequestTemplates: [PullRequestTemplate!]
  pullRequests: PullRequestConnection!
  pushedAt: DateTime
  rebaseMergeAllowed: Boolean!
  recentProjects: ProjectV2Connection!
  ref: Ref
  refs: RefConnection
  release: Release
  releases: ReleaseConnection!
  repositoryTopics: RepositoryTopicConnection!
  resourcePath: URI!
  ruleset: RepositoryRuleset
  rulesets: RepositoryRulesetConnection
  securityPolicyUrl: URI
  shortDescriptionHTML: HTML!
  squashMergeAllowed: Boolean!
  squashMergeCommitMessage: SquashMergeCommitMessage!
  squashMergeCommitTitle: SquashMergeCommitTitle!
  squashPrTitleUsedAsDefault: Boolean!@deprecated(reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC.")
  sshUrl: GitSSHRemote!
  stargazerCount: Int!
  stargazers: StargazerConnection!
  submodules: SubmoduleConnection!
  tempCloneToken: String
  templateRepository: Repository
  updatedAt: DateTime!
  url: URI!
  usesCustomOpenGraphImage: Boolean!
  viewerCanAdminister: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdateTopics: Boolean!
  viewerDefaultCommitEmail: String
  viewerDefaultMergeMethod: PullRequestMergeMethod!
  viewerHasStarred: Boolean!
  viewerPermission: RepositoryPermission
  viewerPossibleCommitEmails: [String!]
  viewerSubscription: SubscriptionState
  visibility: RepositoryVisibility!
  vulnerabilityAlert: RepositoryVulnerabilityAlert
  vulnerabilityAlerts: RepositoryVulnerabilityAlertConnection
  watchers: UserConnection!
  webCommitSignoffRequired: Boolean!
}

"""
The affiliation of a user to a repository
"""
enum RepositoryAffiliation {
  COLLABORATOR
  ORGANIZATION_MEMBER
  OWNER
}

"""
Metadata for an audit entry with action repo.*
"""
interface RepositoryAuditEntryData {
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
}

"""
Information extracted from a repository's `CODEOWNERS` file.
"""
type RepositoryCodeowners {
  errors: [RepositoryCodeownersError!]!
}

"""
An error in a `CODEOWNERS` file.
"""
type RepositoryCodeownersError {
  column: Int!
  kind: String!
  line: Int!
  message: String!
  path: String!
  source: String!
  suggestion: String
}

"""
The connection type for User.
"""
type RepositoryCollaboratorConnection {
  edges: [RepositoryCollaboratorEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a user who is a collaborator of a repository.
"""
type RepositoryCollaboratorEdge {
  cursor: String!
  node: User!
  permission: RepositoryPermission!
  permissionSources: [PermissionSource!]
}

"""
A list of repositories owned by the subject.
"""
type RepositoryConnection {
  edges: [RepositoryEdge]
  nodes: [Repository]
  pageInfo: PageInfo!
  totalCount: Int!
  totalDiskUsage: Int!
}

"""
A repository contact link.
"""
type RepositoryContactLink {
  about: String!
  name: String!
  url: URI!
}

"""
The reason a repository is listed as 'contributed'.
"""
enum RepositoryContributionType {
  COMMIT
  ISSUE
  PULL_REQUEST
  PULL_REQUEST_REVIEW
  REPOSITORY
}

"""
Represents an author of discussions in repositories.
"""
interface RepositoryDiscussionAuthor {
  repositoryDiscussions: DiscussionConnection!
}

"""
Represents an author of discussion comments in repositories.
"""
interface RepositoryDiscussionCommentAuthor {
  repositoryDiscussionComments: DiscussionCommentConnection!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  cursor: String!
  node: Repository
}

"""
Parameters to be used for the repository_id condition
"""
type RepositoryIdConditionTarget {
  repositoryIds: [ID!]!
}

"""
Parameters to be used for the repository_id condition
"""
input RepositoryIdConditionTargetInput {
  repositoryIds: [ID!]!
}

"""
A subset of repository info.
"""
interface RepositoryInfo {
  archivedAt: DateTime
  createdAt: DateTime!
  description: String
  descriptionHTML: HTML!
  forkCount: Int!
  hasDiscussionsEnabled: Boolean!
  hasIssuesEnabled: Boolean!
  hasProjectsEnabled: Boolean!
  hasWikiEnabled: Boolean!
  homepageUrl: URI
  isArchived: Boolean!
  isFork: Boolean!
  isInOrganization: Boolean!
  isLocked: Boolean!
  isMirror: Boolean!
  isPrivate: Boolean!
  isTemplate: Boolean!
  licenseInfo: License
  lockReason: RepositoryLockReason
  mirrorUrl: URI
  name: String!
  nameWithOwner: String!
  openGraphImageUrl: URI!
  owner: RepositoryOwner!
  pushedAt: DateTime
  resourcePath: URI!
  shortDescriptionHTML: HTML!
  updatedAt: DateTime!
  url: URI!
  usesCustomOpenGraphImage: Boolean!
  visibility: RepositoryVisibility!
}

"""
Repository interaction limit that applies to this object.
"""
type RepositoryInteractionAbility {
  expiresAt: DateTime
  limit: RepositoryInteractionLimit!
  origin: RepositoryInteractionLimitOrigin!
}

"""
A repository interaction limit.
"""
enum RepositoryInteractionLimit {
  COLLABORATORS_ONLY
  CONTRIBUTORS_ONLY
  EXISTING_USERS
  NO_LIMIT
}

"""
The length for a repository interaction limit to be enabled for.
"""
enum RepositoryInteractionLimitExpiry {
  ONE_DAY
  ONE_MONTH
  ONE_WEEK
  SIX_MONTHS
  THREE_DAYS
}

"""
Indicates where an interaction limit is configured.
"""
enum RepositoryInteractionLimitOrigin {
  ORGANIZATION
  REPOSITORY
  USER
}

"""
An invitation for a user to be added to a repository.
"""
type RepositoryInvitation implements Node {
  email: String
  id: ID!
  invitee: User
  inviter: User!
  permalink: URI!
  permission: RepositoryPermission!
  repository: RepositoryInfo
}

"""
A list of repository invitations.
"""
type RepositoryInvitationConnection {
  edges: [RepositoryInvitationEdge]
  nodes: [RepositoryInvitation]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryInvitationEdge {
  cursor: String!
  node: RepositoryInvitation
}

"""
Ordering options for repository invitation connections.
"""
input RepositoryInvitationOrder {
  direction: OrderDirection!
  field: RepositoryInvitationOrderField!
}

"""
Properties by which repository invitation connections can be ordered.
"""
enum RepositoryInvitationOrderField {
  CREATED_AT
}

"""
The possible reasons a given repository could be in a locked state.
"""
enum RepositoryLockReason {
  BILLING
  MIGRATING
  MOVING
  RENAME
  TRADE_RESTRICTION
}

"""
A GitHub Enterprise Importer (GEI) repository migration.
"""
type RepositoryMigration implements Migration & Node {
  continueOnError: Boolean!
  createdAt: DateTime!
  databaseId: String
  failureReason: String
  id: ID!
  migrationLogUrl: URI
  migrationSource: MigrationSource!
  repositoryName: String!
  sourceUrl: URI!
  state: MigrationState!
  warningsCount: Int!
}

"""
The connection type for RepositoryMigration.
"""
type RepositoryMigrationConnection {
  edges: [RepositoryMigrationEdge]
  nodes: [RepositoryMigration]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a repository migration.
"""
type RepositoryMigrationEdge {
  cursor: String!
  node: RepositoryMigration
}

"""
Ordering options for repository migrations.
"""
input RepositoryMigrationOrder {
  direction: RepositoryMigrationOrderDirection!
  field: RepositoryMigrationOrderField!
}

"""
Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
"""
enum RepositoryMigrationOrderDirection {
  ASC
  DESC
}

"""
Properties by which repository migrations can be ordered.
"""
enum RepositoryMigrationOrderField {
  CREATED_AT
}

"""
Parameters to be used for the repository_name condition
"""
type RepositoryNameConditionTarget {
  exclude: [String!]!
  include: [String!]!
  protected: Boolean!
}

"""
Parameters to be used for the repository_name condition
"""
input RepositoryNameConditionTargetInput {
  exclude: [String!]!
  include: [String!]!
  protected: Boolean
}

"""
Represents a object that belongs to a repository.
"""
interface RepositoryNode {
  repository: Repository!
}

"""
Ordering options for repository connections
"""
input RepositoryOrder {
  direction: OrderDirection!
  field: RepositoryOrderField!
}

"""
Properties by which repository connections can be ordered.
"""
enum RepositoryOrderField {
  CREATED_AT
  NAME
  PUSHED_AT
  STARGAZERS
  UPDATED_AT
}

"""
Represents an owner of a Repository.
"""
interface RepositoryOwner {
  avatarUrl: URI!
  id: ID!
  login: String!
  repositories: RepositoryConnection!
  repository: Repository
  resourcePath: URI!
  url: URI!
}

"""
The access level to a repository
"""
enum RepositoryPermission {
  ADMIN
  MAINTAIN
  READ
  TRIAGE
  WRITE
}

"""
The privacy of a repository
"""
enum RepositoryPrivacy {
  PRIVATE
  PUBLIC
}

"""
A repository rule.
"""
type RepositoryRule implements Node {
  id: ID!
  parameters: RuleParameters
  repositoryRuleset: RepositoryRuleset
  type: RepositoryRuleType!
}

"""
Set of conditions that determine if a ruleset will evaluate
"""
type RepositoryRuleConditions {
  refName: RefNameConditionTarget
  repositoryId: RepositoryIdConditionTarget
  repositoryName: RepositoryNameConditionTarget
}

"""
Specifies the conditions required for a ruleset to evaluate
"""
input RepositoryRuleConditionsInput {
  refName: RefNameConditionTargetInput
  repositoryId: RepositoryIdConditionTargetInput
  repositoryName: RepositoryNameConditionTargetInput
}

"""
The connection type for RepositoryRule.
"""
type RepositoryRuleConnection {
  edges: [RepositoryRuleEdge]
  nodes: [RepositoryRule]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRuleEdge {
  cursor: String!
  node: RepositoryRule
}

"""
Specifies the attributes for a new or updated rule.
"""
input RepositoryRuleInput {
  id: ID@possibleTypes(concreteTypes: ("RepositoryRule"))
  parameters: RuleParametersInput
  type: RepositoryRuleType!
}

"""
The rule types supported in rulesets
"""
enum RepositoryRuleType {
  BRANCH_NAME_PATTERN
  COMMITTER_EMAIL_PATTERN
  COMMIT_AUTHOR_EMAIL_PATTERN
  COMMIT_MESSAGE_PATTERN
  CREATION
  DELETION
  NON_FAST_FORWARD
  PULL_REQUEST
  REQUIRED_DEPLOYMENTS
  REQUIRED_LINEAR_HISTORY
  REQUIRED_SIGNATURES
  REQUIRED_STATUS_CHECKS
  TAG_NAME_PATTERN
  UPDATE
}

"""
A repository ruleset.
"""
type RepositoryRuleset implements Node {
  bypassActors: RepositoryRulesetBypassActorConnection
  conditions: RepositoryRuleConditions!
  createdAt: DateTime!
  databaseId: Int
  enforcement: RuleEnforcement!
  id: ID!
  name: String!
  rules: RepositoryRuleConnection
  source: RuleSource!
  target: RepositoryRulesetTarget
  updatedAt: DateTime!
}

"""
A team or app that has the ability to bypass a rules defined on a ruleset
"""
type RepositoryRulesetBypassActor implements Node {
  actor: BypassActor
  bypassMode: RepositoryRulesetBypassActorBypassMode
  id: ID!
  organizationAdmin: Boolean!
  repositoryRoleDatabaseId: Int
  repositoryRoleName: String
  repositoryRuleset: RepositoryRuleset
}

"""
The bypass mode for a specific actor on a ruleset.
"""
enum RepositoryRulesetBypassActorBypassMode {
  ALWAYS
  PULL_REQUEST
}

"""
The connection type for RepositoryRulesetBypassActor.
"""
type RepositoryRulesetBypassActorConnection {
  edges: [RepositoryRulesetBypassActorEdge]
  nodes: [RepositoryRulesetBypassActor]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetBypassActorEdge {
  cursor: String!
  node: RepositoryRulesetBypassActor
}

"""
Specifies the attributes for a new or updated ruleset bypass actor. Only one of
`actor_id`, `repository_role_database_id`, or `organization_admin` should be specified.
"""
input RepositoryRulesetBypassActorInput {
  actorId: ID
  bypassMode: RepositoryRulesetBypassActorBypassMode!
  organizationAdmin: Boolean
  repositoryRoleDatabaseId: Int
}

"""
The connection type for RepositoryRuleset.
"""
type RepositoryRulesetConnection {
  edges: [RepositoryRulesetEdge]
  nodes: [RepositoryRuleset]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryRulesetEdge {
  cursor: String!
  node: RepositoryRuleset
}

"""
The targets supported for rulesets
"""
enum RepositoryRulesetTarget {
  BRANCH
  TAG
}

"""
A repository-topic connects a repository to a topic.
"""
type RepositoryTopic implements Node & UniformResourceLocatable {
  id: ID!
  resourcePath: URI!
  topic: Topic!
  url: URI!
}

"""
The connection type for RepositoryTopic.
"""
type RepositoryTopicConnection {
  edges: [RepositoryTopicEdge]
  nodes: [RepositoryTopic]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RepositoryTopicEdge {
  cursor: String!
  node: RepositoryTopic
}

"""
The repository's visibility level.
"""
enum RepositoryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

"""
Audit log entry for a repository_visibility_change.disable event.
"""
type RepositoryVisibilityChangeDisableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a repository_visibility_change.enable event.
"""
type RepositoryVisibilityChangeEnableAuditEntry implements AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  enterpriseResourcePath: URI
  enterpriseSlug: String
  enterpriseUrl: URI
  id: ID!
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
A Dependabot alert for a repository with a dependency affected by a security vulnerability.
"""
type RepositoryVulnerabilityAlert implements Node & RepositoryNode {
  autoDismissedAt: DateTime
  createdAt: DateTime!
  dependabotUpdate: DependabotUpdate
  dependencyScope: RepositoryVulnerabilityAlertDependencyScope
  dismissComment: String
  dismissReason: String
  dismissedAt: DateTime
  dismisser: User
  fixedAt: DateTime
  id: ID!
  number: Int!
  repository: Repository!
  securityAdvisory: SecurityAdvisory
  securityVulnerability: SecurityVulnerability
  state: RepositoryVulnerabilityAlertState!
  vulnerableManifestFilename: String!
  vulnerableManifestPath: String!
  vulnerableRequirements: String
}

"""
The connection type for RepositoryVulnerabilityAlert.
"""
type RepositoryVulnerabilityAlertConnection {
  edges: [RepositoryVulnerabilityAlertEdge]
  nodes: [RepositoryVulnerabilityAlert]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The possible scopes of an alert's dependency.
"""
enum RepositoryVulnerabilityAlertDependencyScope {
  DEVELOPMENT
  RUNTIME
}

"""
An edge in a connection.
"""
type RepositoryVulnerabilityAlertEdge {
  cursor: String!
  node: RepositoryVulnerabilityAlert
}

"""
The possible states of an alert
"""
enum RepositoryVulnerabilityAlertState {
  AUTO_DISMISSED
  DISMISSED
  FIXED
  OPEN
}

"""
Autogenerated input type of RequestReviews
"""
input RequestReviewsInput {
  clientMutationId: String
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
  teamIds: [ID!]@possibleTypes(concreteTypes: ("Team"))
  union: Boolean = false
  userIds: [ID!]@possibleTypes(concreteTypes: ("User"))
}

"""
Autogenerated return type of RequestReviews
"""
type RequestReviewsPayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
  requestedReviewersEdge: UserEdge
}

"""
The possible states that can be requested when creating a check run.
"""
enum RequestableCheckStatusState {
  COMPLETED
  IN_PROGRESS
  PENDING
  QUEUED
  WAITING
}

"""
Types that can be requested reviewers.
"""
union RequestedReviewer = Bot | Mannequin | Team | User

"""
The connection type for RequestedReviewer.
"""
type RequestedReviewerConnection {
  edges: [RequestedReviewerEdge]
  nodes: [RequestedReviewer]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RequestedReviewerEdge {
  cursor: String!
  node: RequestedReviewer
}

"""
Represents a type that can be required by a pull request for merging.
"""
interface RequirableByPullRequest {
  isRequired: Boolean!
}

"""
Choose which environments must be successfully deployed to before refs can be merged into a branch that matches this rule.
"""
type RequiredDeploymentsParameters {
  requiredDeploymentEnvironments: [String!]!
}

"""
Choose which environments must be successfully deployed to before refs can be merged into a branch that matches this rule.
"""
input RequiredDeploymentsParametersInput {
  requiredDeploymentEnvironments: [String!]!
}

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
type RequiredStatusCheckDescription {
  app: App
  context: String!
}

"""
Specifies the attributes for a new or updated required status check.
"""
input RequiredStatusCheckInput {
  appId: ID
  context: String!
}

"""
Choose which status checks must pass before branches can be merged into a branch
that matches this rule. When enabled, commits must first be pushed to another
branch, then merged or pushed directly to a ref that matches this rule after
status checks have passed.
"""
type RequiredStatusChecksParameters {
  requiredStatusChecks: [StatusCheckConfiguration!]!
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Choose which status checks must pass before branches can be merged into a branch
that matches this rule. When enabled, commits must first be pushed to another
branch, then merged or pushed directly to a ref that matches this rule after
status checks have passed.
"""
input RequiredStatusChecksParametersInput {
  requiredStatusChecks: [StatusCheckConfigurationInput!]!
  strictRequiredStatusChecksPolicy: Boolean!
}

"""
Autogenerated input type of RerequestCheckSuite
"""
input RerequestCheckSuiteInput {
  checkSuiteId: ID!@possibleTypes(concreteTypes: ("CheckSuite"))
  clientMutationId: String
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of RerequestCheckSuite
"""
type RerequestCheckSuitePayload {
  checkSuite: CheckSuite
  clientMutationId: String
}

"""
Autogenerated input type of ResolveReviewThread
"""
input ResolveReviewThreadInput {
  clientMutationId: String
  threadId: ID!@possibleTypes(concreteTypes: ("PullRequestReviewThread"))
}

"""
Autogenerated return type of ResolveReviewThread
"""
type ResolveReviewThreadPayload {
  clientMutationId: String
  thread: PullRequestReviewThread
}

"""
Represents a private contribution a user made on GitHub.
"""
type RestrictedContribution implements Contribution {
  isRestricted: Boolean!
  occurredAt: DateTime!
  resourcePath: URI!
  url: URI!
  user: User!
}

"""
Autogenerated input type of RetireSponsorsTier
"""
input RetireSponsorsTierInput {
  clientMutationId: String
  tierId: ID!@possibleTypes(concreteTypes: ("SponsorsTier"))
}

"""
Autogenerated return type of RetireSponsorsTier
"""
type RetireSponsorsTierPayload {
  clientMutationId: String
  sponsorsTier: SponsorsTier
}

"""
Autogenerated input type of RevertPullRequest
"""
input RevertPullRequestInput {
  body: String
  clientMutationId: String
  draft: Boolean = false
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
  title: String
}

"""
Autogenerated return type of RevertPullRequest
"""
type RevertPullRequestPayload {
  clientMutationId: String
  pullRequest: PullRequest
  revertPullRequest: PullRequest
}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  actor: ReviewDismissalAllowanceActor
  branchProtectionRule: BranchProtectionRule
  id: ID!
}

"""
Types that can be an actor.
"""
union ReviewDismissalAllowanceActor = App | Team | User

"""
The connection type for ReviewDismissalAllowance.
"""
type ReviewDismissalAllowanceConnection {
  edges: [ReviewDismissalAllowanceEdge]
  nodes: [ReviewDismissalAllowance]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewDismissalAllowanceEdge {
  cursor: String!
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  actor: Actor
  createdAt: DateTime!
  databaseId: Int
  dismissalMessage: String
  dismissalMessageHTML: String
  id: ID!
  previousReviewState: PullRequestReviewState!
  pullRequest: PullRequest!
  pullRequestCommit: PullRequestCommit
  resourcePath: URI!
  review: PullRequestReview
  url: URI!
}

"""
A request for a user to review a pull request.
"""
type ReviewRequest implements Node {
  asCodeOwner: Boolean!
  databaseId: Int
  id: ID!
  pullRequest: PullRequest!
  requestedReviewer: RequestedReviewer
}

"""
The connection type for ReviewRequest.
"""
type ReviewRequestConnection {
  edges: [ReviewRequestEdge]
  nodes: [ReviewRequest]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReviewRequestEdge {
  cursor: String!
  node: ReviewRequest
}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
type ReviewRequestRemovedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  requestedReviewer: RequestedReviewer
}

"""
Represents an 'review_requested' event on a given pull request.
"""
type ReviewRequestedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  pullRequest: PullRequest!
  requestedReviewer: RequestedReviewer
}

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
type ReviewStatusHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
  reviewDecision: PullRequestReviewDecision
}

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
input RevokeEnterpriseOrganizationsMigratorRoleInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  login: String!
}

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
type RevokeEnterpriseOrganizationsMigratorRolePayload {
  clientMutationId: String
  organizations: OrganizationConnection
}

"""
Autogenerated input type of RevokeMigratorRole
"""
input RevokeMigratorRoleInput {
  actor: String!
  actorType: ActorType!
  clientMutationId: String
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of RevokeMigratorRole
"""
type RevokeMigratorRolePayload {
  clientMutationId: String
  success: Boolean
}

"""
Possible roles a user may have in relation to an organization.
"""
enum RoleInOrganization {
  DIRECT_MEMBER
  OWNER
  UNAFFILIATED
}

"""
The level of enforcement for a rule or ruleset.
"""
enum RuleEnforcement {
  ACTIVE
  DISABLED
  EVALUATE
}

"""
Types which can be parameters for `RepositoryRule` objects.
"""
union RuleParameters = BranchNamePatternParameters | CommitAuthorEmailPatternParameters | CommitMessagePatternParameters | CommitterEmailPatternParameters | PullRequestParameters | RequiredDeploymentsParameters | RequiredStatusChecksParameters | TagNamePatternParameters | UpdateParameters

"""
Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
"""
input RuleParametersInput {
  branchNamePattern: BranchNamePatternParametersInput
  commitAuthorEmailPattern: CommitAuthorEmailPatternParametersInput
  commitMessagePattern: CommitMessagePatternParametersInput
  committerEmailPattern: CommitterEmailPatternParametersInput
  pullRequest: PullRequestParametersInput
  requiredDeployments: RequiredDeploymentsParametersInput
  requiredStatusChecks: RequiredStatusChecksParametersInput
  tagNamePattern: TagNamePatternParametersInput
  update: UpdateParametersInput
}

"""
Types which can have `RepositoryRule` objects.
"""
union RuleSource = Organization | Repository

"""
The possible digest algorithms used to sign SAML requests for an identity provider.
"""
enum SamlDigestAlgorithm {
  SHA1
  SHA256
  SHA384
  SHA512
}

"""
The possible signature algorithms used to sign SAML requests for a Identity Provider.
"""
enum SamlSignatureAlgorithm {
  RSA_SHA1
  RSA_SHA256
  RSA_SHA384
  RSA_SHA512
}

"""
A Saved Reply is text a user can use to reply quickly.
"""
type SavedReply implements Node {
  body: String!
  bodyHTML: HTML!
  databaseId: Int
  id: ID!
  title: String!
  user: Actor
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  edges: [SavedReplyEdge]
  nodes: [SavedReply]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  cursor: String!
  node: SavedReply
}

"""
Ordering options for saved reply connections.
"""
input SavedReplyOrder {
  direction: OrderDirection!
  field: SavedReplyOrderField!
}

"""
Properties by which saved reply connections can be ordered.
"""
enum SavedReplyOrderField {
  UPDATED_AT
}

"""
The results of a search.
"""
union SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
type SearchResultItemConnection {
  codeCount: Int!
  discussionCount: Int!
  edges: [SearchResultItemEdge]
  issueCount: Int!
  nodes: [SearchResultItem]
  pageInfo: PageInfo!
  repositoryCount: Int!
  userCount: Int!
  wikiCount: Int!
}

"""
An edge in a connection.
"""
type SearchResultItemEdge {
  cursor: String!
  node: SearchResultItem
  textMatches: [TextMatch]
}

"""
Represents the individual results of a search.
"""
enum SearchType {
  DISCUSSION
  ISSUE
  REPOSITORY
  USER
}

"""
A GitHub Security Advisory
"""
type SecurityAdvisory implements Node {
  classification: SecurityAdvisoryClassification!
  cvss: CVSS!
  cwes: CWEConnection!
  databaseId: Int
  description: String!
  ghsaId: String!
  id: ID!
  identifiers: [SecurityAdvisoryIdentifier!]!
  notificationsPermalink: URI
  origin: String!
  permalink: URI
  publishedAt: DateTime!
  references: [SecurityAdvisoryReference!]!
  severity: SecurityAdvisorySeverity!
  summary: String!
  updatedAt: DateTime!
  vulnerabilities: SecurityVulnerabilityConnection!
  withdrawnAt: DateTime
}

"""
Classification of the advisory.
"""
enum SecurityAdvisoryClassification {
  GENERAL
  MALWARE
}

"""
The connection type for SecurityAdvisory.
"""
type SecurityAdvisoryConnection {
  edges: [SecurityAdvisoryEdge]
  nodes: [SecurityAdvisory]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The possible ecosystems of a security vulnerability's package.
"""
enum SecurityAdvisoryEcosystem {
  ACTIONS
  COMPOSER
  ERLANG
  GO
  MAVEN
  NPM
  NUGET
  PIP
  PUB
  RUBYGEMS
  RUST
  SWIFT
}

"""
An edge in a connection.
"""
type SecurityAdvisoryEdge {
  cursor: String!
  node: SecurityAdvisory
}

"""
A GitHub Security Advisory Identifier
"""
type SecurityAdvisoryIdentifier {
  type: String!
  value: String!
}

"""
An advisory identifier to filter results on.
"""
input SecurityAdvisoryIdentifierFilter {
  type: SecurityAdvisoryIdentifierType!
  value: String!
}

"""
Identifier formats available for advisories.
"""
enum SecurityAdvisoryIdentifierType {
  CVE
  GHSA
}

"""
Ordering options for security advisory connections
"""
input SecurityAdvisoryOrder {
  direction: OrderDirection!
  field: SecurityAdvisoryOrderField!
}

"""
Properties by which security advisory connections can be ordered.
"""
enum SecurityAdvisoryOrderField {
  PUBLISHED_AT
  UPDATED_AT
}

"""
An individual package
"""
type SecurityAdvisoryPackage {
  ecosystem: SecurityAdvisoryEcosystem!
  name: String!
}

"""
An individual package version
"""
type SecurityAdvisoryPackageVersion {
  identifier: String!
}

"""
A GitHub Security Advisory Reference
"""
type SecurityAdvisoryReference {
  url: URI!
}

"""
Severity of the vulnerability.
"""
enum SecurityAdvisorySeverity {
  CRITICAL
  HIGH
  LOW
  MODERATE
}

"""
An individual vulnerability within an Advisory
"""
type SecurityVulnerability {
  advisory: SecurityAdvisory!
  firstPatchedVersion: SecurityAdvisoryPackageVersion
  package: SecurityAdvisoryPackage!
  severity: SecurityAdvisorySeverity!
  updatedAt: DateTime!
  vulnerableVersionRange: String!
}

"""
The connection type for SecurityVulnerability.
"""
type SecurityVulnerabilityConnection {
  edges: [SecurityVulnerabilityEdge]
  nodes: [SecurityVulnerability]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SecurityVulnerabilityEdge {
  cursor: String!
  node: SecurityVulnerability
}

"""
Ordering options for security vulnerability connections
"""
input SecurityVulnerabilityOrder {
  direction: OrderDirection!
  field: SecurityVulnerabilityOrderField!
}

"""
Properties by which security vulnerability connections can be ordered.
"""
enum SecurityVulnerabilityOrderField {
  UPDATED_AT
}

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
input SetEnterpriseIdentityProviderInput {
  clientMutationId: String
  digestMethod: SamlDigestAlgorithm!
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  idpCertificate: String!
  issuer: String
  signatureMethod: SamlSignatureAlgorithm!
  ssoUrl: URI!
}

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
type SetEnterpriseIdentityProviderPayload {
  clientMutationId: String
  identityProvider: EnterpriseIdentityProvider
}

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
input SetOrganizationInteractionLimitInput {
  clientMutationId: String
  expiry: RepositoryInteractionLimitExpiry
  limit: RepositoryInteractionLimit!
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
type SetOrganizationInteractionLimitPayload {
  clientMutationId: String
  organization: Organization
}

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
input SetRepositoryInteractionLimitInput {
  clientMutationId: String
  expiry: RepositoryInteractionLimitExpiry
  limit: RepositoryInteractionLimit!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
type SetRepositoryInteractionLimitPayload {
  clientMutationId: String
  repository: Repository
}

"""
Autogenerated input type of SetUserInteractionLimit
"""
input SetUserInteractionLimitInput {
  clientMutationId: String
  expiry: RepositoryInteractionLimitExpiry
  limit: RepositoryInteractionLimit!
  userId: ID!@possibleTypes(concreteTypes: ("User"))
}

"""
Autogenerated return type of SetUserInteractionLimit
"""
type SetUserInteractionLimitPayload {
  clientMutationId: String
  user: User
}

"""
Represents an S/MIME signature on a Commit or Tag.
"""
type SmimeSignature implements GitSignature {
  email: String!
  isValid: Boolean!
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

"""
Social media profile associated with a user.
"""
type SocialAccount {
  displayName: String!
  provider: SocialAccountProvider!
  url: URI!
}

"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  edges: [SocialAccountEdge]
  nodes: [SocialAccount]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  cursor: String!
  node: SocialAccount
}

"""
Software or company that hosts social media accounts.
"""
enum SocialAccountProvider {
  FACEBOOK
  GENERIC
  HOMETOWN
  INSTAGRAM
  LINKEDIN
  MASTODON
  REDDIT
  TWITCH
  TWITTER
  YOUTUBE
}

"""
Entities that can sponsor others via GitHub Sponsors
"""
union Sponsor = Organization | User

"""
The connection type for Sponsor.
"""
type SponsorConnection {
  edges: [SponsorEdge]
  nodes: [Sponsor]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
type SponsorEdge {
  cursor: String!
  node: Sponsor
}

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
input SponsorOrder {
  direction: OrderDirection!
  field: SponsorOrderField!
}

"""
Properties by which sponsor connections can be ordered.
"""
enum SponsorOrderField {
  LOGIN
  RELEVANCE
}

"""
Entities that can sponsor or be sponsored through GitHub Sponsors.
"""
interface Sponsorable {
  estimatedNextSponsorsPayoutInCents: Int!
  hasSponsorsListing: Boolean!
  isSponsoredBy: Boolean!
  isSponsoringViewer: Boolean!
  monthlyEstimatedSponsorsIncomeInCents: Int!
  sponsoring: SponsorConnection!
  sponsors: SponsorConnection!
  sponsorsActivities: SponsorsActivityConnection!
  sponsorsListing: SponsorsListing
  sponsorshipForViewerAsSponsor: Sponsorship
  sponsorshipForViewerAsSponsorable: Sponsorship
  sponsorshipNewsletters: SponsorshipNewsletterConnection!
  sponsorshipsAsMaintainer: SponsorshipConnection!
  sponsorshipsAsSponsor: SponsorshipConnection!
  totalSponsorshipAmountAsSponsorInCents: Int
  viewerCanSponsor: Boolean!
  viewerIsSponsoring: Boolean!
}

"""
Entities that can be sponsored via GitHub Sponsors
"""
union SponsorableItem = Organization | User

"""
The connection type for SponsorableItem.
"""
type SponsorableItemConnection {
  edges: [SponsorableItemEdge]
  nodes: [SponsorableItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorableItemEdge {
  cursor: String!
  node: SponsorableItem
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input SponsorableOrder {
  direction: OrderDirection!
  field: SponsorableOrderField!
}

"""
Properties by which sponsorable connections can be ordered.
"""
enum SponsorableOrderField {
  LOGIN
}

"""
An event related to sponsorship activity.
"""
type SponsorsActivity implements Node {
  action: SponsorsActivityAction!
  currentPrivacyLevel: SponsorshipPrivacy
  id: ID!
  previousSponsorsTier: SponsorsTier
  sponsor: Sponsor
  sponsorable: Sponsorable!
  sponsorsTier: SponsorsTier
  timestamp: DateTime
  viaBulkSponsorship: Boolean!
}

"""
The possible actions that GitHub Sponsors activities can represent.
"""
enum SponsorsActivityAction {
  CANCELLED_SPONSORSHIP
  NEW_SPONSORSHIP
  PENDING_CHANGE
  REFUND
  SPONSOR_MATCH_DISABLED
  TIER_CHANGE
}

"""
The connection type for SponsorsActivity.
"""
type SponsorsActivityConnection {
  edges: [SponsorsActivityEdge]
  nodes: [SponsorsActivity]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorsActivityEdge {
  cursor: String!
  node: SponsorsActivity
}

"""
Ordering options for GitHub Sponsors activity connections.
"""
input SponsorsActivityOrder {
  direction: OrderDirection!
  field: SponsorsActivityOrderField!
}

"""
Properties by which GitHub Sponsors activity connections can be ordered.
"""
enum SponsorsActivityOrderField {
  TIMESTAMP
}

"""
The possible time periods for which Sponsors activities can be requested.
"""
enum SponsorsActivityPeriod {
  ALL
  DAY
  MONTH
  WEEK
}

"""
Represents countries or regions for billing and residence for a GitHub Sponsors profile.
"""
enum SponsorsCountryOrRegionCode {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  YT
  ZA
  ZM
  ZW
}

"""
A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
"""
type SponsorsGoal {
  description: String
  kind: SponsorsGoalKind!
  percentComplete: Int!
  targetValue: Int!
  title: String!
}

"""
The different kinds of goals a GitHub Sponsors member can have.
"""
enum SponsorsGoalKind {
  MONTHLY_SPONSORSHIP_AMOUNT
  TOTAL_SPONSORS_COUNT
}

"""
A GitHub Sponsors listing.
"""
type SponsorsListing implements Node {
  activeGoal: SponsorsGoal
  activeStripeConnectAccount: StripeConnectAccount
  billingCountryOrRegion: String
  contactEmailAddress: String
  createdAt: DateTime!
  dashboardResourcePath: URI!
  dashboardUrl: URI!
  featuredItems: [SponsorsListingFeaturedItem!]!
  fiscalHost: Organization
  fullDescription: String!
  fullDescriptionHTML: HTML!
  id: ID!
  isPublic: Boolean!
  name: String!
  nextPayoutDate: Date
  residenceCountryOrRegion: String
  resourcePath: URI!
  shortDescription: String!
  slug: String!
  sponsorable: Sponsorable!
  tiers: SponsorsTierConnection
  url: URI!
}

"""
A record that can be featured on a GitHub Sponsors profile.
"""
union SponsorsListingFeatureableItem = Repository | User

"""
A record that is promoted on a GitHub Sponsors profile.
"""
type SponsorsListingFeaturedItem implements Node {
  createdAt: DateTime!
  description: String
  featureable: SponsorsListingFeatureableItem!
  id: ID!
  position: Int!
  sponsorsListing: SponsorsListing!
  updatedAt: DateTime!
}

"""
The different kinds of records that can be featured on a GitHub Sponsors profile page.
"""
enum SponsorsListingFeaturedItemFeatureableType {
  REPOSITORY
  USER
}

"""
A GitHub Sponsors tier associated with a GitHub Sponsors listing.
"""
type SponsorsTier implements Node {
  adminInfo: SponsorsTierAdminInfo
  closestLesserValueTier: SponsorsTier
  createdAt: DateTime!
  description: String!
  descriptionHTML: HTML!
  id: ID!
  isCustomAmount: Boolean!
  isOneTime: Boolean!
  monthlyPriceInCents: Int!
  monthlyPriceInDollars: Int!
  name: String!
  sponsorsListing: SponsorsListing!
  updatedAt: DateTime!
}

"""
SponsorsTier information only visible to users that can administer the associated Sponsors listing.
"""
type SponsorsTierAdminInfo {
  isDraft: Boolean!
  isPublished: Boolean!
  isRetired: Boolean!
  sponsorships: SponsorshipConnection!
}

"""
The connection type for SponsorsTier.
"""
type SponsorsTierConnection {
  edges: [SponsorsTierEdge]
  nodes: [SponsorsTier]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorsTierEdge {
  cursor: String!
  node: SponsorsTier
}

"""
Ordering options for Sponsors tiers connections.
"""
input SponsorsTierOrder {
  direction: OrderDirection!
  field: SponsorsTierOrderField!
}

"""
Properties by which Sponsors tiers connections can be ordered.
"""
enum SponsorsTierOrderField {
  CREATED_AT
  MONTHLY_PRICE_IN_CENTS
}

"""
A sponsorship relationship between a sponsor and a maintainer
"""
type Sponsorship implements Node {
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  isOneTimePayment: Boolean!
  isSponsorOptedIntoEmail: Boolean
  maintainer: User!@deprecated(reason: "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.")
  privacyLevel: SponsorshipPrivacy!
  sponsor: User@deprecated(reason: "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.")
  sponsorEntity: Sponsor
  sponsorable: Sponsorable!
  tier: SponsorsTier
  tierSelectedAt: DateTime
}

"""
The connection type for Sponsorship.
"""
type SponsorshipConnection {
  edges: [SponsorshipEdge]
  nodes: [Sponsorship]
  pageInfo: PageInfo!
  totalCount: Int!
  totalRecurringMonthlyPriceInCents: Int!
  totalRecurringMonthlyPriceInDollars: Int!
}

"""
An edge in a connection.
"""
type SponsorshipEdge {
  cursor: String!
  node: Sponsorship
}

"""
An update sent to sponsors of a user or organization on GitHub Sponsors.
"""
type SponsorshipNewsletter implements Node {
  author: User
  body: String!
  createdAt: DateTime!
  id: ID!
  isPublished: Boolean!
  sponsorable: Sponsorable!
  subject: String!
  updatedAt: DateTime!
}

"""
The connection type for SponsorshipNewsletter.
"""
type SponsorshipNewsletterConnection {
  edges: [SponsorshipNewsletterEdge]
  nodes: [SponsorshipNewsletter]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorshipNewsletterEdge {
  cursor: String!
  node: SponsorshipNewsletter
}

"""
Ordering options for sponsorship newsletter connections.
"""
input SponsorshipNewsletterOrder {
  direction: OrderDirection!
  field: SponsorshipNewsletterOrderField!
}

"""
Properties by which sponsorship update connections can be ordered.
"""
enum SponsorshipNewsletterOrderField {
  CREATED_AT
}

"""
Ordering options for sponsorship connections.
"""
input SponsorshipOrder {
  direction: OrderDirection!
  field: SponsorshipOrderField!
}

"""
Properties by which sponsorship connections can be ordered.
"""
enum SponsorshipOrderField {
  CREATED_AT
}

"""
The privacy of a sponsorship
"""
enum SponsorshipPrivacy {
  PRIVATE
  PUBLIC
}

"""
The possible default commit messages for squash merges.
"""
enum SquashMergeCommitMessage {
  BLANK
  COMMIT_MESSAGES
  PR_BODY
}

"""
The possible default commit titles for squash merges.
"""
enum SquashMergeCommitTitle {
  COMMIT_OR_PR_TITLE
  PR_TITLE
}

"""
Represents an SSH signature on a Commit or Tag.
"""
type SshSignature implements GitSignature {
  email: String!
  isValid: Boolean!
  keyFingerprint: String
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

"""
Ways in which star connections can be ordered.
"""
input StarOrder {
  direction: OrderDirection!
  field: StarOrderField!
}

"""
Properties by which star connections can be ordered.
"""
enum StarOrderField {
  STARRED_AT
}

"""
The connection type for User.
"""
type StargazerConnection {
  edges: [StargazerEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a user that's starred a repository.
"""
type StargazerEdge {
  cursor: String!
  node: User!
  starredAt: DateTime!
}

"""
Things that can be starred.
"""
interface Starrable {
  id: ID!
  stargazerCount: Int!
  stargazers: StargazerConnection!
  viewerHasStarred: Boolean!
}

"""
The connection type for Repository.
"""
type StarredRepositoryConnection {
  edges: [StarredRepositoryEdge]
  isOverLimit: Boolean!
  nodes: [Repository]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a starred repository.
"""
type StarredRepositoryEdge {
  cursor: String!
  node: Repository!
  starredAt: DateTime!
}

"""
Autogenerated input type of StartOrganizationMigration
"""
input StartOrganizationMigrationInput {
  clientMutationId: String
  sourceAccessToken: String!
  sourceOrgUrl: URI!
  targetEnterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  targetOrgName: String!
}

"""
Autogenerated return type of StartOrganizationMigration
"""
type StartOrganizationMigrationPayload {
  clientMutationId: String
  orgMigration: OrganizationMigration
}

"""
Autogenerated input type of StartRepositoryMigration
"""
input StartRepositoryMigrationInput {
  accessToken: String
  clientMutationId: String
  continueOnError: Boolean
  gitArchiveUrl: String
  githubPat: String
  lockSource: Boolean
  metadataArchiveUrl: String
  ownerId: ID!@possibleTypes(concreteTypes: ("Organization"))
  repositoryName: String!
  skipReleases: Boolean
  sourceId: ID!@possibleTypes(concreteTypes: ("MigrationSource"))
  sourceRepositoryUrl: URI
  targetRepoVisibility: String
}

"""
Autogenerated return type of StartRepositoryMigration
"""
type StartRepositoryMigrationPayload {
  clientMutationId: String
  repositoryMigration: RepositoryMigration
}

"""
Represents a commit status.
"""
type Status implements Node {
  combinedContexts: StatusCheckRollupContextConnection!
  commit: Commit
  context: StatusContext
  contexts: [StatusContext!]!
  id: ID!
  state: StatusState!
}

"""
Required status check
"""
type StatusCheckConfiguration {
  context: String!
  integrationId: Int
}

"""
Required status check
"""
input StatusCheckConfigurationInput {
  context: String!
  integrationId: Int
}

"""
Represents the rollup for both the check runs and status for a commit.
"""
type StatusCheckRollup implements Node {
  commit: Commit
  contexts: StatusCheckRollupContextConnection!
  id: ID!
  state: StatusState!
}

"""
Types that can be inside a StatusCheckRollup context.
"""
union StatusCheckRollupContext = CheckRun | StatusContext

"""
The connection type for StatusCheckRollupContext.
"""
type StatusCheckRollupContextConnection {
  checkRunCount: Int!
  checkRunCountsByState: [CheckRunStateCount!]
  edges: [StatusCheckRollupContextEdge]
  nodes: [StatusCheckRollupContext]
  pageInfo: PageInfo!
  statusContextCount: Int!
  statusContextCountsByState: [StatusContextStateCount!]
  totalCount: Int!
}

"""
An edge in a connection.
"""
type StatusCheckRollupContextEdge {
  cursor: String!
  node: StatusCheckRollupContext
}

"""
Represents an individual commit status context
"""
type StatusContext implements Node & RequirableByPullRequest {
  avatarUrl: URI
  commit: Commit
  context: String!
  createdAt: DateTime!
  creator: Actor
  description: String
  id: ID!
  isRequired: Boolean!
  state: StatusState!
  targetUrl: URI
}

"""
Represents a count of the state of a status context.
"""
type StatusContextStateCount {
  count: Int!
  state: StatusState!
}

"""
The possible commit status states.
"""
enum StatusState {
  ERROR
  EXPECTED
  FAILURE
  PENDING
  SUCCESS
}

"""
A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
"""
type StripeConnectAccount {
  accountId: String!
  billingCountryOrRegion: String
  countryOrRegion: String
  isActive: Boolean!
  sponsorsListing: SponsorsListing!
  stripeDashboardUrl: URI!
}

"""
Autogenerated input type of SubmitPullRequestReview
"""
input SubmitPullRequestReviewInput {
  body: String
  clientMutationId: String
  event: PullRequestReviewEvent!
  pullRequestId: ID@possibleTypes(concreteTypes: ("PullRequest"))
  pullRequestReviewId: ID@possibleTypes(concreteTypes: ("PullRequestReview"))
}

"""
Autogenerated return type of SubmitPullRequestReview
"""
type SubmitPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
}

"""
A pointer to a repository at a specific revision embedded inside another repository.
"""
type Submodule {
  branch: String
  gitUrl: URI!
  name: String!
  nameRaw: Base64String!
  path: String!
  pathRaw: Base64String!
  subprojectCommitOid: GitObjectID
}

"""
The connection type for Submodule.
"""
type SubmoduleConnection {
  edges: [SubmoduleEdge]
  nodes: [Submodule]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SubmoduleEdge {
  cursor: String!
  node: Submodule
}

"""
Entities that can be subscribed to for web and email notifications.
"""
interface Subscribable {
  id: ID!
  viewerCanSubscribe: Boolean!
  viewerSubscription: SubscriptionState
}

"""
Entities that can be subscribed to for web and email notifications.
"""
interface SubscribableThread {
  id: ID!
  viewerThreadSubscriptionFormAction: ThreadSubscriptionFormAction
  viewerThreadSubscriptionStatus: ThreadSubscriptionState
}

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
type SubscribedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  subscribable: Subscribable!
}

"""
The possible states of a subscription.
"""
enum SubscriptionState {
  IGNORED
  SUBSCRIBED
  UNSUBSCRIBED
}

"""
A suggestion to review a pull request based on a user's commit history and review comments.
"""
type SuggestedReviewer {
  isAuthor: Boolean!
  isCommenter: Boolean!
  reviewer: User!
}

"""
Represents a Git tag.
"""
type Tag implements GitObject & Node {
  abbreviatedOid: String!
  commitResourcePath: URI!
  commitUrl: URI!
  id: ID!
  message: String
  name: String!
  oid: GitObjectID!
  repository: Repository!
  tagger: GitActor
  target: GitObject!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
type TagNamePatternParameters {
  name: String
  negate: Boolean!
  operator: String!
  pattern: String!
}

"""
Parameters to be used for the tag_name_pattern rule
"""
input TagNamePatternParametersInput {
  name: String
  negate: Boolean
  operator: String!
  pattern: String!
}

"""
A team of users in an organization.
"""
type Team implements MemberStatusable & Node & Subscribable {
  ancestors: TeamConnection!
  avatarUrl: URI
  childTeams: TeamConnection!
  combinedSlug: String!
  createdAt: DateTime!
  databaseId: Int
  description: String
  discussion: TeamDiscussion
  discussions: TeamDiscussionConnection!
  discussionsResourcePath: URI!
  discussionsUrl: URI!
  editTeamResourcePath: URI!
  editTeamUrl: URI!
  id: ID!
  invitations: OrganizationInvitationConnection
  memberStatuses: UserStatusConnection!
  members: TeamMemberConnection!
  membersResourcePath: URI!
  membersUrl: URI!
  name: String!
  newTeamResourcePath: URI!
  newTeamUrl: URI!
  notificationSetting: TeamNotificationSetting!
  organization: Organization!
  parentTeam: Team
  privacy: TeamPrivacy!
  projectV2: ProjectV2
  projectsV2: ProjectV2Connection!
  repositories: TeamRepositoryConnection!
  repositoriesResourcePath: URI!
  repositoriesUrl: URI!
  resourcePath: URI!
  reviewRequestDelegationAlgorithm: TeamReviewAssignmentAlgorithm@preview(toggledBy: "stone-crop-preview")
  reviewRequestDelegationEnabled: Boolean!@preview(toggledBy: "stone-crop-preview")
  reviewRequestDelegationMemberCount: Int@preview(toggledBy: "stone-crop-preview")
  reviewRequestDelegationNotifyTeam: Boolean!@preview(toggledBy: "stone-crop-preview")
  slug: String!
  teamsResourcePath: URI!
  teamsUrl: URI!
  updatedAt: DateTime!
  url: URI!
  viewerCanAdminister: Boolean!
  viewerCanSubscribe: Boolean!
  viewerSubscription: SubscriptionState
}

"""
Audit log entry for a team.add_member event.
"""
type TeamAddMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a team.add_repository event.
"""
type TeamAddRepositoryAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Metadata for an audit entry with action team.*
"""
interface TeamAuditEntryData {
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
}

"""
Audit log entry for a team.change_parent_team event.
"""
type TeamChangeParentTeamAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  parentTeam: Team
  parentTeamName: String
  parentTeamNameWas: String
  parentTeamResourcePath: URI
  parentTeamUrl: URI
  parentTeamWas: Team
  parentTeamWasResourcePath: URI
  parentTeamWasUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The connection type for Team.
"""
type TeamConnection {
  edges: [TeamEdge]
  nodes: [Team]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A team discussion.
"""
type TeamDiscussion implements Comment & Deletable & Node & Reactable & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  bodyVersion: String!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  comments: TeamDiscussionCommentConnection!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  commentsResourcePath: URI!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  commentsUrl: URI!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isPinned: Boolean!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  isPrivate: Boolean!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  lastEditedAt: DateTime
  number: Int!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  resourcePath: URI!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  team: Team!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  title: String!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  updatedAt: DateTime!
  url: URI!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  userContentEdits: UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanPin: Boolean!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  viewerCanReact: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerSubscription: SubscriptionState
}

"""
A comment on a team discussion.
"""
type TeamDiscussionComment implements Comment & Deletable & Node & Reactable & UniformResourceLocatable & Updatable & UpdatableComment {
  author: Actor
  authorAssociation: CommentAuthorAssociation!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  body: String!
  bodyHTML: HTML!
  bodyText: String!
  bodyVersion: String!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  createdAt: DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  discussion: TeamDiscussion!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  editor: Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: DateTime
  number: Int!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  publishedAt: DateTime
  reactionGroups: [ReactionGroup!]
  reactions: ReactionConnection!
  resourcePath: URI!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  updatedAt: DateTime!
  url: URI!@deprecated(reason: "The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.")
  userContentEdits: UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

"""
The connection type for TeamDiscussionComment.
"""
type TeamDiscussionCommentConnection {
  edges: [TeamDiscussionCommentEdge]
  nodes: [TeamDiscussionComment]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TeamDiscussionCommentEdge {
  cursor: String!
  node: TeamDiscussionComment
}

"""
Ways in which team discussion comment connections can be ordered.
"""
input TeamDiscussionCommentOrder {
  direction: OrderDirection!
  field: TeamDiscussionCommentOrderField!
}

"""
Properties by which team discussion comment connections can be ordered.
"""
enum TeamDiscussionCommentOrderField {
  NUMBER
}

"""
The connection type for TeamDiscussion.
"""
type TeamDiscussionConnection {
  edges: [TeamDiscussionEdge]
  nodes: [TeamDiscussion]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TeamDiscussionEdge {
  cursor: String!
  node: TeamDiscussion
}

"""
Ways in which team discussion connections can be ordered.
"""
input TeamDiscussionOrder {
  direction: OrderDirection!
  field: TeamDiscussionOrderField!
}

"""
Properties by which team discussion connections can be ordered.
"""
enum TeamDiscussionOrderField {
  CREATED_AT
}

"""
An edge in a connection.
"""
type TeamEdge {
  cursor: String!
  node: Team
}

"""
The connection type for User.
"""
type TeamMemberConnection {
  edges: [TeamMemberEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a user who is a member of a team.
"""
type TeamMemberEdge {
  cursor: String!
  memberAccessResourcePath: URI!
  memberAccessUrl: URI!
  node: User!
  role: TeamMemberRole!
}

"""
Ordering options for team member connections
"""
input TeamMemberOrder {
  direction: OrderDirection!
  field: TeamMemberOrderField!
}

"""
Properties by which team member connections can be ordered.
"""
enum TeamMemberOrderField {
  CREATED_AT
  LOGIN
}

"""
The possible team member roles; either 'maintainer' or 'member'.
"""
enum TeamMemberRole {
  MAINTAINER
  MEMBER
}

"""
Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
"""
enum TeamMembershipType {
  ALL
  CHILD_TEAM
  IMMEDIATE
}

"""
The possible team notification values.
"""
enum TeamNotificationSetting {
  NOTIFICATIONS_DISABLED
  NOTIFICATIONS_ENABLED
}

"""
Ways in which team connections can be ordered.
"""
input TeamOrder {
  direction: OrderDirection!
  field: TeamOrderField!
}

"""
Properties by which team connections can be ordered.
"""
enum TeamOrderField {
  NAME
}

"""
The possible team privacy values.
"""
enum TeamPrivacy {
  SECRET
  VISIBLE
}

"""
Audit log entry for a team.remove_member event.
"""
type TeamRemoveMemberAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
Audit log entry for a team.remove_repository event.
"""
type TeamRemoveRepositoryAuditEntry implements AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData {
  action: String!
  actor: AuditEntryActor
  actorIp: String
  actorLocation: ActorLocation
  actorLogin: String
  actorResourcePath: URI
  actorUrl: URI
  createdAt: PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: OperationType
  organization: Organization
  organizationName: String
  organizationResourcePath: URI
  organizationUrl: URI
  repository: Repository
  repositoryName: String
  repositoryResourcePath: URI
  repositoryUrl: URI
  team: Team
  teamName: String
  teamResourcePath: URI
  teamUrl: URI
  user: User
  userLogin: String
  userResourcePath: URI
  userUrl: URI
}

"""
The connection type for Repository.
"""
type TeamRepositoryConnection {
  edges: [TeamRepositoryEdge]
  nodes: [Repository]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Represents a team repository.
"""
type TeamRepositoryEdge {
  cursor: String!
  node: Repository!
  permission: RepositoryPermission!
}

"""
Ordering options for team repository connections
"""
input TeamRepositoryOrder {
  direction: OrderDirection!
  field: TeamRepositoryOrderField!
}

"""
Properties by which team repository connections can be ordered.
"""
enum TeamRepositoryOrderField {
  CREATED_AT
  NAME
  PERMISSION
  PUSHED_AT
  STARGAZERS
  UPDATED_AT
}

"""
The possible team review assignment algorithms
"""
enum TeamReviewAssignmentAlgorithm  @preview(toggledBy: "stone-crop-preview"){
  LOAD_BALANCE
  ROUND_ROBIN
}

"""
The role of a user on a team.
"""
enum TeamRole {
  ADMIN
  MEMBER
}

"""
A text match within a search result.
"""
type TextMatch {
  fragment: String!
  highlights: [TextMatchHighlight!]!
  property: String!
}

"""
Represents a single highlight in a search result match.
"""
type TextMatchHighlight {
  beginIndice: Int!
  endIndice: Int!
  text: String!
}

"""
The possible states of a thread subscription form action
"""
enum ThreadSubscriptionFormAction {
  NONE
  SUBSCRIBE
  UNSUBSCRIBE
}

"""
The possible states of a subscription.
"""
enum ThreadSubscriptionState {
  DISABLED
  IGNORING_LIST
  IGNORING_THREAD
  NONE
  SUBSCRIBED_TO_LIST
  SUBSCRIBED_TO_THREAD
  SUBSCRIBED_TO_THREAD_EVENTS
  SUBSCRIBED_TO_THREAD_TYPE
  UNAVAILABLE
}

"""
A topic aggregates entities that are related to a subject.
"""
type Topic implements Node & Starrable {
  id: ID!
  name: String!
  relatedTopics: [Topic!]!
  repositories: RepositoryConnection!
  stargazerCount: Int!
  stargazers: StargazerConnection!
  viewerHasStarred: Boolean!
}

"""
Metadata for an audit entry with a topic.
"""
interface TopicAuditEntryData {
  topic: Topic
  topicName: String
}

"""
Reason that the suggested topic is declined.
"""
enum TopicSuggestionDeclineReason {
  NOT_RELEVANT
  PERSONAL_PREFERENCE
  TOO_GENERAL
  TOO_SPECIFIC
}

"""
The possible states of a tracked issue.
"""
enum TrackedIssueStates {
  CLOSED
  OPEN
}

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
input TransferEnterpriseOrganizationInput {
  clientMutationId: String
  destinationEnterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
type TransferEnterpriseOrganizationPayload {
  clientMutationId: String
  organization: Organization
}

"""
Autogenerated input type of TransferIssue
"""
input TransferIssueInput {
  clientMutationId: String
  createLabelsIfMissing: Boolean = false
  issueId: ID!@possibleTypes(concreteTypes: ("Issue"))
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of TransferIssue
"""
type TransferIssuePayload {
  clientMutationId: String
  issue: Issue
}

"""
Represents a 'transferred' event on a given issue or pull request.
"""
type TransferredEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  fromRepository: Repository
  id: ID!
  issue: Issue!
}

"""
Represents a Git tree.
"""
type Tree implements GitObject & Node {
  abbreviatedOid: String!
  commitResourcePath: URI!
  commitUrl: URI!
  entries: [TreeEntry!]
  id: ID!
  oid: GitObjectID!
  repository: Repository!
}

"""
Represents a Git tree entry.
"""
type TreeEntry {
  extension: String
  isGenerated: Boolean!
  language: Language
  lineCount: Int
  mode: Int!
  name: String!
  nameRaw: Base64String!
  object: GitObject
  oid: GitObjectID!
  path: String
  pathRaw: Base64String
  repository: Repository!
  size: Int!
  submodule: Submodule
  type: String!
}

"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""
scalar URI 

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
input UnarchiveProjectV2ItemInput {
  clientMutationId: String
  itemId: ID!@possibleTypes(concreteTypes: ("ProjectV2Item"))
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
type UnarchiveProjectV2ItemPayload {
  clientMutationId: String
  item: ProjectV2Item
}

"""
Autogenerated input type of UnarchiveRepository
"""
input UnarchiveRepositoryInput {
  clientMutationId: String
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of UnarchiveRepository
"""
type UnarchiveRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

"""
Represents an 'unassigned' event on any assignable object.
"""
type UnassignedEvent implements Node {
  actor: Actor
  assignable: Assignable!
  assignee: Assignee
  createdAt: DateTime!
  id: ID!
  user: User@deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

"""
Autogenerated input type of UnfollowOrganization
"""
input UnfollowOrganizationInput {
  clientMutationId: String
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of UnfollowOrganization
"""
type UnfollowOrganizationPayload {
  clientMutationId: String
  organization: Organization
}

"""
Autogenerated input type of UnfollowUser
"""
input UnfollowUserInput {
  clientMutationId: String
  userId: ID!@possibleTypes(concreteTypes: ("User"))
}

"""
Autogenerated return type of UnfollowUser
"""
type UnfollowUserPayload {
  clientMutationId: String
  user: User
}

"""
Represents a type that can be retrieved by a URL.
"""
interface UniformResourceLocatable {
  resourcePath: URI!
  url: URI!
}

"""
Represents an unknown signature on a Commit or Tag.
"""
type UnknownSignature implements GitSignature {
  email: String!
  isValid: Boolean!
  payload: String!
  signature: String!
  signer: User
  state: GitSignatureState!
  wasSignedByGitHub: Boolean!
}

"""
Represents an 'unlabeled' event on a given issue or pull request.
"""
type UnlabeledEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  label: Label!
  labelable: Labelable!
}

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
input UnlinkProjectV2FromRepositoryInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
type UnlinkProjectV2FromRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
input UnlinkProjectV2FromTeamInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  teamId: ID!@possibleTypes(concreteTypes: ("Team"))
}

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
type UnlinkProjectV2FromTeamPayload {
  clientMutationId: String
  team: Team
}

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
input UnlinkRepositoryFromProjectInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("Project"))
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of UnlinkRepositoryFromProject
"""
type UnlinkRepositoryFromProjectPayload {
  clientMutationId: String
  project: Project
  repository: Repository
}

"""
Autogenerated input type of UnlockLockable
"""
input UnlockLockableInput {
  clientMutationId: String
  lockableId: ID!@possibleTypes(concreteTypes: ("Discussion","Issue","PullRequest"), abstractType: "Lockable")
}

"""
Autogenerated return type of UnlockLockable
"""
type UnlockLockablePayload {
  actor: Actor
  clientMutationId: String
  unlockedRecord: Lockable
}

"""
Represents an 'unlocked' event on a given issue or pull request.
"""
type UnlockedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  lockable: Lockable!
}

"""
Autogenerated input type of UnmarkDiscussionCommentAsAnswer
"""
input UnmarkDiscussionCommentAsAnswerInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("DiscussionComment"))
}

"""
Autogenerated return type of UnmarkDiscussionCommentAsAnswer
"""
type UnmarkDiscussionCommentAsAnswerPayload {
  clientMutationId: String
  discussion: Discussion
}

"""
Autogenerated input type of UnmarkFileAsViewed
"""
input UnmarkFileAsViewedInput {
  clientMutationId: String
  path: String!
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
}

"""
Autogenerated return type of UnmarkFileAsViewed
"""
type UnmarkFileAsViewedPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Autogenerated input type of UnmarkIssueAsDuplicate
"""
input UnmarkIssueAsDuplicateInput {
  canonicalId: ID!@possibleTypes(concreteTypes: ("Issue","PullRequest"), abstractType: "IssueOrPullRequest")
  clientMutationId: String
  duplicateId: ID!@possibleTypes(concreteTypes: ("Issue","PullRequest"), abstractType: "IssueOrPullRequest")
}

"""
Autogenerated return type of UnmarkIssueAsDuplicate
"""
type UnmarkIssueAsDuplicatePayload {
  clientMutationId: String
  duplicate: IssueOrPullRequest
}

"""
Autogenerated input type of UnmarkProjectV2AsTemplate
"""
input UnmarkProjectV2AsTemplateInput {
  clientMutationId: String
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of UnmarkProjectV2AsTemplate
"""
type UnmarkProjectV2AsTemplatePayload {
  clientMutationId: String
  projectV2: ProjectV2
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type UnmarkedAsDuplicateEvent implements Node {
  actor: Actor
  canonical: IssueOrPullRequest
  createdAt: DateTime!
  duplicate: IssueOrPullRequest
  id: ID!
  isCrossRepository: Boolean!
}

"""
Autogenerated input type of UnminimizeComment
"""
input UnminimizeCommentInput {
  clientMutationId: String
  subjectId: ID!@possibleTypes(concreteTypes: ("CommitComment","DiscussionComment","GistComment","IssueComment","PullRequestReviewComment"), abstractType: "Minimizable")
}

"""
Autogenerated return type of UnminimizeComment
"""
type UnminimizeCommentPayload {
  clientMutationId: String
  unminimizedComment: Minimizable
}

"""
Autogenerated input type of UnpinIssue
"""
input UnpinIssueInput {
  clientMutationId: String
  issueId: ID!@possibleTypes(concreteTypes: ("Issue"))
}

"""
Autogenerated return type of UnpinIssue
"""
type UnpinIssuePayload {
  clientMutationId: String
  issue: Issue
}

"""
Represents an 'unpinned' event on a given issue or pull request.
"""
type UnpinnedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  issue: Issue!
}

"""
Autogenerated input type of UnresolveReviewThread
"""
input UnresolveReviewThreadInput {
  clientMutationId: String
  threadId: ID!@possibleTypes(concreteTypes: ("PullRequestReviewThread"))
}

"""
Autogenerated return type of UnresolveReviewThread
"""
type UnresolveReviewThreadPayload {
  clientMutationId: String
  thread: PullRequestReviewThread
}

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
type UnsubscribedEvent implements Node {
  actor: Actor
  createdAt: DateTime!
  id: ID!
  subscribable: Subscribable!
}

"""
Entities that can be updated.
"""
interface Updatable {
  viewerCanUpdate: Boolean!
}

"""
Comments that can be updated.
"""
interface UpdatableComment {
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
}

"""
Autogenerated input type of UpdateBranchProtectionRule
"""
input UpdateBranchProtectionRuleInput {
  allowsDeletions: Boolean
  allowsForcePushes: Boolean
  blocksCreations: Boolean
  branchProtectionRuleId: ID!@possibleTypes(concreteTypes: ("BranchProtectionRule"))
  bypassForcePushActorIds: [ID!]
  bypassPullRequestActorIds: [ID!]
  clientMutationId: String
  dismissesStaleReviews: Boolean
  isAdminEnforced: Boolean
  lockAllowsFetchAndMerge: Boolean
  lockBranch: Boolean
  pattern: String
  pushActorIds: [ID!]
  requireLastPushApproval: Boolean
  requiredApprovingReviewCount: Int
  requiredDeploymentEnvironments: [String!]
  requiredStatusCheckContexts: [String!]
  requiredStatusChecks: [RequiredStatusCheckInput!]
  requiresApprovingReviews: Boolean
  requiresCodeOwnerReviews: Boolean
  requiresCommitSignatures: Boolean
  requiresConversationResolution: Boolean
  requiresDeployments: Boolean
  requiresLinearHistory: Boolean
  requiresStatusChecks: Boolean
  requiresStrictStatusChecks: Boolean
  restrictsPushes: Boolean
  restrictsReviewDismissals: Boolean
  reviewDismissalActorIds: [ID!]
}

"""
Autogenerated return type of UpdateBranchProtectionRule
"""
type UpdateBranchProtectionRulePayload {
  branchProtectionRule: BranchProtectionRule
  clientMutationId: String
}

"""
Autogenerated input type of UpdateCheckRun
"""
input UpdateCheckRunInput {
  actions: [CheckRunAction!]
  checkRunId: ID!@possibleTypes(concreteTypes: ("CheckRun"))
  clientMutationId: String
  completedAt: DateTime
  conclusion: CheckConclusionState
  detailsUrl: URI
  externalId: String
  name: String
  output: CheckRunOutput
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  startedAt: DateTime
  status: RequestableCheckStatusState
}

"""
Autogenerated return type of UpdateCheckRun
"""
type UpdateCheckRunPayload {
  checkRun: CheckRun
  clientMutationId: String
}

"""
Autogenerated input type of UpdateCheckSuitePreferences
"""
input UpdateCheckSuitePreferencesInput {
  autoTriggerPreferences: [CheckSuiteAutoTriggerPreference!]!
  clientMutationId: String
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of UpdateCheckSuitePreferences
"""
type UpdateCheckSuitePreferencesPayload {
  clientMutationId: String
  repository: Repository
}

"""
Autogenerated input type of UpdateDiscussionComment
"""
input UpdateDiscussionCommentInput {
  body: String!
  clientMutationId: String
  commentId: ID!@possibleTypes(concreteTypes: ("DiscussionComment"))
}

"""
Autogenerated return type of UpdateDiscussionComment
"""
type UpdateDiscussionCommentPayload {
  clientMutationId: String
  comment: DiscussionComment
}

"""
Autogenerated input type of UpdateDiscussion
"""
input UpdateDiscussionInput {
  body: String
  categoryId: ID@possibleTypes(concreteTypes: ("DiscussionCategory"))
  clientMutationId: String
  discussionId: ID!@possibleTypes(concreteTypes: ("Discussion"))
  title: String
}

"""
Autogenerated return type of UpdateDiscussion
"""
type UpdateDiscussionPayload {
  clientMutationId: String
  discussion: Discussion
}

"""
Autogenerated input type of UpdateEnterpriseAdministratorRole
"""
input UpdateEnterpriseAdministratorRoleInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  login: String!
  role: EnterpriseAdministratorRole!
}

"""
Autogenerated return type of UpdateEnterpriseAdministratorRole
"""
type UpdateEnterpriseAdministratorRolePayload {
  clientMutationId: String
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
input UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  policyValue: EnterpriseAllowPrivateRepositoryForkingPolicyValue
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
input UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
input UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
input UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  membersCanCreateInternalRepositories: Boolean
  membersCanCreatePrivateRepositories: Boolean
  membersCanCreatePublicRepositories: Boolean
  membersCanCreateRepositoriesPolicyEnabled: Boolean
  settingValue: EnterpriseMembersCanCreateRepositoriesSettingValue
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
input UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
input UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
input UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
input UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseMembersCanMakePurchasesSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
type UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
input UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
input UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
"""
input UpdateEnterpriseOrganizationProjectsSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
"""
type UpdateEnterpriseOrganizationProjectsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole
"""
input UpdateEnterpriseOwnerOrganizationRoleInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
  organizationRole: RoleInOrganization!
}

"""
Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole
"""
type UpdateEnterpriseOwnerOrganizationRolePayload {
  clientMutationId: String
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseProfile
"""
input UpdateEnterpriseProfileInput {
  clientMutationId: String
  description: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  location: String
  name: String
  websiteUrl: String
}

"""
Autogenerated return type of UpdateEnterpriseProfile
"""
type UpdateEnterpriseProfilePayload {
  clientMutationId: String
  enterprise: Enterprise
}

"""
Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
"""
input UpdateEnterpriseRepositoryProjectsSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
"""
type UpdateEnterpriseRepositoryProjectsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
"""
input UpdateEnterpriseTeamDiscussionsSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledDisabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
"""
type UpdateEnterpriseTeamDiscussionsSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
input UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  clientMutationId: String
  enterpriseId: ID!@possibleTypes(concreteTypes: ("Enterprise"))
  settingValue: EnterpriseEnabledSettingValue!
}

"""
Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  clientMutationId: String
  enterprise: Enterprise
  message: String
}

"""
Autogenerated input type of UpdateEnvironment
"""
input UpdateEnvironmentInput {
  clientMutationId: String
  environmentId: ID!@possibleTypes(concreteTypes: ("Environment"))
  reviewers: [ID!]
  waitTimer: Int
}

"""
Autogenerated return type of UpdateEnvironment
"""
type UpdateEnvironmentPayload {
  clientMutationId: String
  environment: Environment
}

"""
Autogenerated input type of UpdateIpAllowListEnabledSetting
"""
input UpdateIpAllowListEnabledSettingInput {
  clientMutationId: String
  ownerId: ID!@possibleTypes(concreteTypes: ("App","Enterprise","Organization"), abstractType: "IpAllowListOwner")
  settingValue: IpAllowListEnabledSettingValue!
}

"""
Autogenerated return type of UpdateIpAllowListEnabledSetting
"""
type UpdateIpAllowListEnabledSettingPayload {
  clientMutationId: String
  owner: IpAllowListOwner
}

"""
Autogenerated input type of UpdateIpAllowListEntry
"""
input UpdateIpAllowListEntryInput {
  allowListValue: String!
  clientMutationId: String
  ipAllowListEntryId: ID!@possibleTypes(concreteTypes: ("IpAllowListEntry"))
  isActive: Boolean!
  name: String
}

"""
Autogenerated return type of UpdateIpAllowListEntry
"""
type UpdateIpAllowListEntryPayload {
  clientMutationId: String
  ipAllowListEntry: IpAllowListEntry
}

"""
Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
input UpdateIpAllowListForInstalledAppsEnabledSettingInput {
  clientMutationId: String
  ownerId: ID!@possibleTypes(concreteTypes: ("App","Enterprise","Organization"), abstractType: "IpAllowListOwner")
  settingValue: IpAllowListForInstalledAppsEnabledSettingValue!
}

"""
Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
type UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  clientMutationId: String
  owner: IpAllowListOwner
}

"""
Autogenerated input type of UpdateIssueComment
"""
input UpdateIssueCommentInput {
  body: String!
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("IssueComment"))
}

"""
Autogenerated return type of UpdateIssueComment
"""
type UpdateIssueCommentPayload {
  clientMutationId: String
  issueComment: IssueComment
}

"""
Autogenerated input type of UpdateIssue
"""
input UpdateIssueInput {
  assigneeIds: [ID!]@possibleTypes(concreteTypes: ("User"))
  body: String
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("Issue"))
  labelIds: [ID!]@possibleTypes(concreteTypes: ("Label"))
  milestoneId: ID@possibleTypes(concreteTypes: ("Milestone"))
  projectIds: [ID!]
  state: IssueState
  title: String
}

"""
Autogenerated return type of UpdateIssue
"""
type UpdateIssuePayload {
  actor: Actor
  clientMutationId: String
  issue: Issue
}

"""
Autogenerated input type of UpdateLabel
"""
input UpdateLabelInput @preview(toggledBy: "bane-preview") {
  clientMutationId: String
  color: String
  description: String
  id: ID!@possibleTypes(concreteTypes: ("Label"))
  name: String
}

"""
Autogenerated return type of UpdateLabel
"""
type UpdateLabelPayload @preview(toggledBy: "bane-preview") {
  clientMutationId: String
  label: Label
}

"""
Autogenerated input type of UpdateNotificationRestrictionSetting
"""
input UpdateNotificationRestrictionSettingInput {
  clientMutationId: String
  ownerId: ID!@possibleTypes(concreteTypes: ("Enterprise","Organization"), abstractType: "VerifiableDomainOwner")
  settingValue: NotificationRestrictionSettingValue!
}

"""
Autogenerated return type of UpdateNotificationRestrictionSetting
"""
type UpdateNotificationRestrictionSettingPayload {
  clientMutationId: String
  owner: VerifiableDomainOwner
}

"""
Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
"""
input UpdateOrganizationAllowPrivateRepositoryForkingSettingInput {
  clientMutationId: String
  forkingEnabled: Boolean!
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
}

"""
Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
"""
type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
  clientMutationId: String
  message: String
  organization: Organization
}

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
input UpdateOrganizationWebCommitSignoffSettingInput {
  clientMutationId: String
  organizationId: ID!@possibleTypes(concreteTypes: ("Organization"))
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
type UpdateOrganizationWebCommitSignoffSettingPayload {
  clientMutationId: String
  message: String
  organization: Organization
}

"""
Only allow users with bypass permission to update matching refs.
"""
type UpdateParameters {
  updateAllowsFetchAndMerge: Boolean!
}

"""
Only allow users with bypass permission to update matching refs.
"""
input UpdateParametersInput {
  updateAllowsFetchAndMerge: Boolean!
}

"""
Autogenerated input type of UpdateProjectCard
"""
input UpdateProjectCardInput {
  clientMutationId: String
  isArchived: Boolean
  note: String
  projectCardId: ID!@possibleTypes(concreteTypes: ("ProjectCard"))
}

"""
Autogenerated return type of UpdateProjectCard
"""
type UpdateProjectCardPayload {
  clientMutationId: String
  projectCard: ProjectCard
}

"""
Autogenerated input type of UpdateProjectColumn
"""
input UpdateProjectColumnInput {
  clientMutationId: String
  name: String!
  projectColumnId: ID!@possibleTypes(concreteTypes: ("ProjectColumn"))
}

"""
Autogenerated return type of UpdateProjectColumn
"""
type UpdateProjectColumnPayload {
  clientMutationId: String
  projectColumn: ProjectColumn
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  body: String
  clientMutationId: String
  name: String
  projectId: ID!@possibleTypes(concreteTypes: ("Project"))
  public: Boolean
  state: ProjectState
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  clientMutationId: String
  project: Project
}

"""
Autogenerated input type of UpdateProjectV2Collaborators
"""
input UpdateProjectV2CollaboratorsInput {
  clientMutationId: String
  collaborators: [ProjectV2Collaborator!]!
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of UpdateProjectV2Collaborators
"""
type UpdateProjectV2CollaboratorsPayload {
  clientMutationId: String
  collaborators: ProjectV2ActorConnection
}

"""
Autogenerated input type of UpdateProjectV2DraftIssue
"""
input UpdateProjectV2DraftIssueInput {
  assigneeIds: [ID!]@possibleTypes(concreteTypes: ("User"))
  body: String
  clientMutationId: String
  draftIssueId: ID!@possibleTypes(concreteTypes: ("DraftIssue"))
  title: String
}

"""
Autogenerated return type of UpdateProjectV2DraftIssue
"""
type UpdateProjectV2DraftIssuePayload {
  clientMutationId: String
  draftIssue: DraftIssue
}

"""
Autogenerated input type of UpdateProjectV2
"""
input UpdateProjectV2Input {
  clientMutationId: String
  closed: Boolean
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  public: Boolean
  readme: String
  shortDescription: String
  title: String
}

"""
Autogenerated input type of UpdateProjectV2ItemFieldValue
"""
input UpdateProjectV2ItemFieldValueInput {
  clientMutationId: String
  fieldId: ID!@possibleTypes(concreteTypes: ("ProjectV2Field","ProjectV2IterationField","ProjectV2SingleSelectField"), abstractType: "ProjectV2FieldConfiguration")
  itemId: ID!@possibleTypes(concreteTypes: ("ProjectV2Item"))
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
  value: ProjectV2FieldValue!
}

"""
Autogenerated return type of UpdateProjectV2ItemFieldValue
"""
type UpdateProjectV2ItemFieldValuePayload {
  clientMutationId: String
  projectV2Item: ProjectV2Item
}

"""
Autogenerated input type of UpdateProjectV2ItemPosition
"""
input UpdateProjectV2ItemPositionInput {
  afterId: ID@possibleTypes(concreteTypes: ("ProjectV2Item"))
  clientMutationId: String
  itemId: ID!@possibleTypes(concreteTypes: ("ProjectV2Item"))
  projectId: ID!@possibleTypes(concreteTypes: ("ProjectV2"))
}

"""
Autogenerated return type of UpdateProjectV2ItemPosition
"""
type UpdateProjectV2ItemPositionPayload {
  clientMutationId: String
  items: ProjectV2ItemConnection
}

"""
Autogenerated return type of UpdateProjectV2
"""
type UpdateProjectV2Payload {
  clientMutationId: String
  projectV2: ProjectV2
}

"""
Autogenerated input type of UpdatePullRequestBranch
"""
input UpdatePullRequestBranchInput {
  clientMutationId: String
  expectedHeadOid: GitObjectID
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
  updateMethod: PullRequestBranchUpdateMethod
}

"""
Autogenerated return type of UpdatePullRequestBranch
"""
type UpdatePullRequestBranchPayload {
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Autogenerated input type of UpdatePullRequest
"""
input UpdatePullRequestInput {
  assigneeIds: [ID!]@possibleTypes(concreteTypes: ("User"))
  baseRefName: String
  body: String
  clientMutationId: String
  labelIds: [ID!]@possibleTypes(concreteTypes: ("Label"))
  maintainerCanModify: Boolean
  milestoneId: ID@possibleTypes(concreteTypes: ("Milestone"))
  projectIds: [ID!]
  pullRequestId: ID!@possibleTypes(concreteTypes: ("PullRequest"))
  state: PullRequestUpdateState
  title: String
}

"""
Autogenerated return type of UpdatePullRequest
"""
type UpdatePullRequestPayload {
  actor: Actor
  clientMutationId: String
  pullRequest: PullRequest
}

"""
Autogenerated input type of UpdatePullRequestReviewComment
"""
input UpdatePullRequestReviewCommentInput {
  body: String!
  clientMutationId: String
  pullRequestReviewCommentId: ID!@possibleTypes(concreteTypes: ("PullRequestReviewComment"))
}

"""
Autogenerated return type of UpdatePullRequestReviewComment
"""
type UpdatePullRequestReviewCommentPayload {
  clientMutationId: String
  pullRequestReviewComment: PullRequestReviewComment
}

"""
Autogenerated input type of UpdatePullRequestReview
"""
input UpdatePullRequestReviewInput {
  body: String!
  clientMutationId: String
  pullRequestReviewId: ID!@possibleTypes(concreteTypes: ("PullRequestReview"))
}

"""
Autogenerated return type of UpdatePullRequestReview
"""
type UpdatePullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: PullRequestReview
}

"""
Autogenerated input type of UpdateRef
"""
input UpdateRefInput {
  clientMutationId: String
  force: Boolean = false
  oid: GitObjectID!
  refId: ID!@possibleTypes(concreteTypes: ("Ref"))
}

"""
Autogenerated return type of UpdateRef
"""
type UpdateRefPayload {
  clientMutationId: String
  ref: Ref
}

"""
Autogenerated input type of UpdateRefs
"""
input UpdateRefsInput @preview(toggledBy: "update-refs-preview") {
  clientMutationId: String
  refUpdates: [RefUpdate!]!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
}

"""
Autogenerated return type of UpdateRefs
"""
type UpdateRefsPayload @preview(toggledBy: "update-refs-preview") {
  clientMutationId: String
}

"""
Autogenerated input type of UpdateRepository
"""
input UpdateRepositoryInput {
  clientMutationId: String
  description: String
  hasDiscussionsEnabled: Boolean
  hasIssuesEnabled: Boolean
  hasProjectsEnabled: Boolean
  hasWikiEnabled: Boolean
  homepageUrl: URI
  name: String
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  template: Boolean
}

"""
Autogenerated return type of UpdateRepository
"""
type UpdateRepositoryPayload {
  clientMutationId: String
  repository: Repository
}

"""
Autogenerated input type of UpdateRepositoryRuleset
"""
input UpdateRepositoryRulesetInput {
  bypassActors: [RepositoryRulesetBypassActorInput!]
  clientMutationId: String
  conditions: RepositoryRuleConditionsInput
  enforcement: RuleEnforcement
  name: String
  repositoryRulesetId: ID!@possibleTypes(concreteTypes: ("RepositoryRuleset"))
  rules: [RepositoryRuleInput!]
  target: RepositoryRulesetTarget
}

"""
Autogenerated return type of UpdateRepositoryRuleset
"""
type UpdateRepositoryRulesetPayload {
  clientMutationId: String
  ruleset: RepositoryRuleset
}

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
input UpdateRepositoryWebCommitSignoffSettingInput {
  clientMutationId: String
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  webCommitSignoffRequired: Boolean!
}

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
type UpdateRepositoryWebCommitSignoffSettingPayload {
  clientMutationId: String
  message: String
  repository: Repository
}

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
input UpdateSponsorshipPreferencesInput {
  clientMutationId: String
  privacyLevel: SponsorshipPrivacy = PUBLIC
  receiveEmails: Boolean = true
  sponsorId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "Sponsor")
  sponsorLogin: String
  sponsorableId: ID@possibleTypes(concreteTypes: ("Organization","User"), abstractType: "Sponsorable")
  sponsorableLogin: String
}

"""
Autogenerated return type of UpdateSponsorshipPreferences
"""
type UpdateSponsorshipPreferencesPayload {
  clientMutationId: String
  sponsorship: Sponsorship
}

"""
Autogenerated input type of UpdateSubscription
"""
input UpdateSubscriptionInput {
  clientMutationId: String
  state: SubscriptionState!
  subscribableId: ID!@possibleTypes(concreteTypes: ("Commit","Discussion","Issue","PullRequest","Repository","Team","TeamDiscussion"), abstractType: "Subscribable")
}

"""
Autogenerated return type of UpdateSubscription
"""
type UpdateSubscriptionPayload {
  clientMutationId: String
  subscribable: Subscribable
}

"""
Autogenerated input type of UpdateTeamDiscussionComment
"""
input UpdateTeamDiscussionCommentInput {
  body: String!
  bodyVersion: String
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("TeamDiscussionComment"))
}

"""
Autogenerated return type of UpdateTeamDiscussionComment
"""
type UpdateTeamDiscussionCommentPayload {
  clientMutationId: String
  teamDiscussionComment: TeamDiscussionComment
}

"""
Autogenerated input type of UpdateTeamDiscussion
"""
input UpdateTeamDiscussionInput {
  body: String
  bodyVersion: String
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("TeamDiscussion"))
  pinned: Boolean
  title: String
}

"""
Autogenerated return type of UpdateTeamDiscussion
"""
type UpdateTeamDiscussionPayload {
  clientMutationId: String
  teamDiscussion: TeamDiscussion
}

"""
Autogenerated input type of UpdateTeamReviewAssignment
"""
input UpdateTeamReviewAssignmentInput @preview(toggledBy: "stone-crop-preview") {
  algorithm: TeamReviewAssignmentAlgorithm = ROUND_ROBIN
  clientMutationId: String
  enabled: Boolean!
  excludedTeamMemberIds: [ID!]@possibleTypes(concreteTypes: ("User"))
  id: ID!@possibleTypes(concreteTypes: ("Team"))
  notifyTeam: Boolean = true
  teamMemberCount: Int = 1
}

"""
Autogenerated return type of UpdateTeamReviewAssignment
"""
type UpdateTeamReviewAssignmentPayload {
  clientMutationId: String
  team: Team
}

"""
Autogenerated input type of UpdateTeamsRepository
"""
input UpdateTeamsRepositoryInput {
  clientMutationId: String
  permission: RepositoryPermission!
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  teamIds: [ID!]!@possibleTypes(concreteTypes: ("Team"))
}

"""
Autogenerated return type of UpdateTeamsRepository
"""
type UpdateTeamsRepositoryPayload {
  clientMutationId: String
  repository: Repository
  teams: [Team!]
}

"""
Autogenerated input type of UpdateTopics
"""
input UpdateTopicsInput {
  clientMutationId: String
  repositoryId: ID!@possibleTypes(concreteTypes: ("Repository"))
  topicNames: [String!]!
}

"""
Autogenerated return type of UpdateTopics
"""
type UpdateTopicsPayload {
  clientMutationId: String
  invalidTopicNames: [String!]
  repository: Repository
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable {
  anyPinnableItems: Boolean!
  avatarUrl: URI!
  bio: String
  bioHTML: HTML!
  canReceiveOrganizationEmailsWhenNotificationsRestricted: Boolean!
  commitComments: CommitCommentConnection!
  company: String
  companyHTML: HTML!
  contributionsCollection: ContributionsCollection!
  createdAt: DateTime!
  databaseId: Int
  email: String!
  enterprises: EnterpriseConnection
  estimatedNextSponsorsPayoutInCents: Int!
  followers: FollowerConnection!
  following: FollowingConnection!
  gist: Gist
  gistComments: GistCommentConnection!
  gists: GistConnection!
  hasSponsorsListing: Boolean!
  hovercard: Hovercard!
  id: ID!
  interactionAbility: RepositoryInteractionAbility
  isBountyHunter: Boolean!
  isCampusExpert: Boolean!
  isDeveloperProgramMember: Boolean!
  isEmployee: Boolean!
  isFollowingViewer: Boolean!
  isGitHubStar: Boolean!
  isHireable: Boolean!
  isSiteAdmin: Boolean!
  isSponsoredBy: Boolean!
  isSponsoringViewer: Boolean!
  isViewer: Boolean!
  issueComments: IssueCommentConnection!
  issues: IssueConnection!
  itemShowcase: ProfileItemShowcase!
  location: String
  login: String!
  monthlyEstimatedSponsorsIncomeInCents: Int!
  name: String
  organization: Organization
  organizationVerifiedDomainEmails: [String!]!
  organizations: OrganizationConnection!
  packages: PackageConnection!
  pinnableItems: PinnableItemConnection!
  pinnedItems: PinnableItemConnection!
  pinnedItemsRemaining: Int!
  project: Project
  projectV2: ProjectV2
  projects: ProjectConnection!
  projectsResourcePath: URI!
  projectsUrl: URI!
  projectsV2: ProjectV2Connection!
  pronouns: String
  publicKeys: PublicKeyConnection!
  pullRequests: PullRequestConnection!
  recentProjects: ProjectV2Connection!
  repositories: RepositoryConnection!
  repositoriesContributedTo: RepositoryConnection!
  repository: Repository
  repositoryDiscussionComments: DiscussionCommentConnection!
  repositoryDiscussions: DiscussionConnection!
  resourcePath: URI!
  savedReplies: SavedReplyConnection
  socialAccounts: SocialAccountConnection!
  sponsoring: SponsorConnection!
  sponsors: SponsorConnection!
  sponsorsActivities: SponsorsActivityConnection!
  sponsorsListing: SponsorsListing
  sponsorshipForViewerAsSponsor: Sponsorship
  sponsorshipForViewerAsSponsorable: Sponsorship
  sponsorshipNewsletters: SponsorshipNewsletterConnection!
  sponsorshipsAsMaintainer: SponsorshipConnection!
  sponsorshipsAsSponsor: SponsorshipConnection!
  starredRepositories: StarredRepositoryConnection!
  status: UserStatus
  topRepositories: RepositoryConnection!
  totalSponsorshipAmountAsSponsorInCents: Int
  twitterUsername: String
  updatedAt: DateTime!
  url: URI!
  viewerCanChangePinnedItems: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanFollow: Boolean!
  viewerCanSponsor: Boolean!
  viewerIsFollowing: Boolean!
  viewerIsSponsoring: Boolean!
  watching: RepositoryConnection!
  websiteUrl: URI
}

"""
The possible durations that a user can be blocked for.
"""
enum UserBlockDuration {
  ONE_DAY
  ONE_MONTH
  ONE_WEEK
  PERMANENT
  THREE_DAYS
}

"""
Represents a 'user_blocked' event on a given user.
"""
type UserBlockedEvent implements Node {
  actor: Actor
  blockDuration: UserBlockDuration!
  createdAt: DateTime!
  id: ID!
  subject: User
}

"""
The connection type for User.
"""
type UserConnection {
  edges: [UserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edit on user content
"""
type UserContentEdit implements Node {
  createdAt: DateTime!
  deletedAt: DateTime
  deletedBy: Actor
  diff: String
  editedAt: DateTime!
  editor: Actor
  id: ID!
  updatedAt: DateTime!
}

"""
A list of edits to content.
"""
type UserContentEditConnection {
  edges: [UserContentEditEdge]
  nodes: [UserContentEdit]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserContentEditEdge {
  cursor: String!
  node: UserContentEdit
}

"""
Represents a user.
"""
type UserEdge {
  cursor: String!
  node: User
}

"""
Email attributes from External Identity
"""
type UserEmailMetadata {
  primary: Boolean
  type: String
  value: String!
}

"""
The user's description of what they're currently doing.
"""
type UserStatus implements Node {
  createdAt: DateTime!
  emoji: String
  emojiHTML: HTML
  expiresAt: DateTime
  id: ID!
  indicatesLimitedAvailability: Boolean!
  message: String
  organization: Organization
  updatedAt: DateTime!
  user: User!
}

"""
The connection type for UserStatus.
"""
type UserStatusConnection {
  edges: [UserStatusEdge]
  nodes: [UserStatus]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserStatusEdge {
  cursor: String!
  node: UserStatus
}

"""
Ordering options for user status connections.
"""
input UserStatusOrder {
  direction: OrderDirection!
  field: UserStatusOrderField!
}

"""
Properties by which user status connections can be ordered.
"""
enum UserStatusOrderField {
  UPDATED_AT
}

"""
A domain that can be verified or approved for an organization or an enterprise.
"""
type VerifiableDomain implements Node {
  createdAt: DateTime!
  databaseId: Int
  dnsHostName: URI
  domain: URI!
  hasFoundHostName: Boolean!
  hasFoundVerificationToken: Boolean!
  id: ID!
  isApproved: Boolean!
  isRequiredForPolicyEnforcement: Boolean!
  isVerified: Boolean!
  owner: VerifiableDomainOwner!
  punycodeEncodedDomain: URI!
  tokenExpirationTime: DateTime
  updatedAt: DateTime!
  verificationToken: String
}

"""
The connection type for VerifiableDomain.
"""
type VerifiableDomainConnection {
  edges: [VerifiableDomainEdge]
  nodes: [VerifiableDomain]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VerifiableDomainEdge {
  cursor: String!
  node: VerifiableDomain
}

"""
Ordering options for verifiable domain connections.
"""
input VerifiableDomainOrder {
  direction: OrderDirection!
  field: VerifiableDomainOrderField!
}

"""
Properties by which verifiable domain connections can be ordered.
"""
enum VerifiableDomainOrderField {
  CREATED_AT
  DOMAIN
}

"""
Types that can own a verifiable domain.
"""
union VerifiableDomainOwner = Enterprise | Organization

"""
Autogenerated input type of VerifyVerifiableDomain
"""
input VerifyVerifiableDomainInput {
  clientMutationId: String
  id: ID!@possibleTypes(concreteTypes: ("VerifiableDomain"))
}

"""
Autogenerated return type of VerifyVerifiableDomain
"""
type VerifyVerifiableDomainPayload {
  clientMutationId: String
  domain: VerifiableDomain
}

"""
A hovercard context with a message describing how the viewer is related.
"""
type ViewerHovercardContext implements HovercardContext {
  message: String!
  octicon: String!
  viewer: User!
}

"""
A subject that may be upvoted.
"""
interface Votable {
  upvoteCount: Int!
  viewerCanUpvote: Boolean!
  viewerHasUpvoted: Boolean!
}

"""
A workflow contains meta information about an Actions workflow file.
"""
type Workflow implements Node & UniformResourceLocatable {
  createdAt: DateTime!
  databaseId: Int
  id: ID!
  name: String!
  resourcePath: URI!
  runs: WorkflowRunConnection!
  state: WorkflowState!
  updatedAt: DateTime!
  url: URI!
}

"""
A workflow run.
"""
type WorkflowRun implements Node & UniformResourceLocatable {
  checkSuite: CheckSuite!
  createdAt: DateTime!
  databaseId: Int
  deploymentReviews: DeploymentReviewConnection!
  event: String!
  file: WorkflowRunFile
  id: ID!
  pendingDeploymentRequests: DeploymentRequestConnection!
  resourcePath: URI!
  runNumber: Int!
  updatedAt: DateTime!
  url: URI!
  workflow: Workflow!
}

"""
The connection type for WorkflowRun.
"""
type WorkflowRunConnection {
  edges: [WorkflowRunEdge]
  nodes: [WorkflowRun]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WorkflowRunEdge {
  cursor: String!
  node: WorkflowRun
}

"""
An executed workflow file for a workflow run.
"""
type WorkflowRunFile implements Node & UniformResourceLocatable {
  id: ID!
  path: String!
  repositoryFileUrl: URI!
  repositoryName: URI!
  resourcePath: URI!
  run: WorkflowRun!
  url: URI!
  viewerCanPushRepository: Boolean!
  viewerCanReadRepository: Boolean!
}

"""
Ways in which lists of workflow runs can be ordered upon return.
"""
input WorkflowRunOrder {
  direction: OrderDirection!
  field: WorkflowRunOrderField!
}

"""
Properties by which workflow run connections can be ordered.
"""
enum WorkflowRunOrderField {
  CREATED_AT
}

"""
The possible states for a workflow.
"""
enum WorkflowState {
  ACTIVE
  DELETED
  DISABLED_FORK
  DISABLED_INACTIVITY
  DISABLED_MANUALLY
}

"""
A valid x509 certificate string
"""
scalar X509Certificate 

