scalar String

scalar OperationType @inline

# Think this one should be done by hand
# as it doesnt exist in storage.
# union ExecutableDefinition = OperationDefintion | FragmentDefinition

type OperationDefinition @file(name: "operation") {
  operation_type: OperationType!
  name: String
  variable_definitions: [VariableDefinition]
  directives: [Directive]
  selection_set: [Selection]
}

type FragmentDefinition @file(name: "fragment") {
  name: String!
  type_condition: String!
  directives: [Directive]
  selection_set: [Selection]
}

union Selection @file(name: "selections") =
    FieldSelection
  | InlineFragment
  | FragmentSpread

type FieldSelection @file(name: "selections") {
  alias: String
  name: String!
  arguments: [Argument]
  directives: [Directive]
  selection_set: [Selection]
}

type InlineFragment @file(name: "selections") {
  type_condition: String
  directives: [Directive]
  selection_set: [Selection]
}

type FragmentSpread @file(name: "selections") {
  fragment_name: String!
  directives: [Directive]
}

type Directive @file(name: "directive") {
  name: String!
  arguments: [Argument]
}

type Argument @file(name: "argument") {
  name: String!
  value: Value!
}

type VariableDefinition @file(name: "variable") {
  name: String!
  ty: Type!
  default_value: Value
  directives: [Directive]
}

scalar Type @file(name: "types")

scalar Value @file(name: "value")
