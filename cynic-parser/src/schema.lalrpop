use std::str::FromStr;

use crate::lexer;

use crate::ast::{
    RootOperationTypeDefinition, OperationType, Ast, NodeId, SchemaDefinition,
    ObjectDefinition, FieldDefinition, InputValueDefinition
};

grammar<'input>(input: &'input str, ast: &mut Ast);

pub TypeSystemDocument: () = {
    <defs:TypeSystemDefinition+> => ast.definitions(defs),
}

pub TypeSystemDefinition: NodeId = {
    <def:SchemaDefinition> => ast.schema_definition(def),
    <def:ObjectDefinition> => ast.object_definition(def)
}

pub SchemaDefinition: SchemaDefinition = {
    schema "{" <roots:RootOperationTypeDefinition*> "}" => SchemaDefinition { <> }
};

pub RootOperationTypeDefinition: RootOperationTypeDefinition = {
    query ":" <name:NamedType> => RootOperationTypeDefinition {
        operation_type: OperationType::Query,
        named_type: name
    }
}

pub ObjectDefinition: ObjectDefinition = {
    ty <name:Name> "{" <fields:FieldDefinitions> "}" => ObjectDefinition { <> }
};

FieldDefinitions: Vec<NodeId> = {
    (FieldDefinition+)
};

// TODO: add description & directives in a minute
FieldDefinition: NodeId = {
    <name:Name> <arguments:ArgumentsDefinition?> ":" <ty:NamedType> => ast.field_definition(FieldDefinition { <> })
};

ArgumentsDefinition: Vec<NodeId> = {
    "(" <arguments:InputValueDefinition+> ")" => arguments,
};

// TODO: Add description, default value, directives
InputValueDefinition: NodeId =
    <name:Name> ":" <ty:Type> => ast.input_value_definition(InputValueDefinition { <> });

Name: NodeId = <s:Ident> => ast.ident(s);

NamedType: NodeId = <s:Ident> => ast.ident(s);

// TODO: This needs to support wrappers - do that sometime...
Type: NodeId = <s:Ident> => ast.ident(s);

// TODO: Make this NodeId probably...
Ident: &'input str = {
    <s:RawIdent> => s,
    schema => "schema",
    query => "query",
    ty => "type",
}

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token<'input> {
        "$" => lexer::Token::Dollar,

        ":" => lexer::Token::Colon,

        "{" => lexer::Token::OpenBrace,
        "}" => lexer::Token::CloseBrace,

        "(" => lexer::Token::OpenParen,
        ")" => lexer::Token::CloseParen,

        RawIdent => lexer::Token::Identifier(<&'input str>),

        // Would be nice if these could just be aliases of `Identifier` but LARLPOP doesn't
        // seem to support this well: https://github.com/lalrpop/lalrpop/issues/671
        schema => lexer::Token::Schema,
        query => lexer::Token::Query,
        ty => lexer::Token::Type,
    }
}