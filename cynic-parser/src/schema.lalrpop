use std::str::FromStr;

use crate::ast::{Schema, Field, Object};
use crate::lexer;

grammar<'input>(input: &'input str);

pub Schema: Schema = {
    schema "{" query ":" <query:TypeName> "}" => Schema { <> }
};

pub Object: Object = {
    ty <name:TypeName> "{" <fields:Fields> "}" => Object { <> }
};

Fields: Vec<Field> = {
    (Field+)
};

Field: Field = <name:TypeName> ":" <ty:TypeName> => Field { <> };

TypeName: String = <s:Name> => String::from_str(s).unwrap();

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token<'input> {
        "," => lexer::Token::Comma,
        "#" => lexer::Token::Hash,
        "$" => lexer::Token::Dollar,

        ":" => lexer::Token::Colon,

        "{" => lexer::Token::OpenCurly,
        "}" => lexer::Token::CloseCurly,

        Name => lexer::Token::Name(<&'input str>),

        schema => lexer::Token::Schema,
        query => lexer::Token::Query,
        ty => lexer::Token::Type,
    }
}