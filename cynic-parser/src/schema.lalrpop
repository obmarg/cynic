use std::str::FromStr;

use crate::ast::{Schema, Field, Object};
use crate::lexer;

grammar<'input>(input: &'input str);

pub Schema: Schema = {
    schema "{" query ":" <query:TypeName> "}" => Schema { <> }
};

pub Object: Object = {
    ty <name:TypeName> "{" <fields:Fields> "}" => Object { <> }
};

Fields: Vec<Field> = {
    (Field+)
};

Field: Field = <name:TypeName> ":" <ty:TypeName> => Field { <> };

TypeName: String = <s:Ident> => String::from_str(s).unwrap();

Ident: &'input str = {
    <s:RawIdent> => s,
    schema => "schema",
    query => "query",
    ty => "type",
}

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token<'input> {
        "$" => lexer::Token::Dollar,

        ":" => lexer::Token::Colon,

        "{" => lexer::Token::OpenBrace,
        "}" => lexer::Token::CloseBrace,

        RawIdent => lexer::Token::Identifier(<&'input str>),

        // Would be nice if these could just be aliases of `Identifier` but LARLPOP doesn't
        // seem to support this well: https://github.com/lalrpop/lalrpop/issues/671
        schema => lexer::Token::Schema,
        query => lexer::Token::Query,
        ty => lexer::Token::Type,
    }
}