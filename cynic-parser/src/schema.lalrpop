use std::str::FromStr;

use crate::ast::{Schema, Field, Object};
use crate::lexer;

grammar<'input>(input: &'input str);

pub Schema: Schema = {
    schema "{" query ":" <query:TypeName> "}" => Schema { <> }
};

pub Object: Object = {
    ty <name:TypeName> "{" <fields:Fields> "}" => Object { <> }
};

Fields: Vec<Field> = {
    (Field+)
};

Field: Field = <name:TypeName> ":" <ty:TypeName> => Field { <> };

TypeName: String = <s:Ident> => String::from_str(s).unwrap();

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token<'input> {
        "$" => lexer::Token::Dollar,

        ":" => lexer::Token::Colon,

        "{" => lexer::Token::OpenBrace,
        "}" => lexer::Token::CloseBrace,

        schema => lexer::Token::Identifier("schema"),
        query => lexer::Token::Identifier("query"),
        ty => lexer::Token::Identifier("type"),

        Ident => lexer::Token::Identifier(<&'input str>),
    }
}