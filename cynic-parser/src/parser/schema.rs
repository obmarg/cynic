// auto-generated: "lalrpop 0.22.0"
// sha3: 42a9bcdc947996d2ccdc87b6444b7ee866ed754e1cf55d25ded43a9db554c2c3
use crate::lexer;
use crate::{
    common::{
        trim_block_string_whitespace, unquote_block_string, unquote_string, IdRange, OperationType,
        TypeWrappers, WrappingType,
    },
    parser::AdditionalErrors,
    type_system::{ids::*, storage::*, writer::TypeSystemAstWriter, DirectiveLocation},
    values::{self, ids::ConstValueId, storage::*},
    Span,
};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
#[allow(unused_extern_crates)]
extern crate alloc;

#[rustfmt::skip]
#[allow(explicit_outlives_requirements, non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::needless_lifetimes, clippy::type_complexity, clippy::needless_return, clippy::too_many_arguments, clippy::never_loop, clippy::match_single_binding, clippy::needless_raw_string_hashes)]
mod __parse__TypeSystemDocument {

    use crate::lexer;
    use crate::{
    Span,
    type_system::{
        storage::*, ids::*, writer::TypeSystemAstWriter,
        DirectiveLocation,
    },
    values::{storage::*, ids::ConstValueId, self},
    common::{
        OperationType, IdRange, WrappingType, TypeWrappers,
        unquote_string, unquote_block_string, trim_block_string_whitespace
    },
    parser::AdditionalErrors
};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    #[allow(unused_extern_crates)]
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(lexer::Token<'input>),
        Variant1(&'input str),
        Variant2(Option<lexer::Token<'input>>),
        Variant3(alloc::vec::Vec<lexer::Token<'input>>),
        Variant4(usize),
        Variant5(ArgumentId),
        Variant6(alloc::vec::Vec<ArgumentId>),
        Variant7(Vec<ArgumentId>),
        Variant8(Option<Vec<ArgumentId>>),
        Variant9(Vec<()>),
        Variant10(Option<Vec<()>>),
        Variant11(ConstValueId),
        Variant12(Option<ConstValueId>),
        Variant13(()),
        Variant14(alloc::vec::Vec<()>),
        Variant15(DescriptionId),
        Variant16(Option<DescriptionId>),
        Variant17(DirectiveDefinitionRecord),
        Variant18(DirectiveLocation),
        Variant19(Vec<DirectiveLocation>),
        Variant20(IdRange<DirectiveId>),
        Variant21(EnumDefinitionRecord),
        Variant22(StringId),
        Variant23(EnumValueDefinitionId),
        Variant24(alloc::vec::Vec<EnumValueDefinitionId>),
        Variant25(Vec<EnumValueDefinitionId>),
        Variant26(Option<Vec<EnumValueDefinitionId>>),
        Variant27(Vec<StringId>),
        Variant28(Option<Vec<StringId>>),
        Variant29(InputObjectDefinitionRecord),
        Variant30(InterfaceDefinitionRecord),
        Variant31(ObjectDefinitionRecord),
        Variant32((values::ids::StringId, Span, ValueId)),
        Variant33(alloc::vec::Vec<(values::ids::StringId, Span, ValueId)>),
        Variant34(bool),
        Variant35(Option<bool>),
        Variant36(RootOperationTypeDefinitionRecord),
        Variant37(alloc::vec::Vec<RootOperationTypeDefinitionRecord>),
        Variant38(IdRange<RootOperationTypeDefinitionId>),
        Variant39(Option<IdRange<RootOperationTypeDefinitionId>>),
        Variant40(ScalarDefinitionRecord),
        Variant41(SchemaDefinitionRecord),
        Variant42(StringLiteralId),
        Variant43(TypeId),
        Variant44(DefinitionId),
        Variant45(UnionDefinitionRecord),
        Variant46(Vec<UnionMemberId>),
        Variant47(Option<Vec<UnionMemberId>>),
        Variant48(ValueId),
        Variant49(ValueRecord),
        Variant50(alloc::vec::Vec<ValueRecord>),
        Variant51(WrappingType),
        Variant52(alloc::vec::Vec<WrappingType>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 109, 0, 0, 9, 0, 0, 0, 10, 6, 0, 0, 0, 0, 7, 4, 11, 8, 5, 111, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 109, 0, 0, 9, 0, 0, 0, 10, 6, 0, 0, 0, 0, 7, 4, 11, 8, 5, 111, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 6, 0, 0, 0, 0, 7, 4, 11, 8, 5, 111, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 10, 6, 0, 0, 0, 0, 7, 4, 11, 8, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 8
        0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 11
        0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 0, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 13
        0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 0, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 14
        0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 0, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 15
        0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 29, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 0, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 17
        0, 0, -49, -49, 0, -49, 0, 0, 0, -49, 20, 0, 0, -49, -49, -49, 0, 0, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,
        // State 18
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 20
        0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 29, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 20, 0, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 0, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 22
        0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, -51, 0, 0, -51, 0, 0, 0, -51, -51, 0, 0, 0, 0, -51, -51, -51, -51, -51, -51, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 38, 0,
        // State 24
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, -142, 0, 0, -142, 0, 0, 0, -142, -142, 0, 0, 0, 0, -142, -142, -142, -142, -142, -142, 0, 0, 0,
        // State 25
        0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, -103, -103, -103, -103, -103, -103, 0, 0, 0,
        // State 26
        0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, -113, 0, 0, -113, 0, 0, 0, -113, -113, 0, 0, 0, 0, -113, -113, -113, -113, -113, -113, 0, 0, 0,
        // State 27
        0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 20, 42, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 0, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 29
        0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 156, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, -35, -35, 45, -35, 0, 0, 0, -35, -35, 0, 0, -35, -35, -35, 0, 0, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35,
        // State 31
        0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, -119, 0, 0, -119, 0, 0, 0, -119, -119, 0, 0, 0, 0, -119, -119, -119, -119, -119, -119, 0, 0, 0,
        // State 32
        0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 20, 42, 0, 0, -48, -48, 0, 0, -48, 0, 0, 0, -48, -48, 0, 0, 0, 0, -48, -48, -48, -48, -48, -48, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, -166, -166, 0, 0, -166, 0, 0, 0, -166, -166, 0, 0, 0, 0, -166, -166, -166, -166, -166, -166, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 110, 109, 0, 0, 166, 165, 0, 0, 167, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 51, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 110, 109, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 110, 109, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 110, 109, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 40
        0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, -112, 0, 0, -112, 0, 0, 0, -112, -112, 0, 0, 0, 0, -112, -112, -112, -112, -112, -112, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 43
        0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 156, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 45
        0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, -118, 0, 0, -118, 0, 0, 0, -118, -118, 0, 0, 0, 0, -118, -118, -118, -118, -118, -118, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 166, 165, 0, 0, 167, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, 0, 0, -48, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 110, 109, 0, 0, 166, 165, 0, 0, 167, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 53
        0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 116, 110, 109, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 55
        0, 0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 110, 109, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 57
        0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 110, 109, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 58
        0, 71, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 62
        0, 0, 0, 0, 0, 202, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 65
        0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, 0, 0, -48, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 67
        0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 69
        0, 77, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 71
        80, 0, 82, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 163, 216, 213, 214, 215, 166, 165, 0, 0, 167, 164, 219, 217, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 73
        0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 74
        0, 0, 0, -145, 0, -145, 0, 223, 222, -145, -145, 0, 0, -145, -145, -145, 0, 0, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
        // State 75
        0, 0, 0, -48, 0, -48, 0, 0, 0, 87, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 76
        0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 77
        0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 78
        0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 80
        80, 0, 82, 0, 0, 0, 81, 228, 0, 0, 0, 0, 0, 163, 216, 213, 214, 215, 166, 165, 0, 0, 167, 164, 219, 217, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 82
        0, 0, 0, -48, 0, -48, 0, 0, 0, 87, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 83
        0, 0, 0, -147, 0, -147, 0, 223, 222, -147, -147, 0, 0, -147, -147, -147, 0, 0, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
        // State 84
        0, 0, 0, -146, 0, -146, 0, 223, 222, -146, -146, 0, 0, -146, -146, -146, 0, 0, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
        // State 85
        0, 0, 0, -48, 0, -48, 0, 0, 0, 0, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 86
        80, 0, 82, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 163, 216, 213, 214, 215, 166, 165, 0, 0, 167, 164, 219, 217, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 88
        0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 89
        0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 90
        80, 0, 82, 0, 0, 0, 81, 239, 0, 0, 0, 0, 0, 163, 216, 213, 214, 215, 166, 165, 0, 0, 167, 164, 219, 217, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 130, 127, 124, 131, 133, 122, 132, 119, 125, 121, 123, 115, 134, 129, 118, 117, 128, 126, 120,
        // State 92
        0, 0, 0, -48, 0, -48, 0, 0, 0, 0, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 93
        0, 0, 0, -148, 0, -148, 0, 223, 222, -148, -148, 0, 0, -148, -148, -148, 0, 0, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
        // State 94
        0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 20, 0, 0, -48, -48, -48, 0, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 95
        80, 0, 82, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 163, 216, 213, 214, 215, 166, 165, 0, 0, 167, 164, 219, 217, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, -29, -29, -29, -29, -29, -29, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, -163, 0, 0, -163, 0, 0, 0, -163, -163, 0, 0, 0, 0, -163, -163, -163, -163, -163, -163, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, -154, 0, 0, -154, 0, 0, 0, -154, -154, 0, 0, 0, 0, -154, -154, -154, -154, -154, -154, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, -155, 0, 0, -155, 0, 0, 0, -155, -155, 0, 0, 0, 0, -155, -155, -155, -155, -155, -155, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152, -152, 0, 0, -152, 0, 0, 0, -152, -152, 0, 0, 0, 0, -152, -152, -152, -152, -152, -152, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, -151, 0, 0, -151, 0, 0, 0, -151, -151, 0, 0, 0, 0, -151, -151, -151, -151, -151, -151, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, -150, 0, 0, -150, 0, 0, 0, -150, -150, 0, 0, 0, 0, -150, -150, -150, -150, -150, -150, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, -149, 0, 0, -149, 0, 0, 0, -149, -149, 0, 0, 0, 0, -149, -149, -149, -149, -149, -149, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, -28, 0, 0, -28, 0, 0, 0, -28, -28, 0, 0, 0, 0, -28, -28, -28, -28, -28, -28, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -153, -153, 0, 0, -153, 0, 0, 0, -153, -153, 0, 0, 0, 0, -153, -153, -153, -153, -153, -153, 0, 0, 0,
        // State 108
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144, -144,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, -30, -30, -30, -30, -30, -30, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -27, 0, 0, -27, 0, 0, 0, -27, -27, 0, 0, 0, 0, -27, -27, -27, -27, -27, -27, 0, 0, 0,
        // State 113
        0, -114, -114, -114, -114, -114, 0, 0, 0, -114, -114, 0, 0, -114, -114, -114, 0, 0, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
        // State 114
        -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85,
        // State 115
        -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
        // State 116
        -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89,
        // State 117
        -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88,
        // State 118
        -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81,
        // State 119
        -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92,
        // State 120
        -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83,
        // State 121
        -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79,
        // State 122
        -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84,
        // State 123
        -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76,
        // State 124
        -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
        // State 125
        -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91,
        // State 126
        -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
        // State 127
        -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90,
        // State 128
        -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87,
        // State 129
        -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74,
        // State 130
        -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77,
        // State 131
        -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80,
        // State 132
        -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
        // State 133
        -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161, -161, 0, 0, -161, 0, 0, 0, -161, -161, 0, 0, 0, 0, -161, -161, -161, -161, -161, -161, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, -162, 0, 0, -162, 0, 0, 0, -162, -162, 0, 0, 0, 0, -162, -162, -162, -162, -162, -162, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, -159, 0, 0, -159, 0, 0, 0, -159, -159, 0, 0, 0, 0, -159, -159, -159, -159, -159, -159, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, -158, 0, 0, -158, 0, 0, 0, -158, -158, 0, 0, 0, 0, -158, -158, -158, -158, -158, -158, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, -157, 0, 0, -157, 0, 0, 0, -157, -157, 0, 0, 0, 0, -157, -157, -157, -157, -157, -157, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, -156, 0, 0, -156, 0, 0, 0, -156, -156, 0, 0, 0, 0, -156, -156, -156, -156, -156, -156, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, -160, 0, 0, -160, 0, 0, 0, -160, -160, 0, 0, 0, 0, -160, -160, -160, -160, -160, -160, 0, 0, 0,
        // State 141
        0, 0, -38, -38, 0, -38, 0, 0, 0, -38, -38, 0, 0, -38, -38, -38, 0, 0, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38,
        // State 142
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, -139, 0, 0, -139, 0, 0, 0, -139, -139, 0, 0, 0, 0, -139, -139, -139, -139, -139, -139, 0, 0, 0,
        // State 143
        0, 0, -39, -39, 0, -39, 0, 0, 0, -39, -39, 0, 0, -39, -39, -39, 0, 0, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, -140, 0, 0, -140, 0, 0, 0, -140, -140, 0, 0, 0, 0, -140, -140, -140, -140, -140, -140, 0, 0, 0,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, -50, 0, 0, -50, 0, 0, 0, -50, -50, 0, 0, 0, 0, -50, -50, -50, -50, -50, -50, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, -141, 0, 0, -141, 0, 0, 0, -141, -141, 0, 0, 0, 0, -141, -141, -141, -141, -141, -141, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, -102, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, -102, -102, -102, -102, -102, -102, 0, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, -111, 0, 0, -111, 0, 0, 0, -111, -111, 0, 0, 0, 0, -111, -111, -111, -111, -111, -111, 0, 0, 0,
        // State 151
        0, 0, -115, -115, 0, -115, 0, -115, -115, -115, -115, -115, -115, -115, -115, -115, 0, 0, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
        // State 152
        0, 0, -96, 0, 0, 0, 0, 0, 0, 0, -96, -96, 0, 0, -96, -96, 0, 0, -96, 0, 0, 0, -96, -96, 0, 0, 0, 0, -96, -96, -96, -96, -96, -96, 0, 0, 0,
        // State 153
        0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, -133, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, -135, 0, 0, -135, 0, 0, 0, -135, -135, 0, 0, 0, 0, -135, -135, -135, -135, -135, -135, 0, 0, 0,
        // State 155
        0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 156
        0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 157
        0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 158
        0, 0, -34, -34, 0, -34, 0, 0, 0, -34, -34, 0, 0, -34, -34, -34, 0, 0, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34, -34,
        // State 159
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, -117, 0, 0, -117, 0, 0, 0, -117, -117, 0, 0, 0, 0, -117, -117, -117, -117, -117, -117, 0, 0, 0,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, -165, -165, 0, 0, -165, 0, 0, 0, -165, -165, 0, 0, 0, 0, -165, -165, -165, -165, -165, -165, 0, 0, 0,
        // State 161
        0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, -59, -59, 0, 0, -59, -59, 0, 0, -59, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 162
        -52, 0, -52, -52, 0, -52, -52, -52, 0, 0, -52, 0, 0, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
        // State 163
        -56, 0, -56, -56, 0, -56, -56, -56, 0, 0, -56, 0, 0, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
        // State 164
        -54, 0, -54, -54, 0, -54, -54, -54, 0, 0, -54, 0, 0, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54,
        // State 165
        -53, 0, -53, -53, 0, -53, -53, -53, 0, 0, -53, 0, 0, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53,
        // State 166
        -55, 0, -55, -55, 0, -55, -55, -55, 0, 0, -55, 0, 0, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55,
        // State 167
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
        // State 168
        0, 0, 0, -108, 0, -108, 0, 0, 0, 0, 0, 0, 0, -108, -108, -108, 0, 0, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
        // State 169
        0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, -47, -47, 0, 0, -47, 0, 0, 0, -47, -47, 0, 0, 0, 0, -47, -47, -47, -47, -47, -47, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, -43, -43, 0, 0, -43, 0, 0, 0, -43, -43, 0, 0, 0, 0, -43, -43, -43, -43, -43, -43, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, -44, -44, 0, 0, -44, 0, 0, 0, -44, -44, 0, 0, 0, 0, -44, -44, -44, -44, -44, -44, 0, 0, 0,
        // State 173
        0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, -68, -68, 0, 0, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, -110, 0, 0, -110, 0, 0, 0, -110, -110, 0, 0, 0, 0, -110, -110, -110, -110, -110, -110, 0, 0, 0,
        // State 175
        0, 0, -94, 0, 0, 0, 0, 0, 0, 0, -94, -94, 0, 0, -94, -94, 0, 0, -94, 0, 0, 0, -94, -94, 0, 0, 0, 0, -94, -94, -94, -94, -94, -94, 0, 0, 0,
        // State 176
        0, 0, -95, 0, 0, 0, 0, 0, 0, 0, -95, -95, 0, 0, -95, -95, 0, 0, -95, 0, 0, 0, -95, -95, 0, 0, 0, 0, -95, -95, -95, -95, -95, -95, 0, 0, 0,
        // State 177
        0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, -134, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, -136, 0, 0, -136, 0, 0, 0, -136, -136, 0, 0, 0, 0, -136, -136, -136, -136, -136, -136, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
        // State 180
        0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, 0, -16, -16, 0, -16, 0, 0, 0, -16, -16, 0, 0, -16, -16, -16, 0, 0, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, -116, 0, 0, -116, 0, 0, 0, -116, -116, 0, 0, 0, 0, -116, -116, -116, -116, -116, -116, 0, 0, 0,
        // State 183
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, -169, -169, 0, 0, -169, 0, 0, 0, -169, -169, 0, 0, 0, 0, -169, -169, -169, -169, -169, -169, 0, 0, 0,
        // State 184
        0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, 0, 0, -58, -58, 0, 0, -58, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 185
        0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, -60, -60, 0, 0, -60, -60, 0, 0, -60, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 186
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, -61, 0, 0, -61, 0, 0, 0, -61, -61, 0, 0, 0, 0, -61, -61, -61, -61, -61, -61, 0, 0, 0,
        // State 187
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, -41, -41, 0, 0, -41, 0, 0, 0, -41, -41, 0, 0, 0, 0, -41, -41, -41, -41, -41, -41, 0, 0, 0,
        // State 188
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, -42, -42, 0, 0, -42, 0, 0, 0, -42, -42, 0, 0, 0, 0, -42, -42, -42, -42, -42, -42, 0, 0, 0,
        // State 189
        0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        0, 0, 0, -109, 0, -109, 0, 0, 0, 0, 0, 0, 0, -109, -109, -109, 0, 0, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
        // State 191
        0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, -20, 0,
        // State 192
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, -46, -46, 0, 0, -46, 0, 0, 0, -46, -46, 0, 0, 0, 0, -46, -46, -46, -46, -46, -46, 0, 0, 0,
        // State 193
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, -99, -99, -99, -99, -99, -99, 0, 0, 0,
        // State 194
        0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, -69, -69, 0, 0, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69,
        // State 195
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, -70, 0, 0, -70, 0, 0, 0, -70, -70, 0, 0, 0, 0, -70, -70, -70, -70, -70, -70, 0, 0, 0,
        // State 196
        0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 197
        0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, -129, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 198
        0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 199
        0, 0, 0, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, -130, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 200
        0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
        // State 201
        0, 0, -17, -17, 0, -17, 0, 0, 0, -17, -17, 0, 0, -17, -17, -17, 0, 0, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
        // State 202
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, -167, -167, 0, 0, -167, 0, 0, 0, -167, -167, 0, 0, 0, 0, -167, -167, -167, -167, -167, -167, 0, 0, 0,
        // State 203
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, 0, -168, -168, 0, 0, -168, 0, 0, 0, -168, -168, 0, 0, 0, 0, -168, -168, -168, -168, -168, -168, 0, 0, 0,
        // State 204
        0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, -57, -57, 0, 0, -57, -57, 0, 0, -57, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 205
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, -40, -40, 0, 0, -40, 0, 0, 0, -40, -40, 0, 0, 0, 0, -40, -40, -40, -40, -40, -40, 0, 0, 0,
        // State 206
        0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,
        // State 207
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, -45, -45, 0, 0, -45, 0, 0, 0, -45, -45, 0, 0, 0, 0, -45, -45, -45, -45, -45, -45, 0, 0, 0,
        // State 208
        0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 209
        0, 0, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, 0, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
        // State 210
        -185, 0, -185, -185, 0, -185, -185, -185, 0, 0, -185, 0, 0, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
        // State 211
        0, 0, 0, -23, 0, -23, 0, 0, 0, 0, -23, 0, 0, -23, -23, -23, 0, 0, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,
        // State 212
        -177, 0, -177, -177, 0, -177, -177, -177, 0, 0, -177, 0, 0, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
        // State 213
        -175, 0, -175, -175, 0, -175, -175, -175, 0, 0, -175, 0, 0, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
        // State 214
        -174, 0, -174, -174, 0, -174, -174, -174, 0, 0, -174, 0, 0, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174,
        // State 215
        -176, 0, -176, -176, 0, -176, -176, -176, 0, 0, -176, 0, 0, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
        // State 216
        -179, 0, -179, -179, 0, -179, -179, -179, 0, 0, -179, 0, 0, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
        // State 217
        -180, 0, -180, -180, 0, -180, -180, -180, 0, 0, -180, 0, 0, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180, -180,
        // State 218
        -178, 0, -178, -178, 0, -178, -178, -178, 0, 0, -178, 0, 0, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
        // State 219
        0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
        // State 220
        0, 0, 0, -194, 0, -194, 0, -194, -194, -194, -194, 0, 0, -194, -194, -194, 0, 0, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
        // State 221
        0, 0, 0, -190, 0, -190, 0, -190, -190, -190, -190, 0, 0, -190, -190, -190, 0, 0, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
        // State 222
        0, 0, 0, -191, 0, -191, 0, -191, -191, -191, -191, 0, 0, -191, -191, -191, 0, 0, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191, -191,
        // State 223
        0, 0, 0, -107, 0, -107, 0, 0, 0, 0, 0, 0, 0, -107, -107, -107, 0, 0, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
        // State 224
        0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, -67, -67, 0, 0, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
        // State 225
        -173, 0, -173, -173, 0, -173, -173, -173, 0, 0, -173, 0, 0, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
        // State 226
        -188, 0, -188, 0, 0, 0, -188, -188, 0, 0, 0, 0, 0, -188, -188, -188, -188, -188, -188, -188, 0, 0, -188, -188, -188, -188, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 227
        -181, 0, -181, -181, 0, -181, -181, -181, 0, 0, -181, 0, 0, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181, -181,
        // State 228
        0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 229
        0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
        // State 230
        -183, 0, -183, -183, 0, -183, -183, -183, 0, 0, -183, 0, 0, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
        // State 231
        0, 0, 0, -106, 0, -106, 0, 0, 0, 0, 0, 0, 0, -106, -106, -106, 0, 0, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
        // State 232
        0, 0, 0, -195, 0, -195, 0, -195, -195, -195, -195, 0, 0, -195, -195, -195, 0, 0, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
        // State 233
        0, 0, 0, -105, 0, -105, 0, 0, 0, 0, 0, 0, 0, -105, -105, -105, 0, 0, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105,
        // State 234
        0, 0, 0, -24, 0, -24, 0, 0, 0, 0, -24, 0, 0, -24, -24, -24, 0, 0, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,
        // State 235
        0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, -66, -66, 0, 0, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
        // State 236
        0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, -65, 0, 0, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
        // State 237
        -189, 0, -189, 0, 0, 0, -189, -189, 0, 0, 0, 0, 0, -189, -189, -189, -189, -189, -189, -189, 0, 0, -189, -189, -189, -189, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 238
        -182, 0, -182, -182, 0, -182, -182, -182, 0, 0, -182, 0, 0, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182, -182,
        // State 239
        0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
        // State 240
        -184, 0, -184, -184, 0, -184, -184, -184, 0, 0, -184, 0, 0, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184, -184,
        // State 241
        0, 0, 0, -104, 0, -104, 0, 0, 0, 0, 0, 0, 0, -104, -104, -104, 0, 0, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
        // State 242
        0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, -64, -64, 0, 0, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
        // State 243
        0, 0, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120,
        // State 244
        0, 0, 0, -172, 0, 0, 0, 0, 0, 0, 0, 0, 0, -172, 0, 0, 0, 0, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 37 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -164,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        -48,
        // State 12
        0,
        // State 13
        -48,
        // State 14
        -48,
        // State 15
        -48,
        // State 16
        -48,
        // State 17
        -49,
        // State 18
        0,
        // State 19
        0,
        // State 20
        -48,
        // State 21
        -48,
        // State 22
        -51,
        // State 23
        0,
        // State 24
        -142,
        // State 25
        -103,
        // State 26
        -113,
        // State 27
        -48,
        // State 28
        0,
        // State 29
        0,
        // State 30
        -35,
        // State 31
        -119,
        // State 32
        -48,
        // State 33
        -166,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        -112,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        -118,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        -29,
        // State 97
        -163,
        // State 98
        -154,
        // State 99
        -155,
        // State 100
        -152,
        // State 101
        -151,
        // State 102
        -150,
        // State 103
        -149,
        // State 104
        0,
        // State 105
        -28,
        // State 106
        -196,
        // State 107
        -153,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        -30,
        // State 112
        -27,
        // State 113
        -114,
        // State 114
        -85,
        // State 115
        -73,
        // State 116
        -89,
        // State 117
        -88,
        // State 118
        -81,
        // State 119
        -92,
        // State 120
        -83,
        // State 121
        -79,
        // State 122
        -84,
        // State 123
        -76,
        // State 124
        -82,
        // State 125
        -91,
        // State 126
        -75,
        // State 127
        -90,
        // State 128
        -87,
        // State 129
        -74,
        // State 130
        -77,
        // State 131
        -80,
        // State 132
        -78,
        // State 133
        -86,
        // State 134
        -161,
        // State 135
        -162,
        // State 136
        -159,
        // State 137
        -158,
        // State 138
        -157,
        // State 139
        -156,
        // State 140
        -160,
        // State 141
        -38,
        // State 142
        -139,
        // State 143
        -39,
        // State 144
        -140,
        // State 145
        -50,
        // State 146
        0,
        // State 147
        0,
        // State 148
        -141,
        // State 149
        -102,
        // State 150
        -111,
        // State 151
        -115,
        // State 152
        -96,
        // State 153
        0,
        // State 154
        -135,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        -34,
        // State 159
        -117,
        // State 160
        -165,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        -47,
        // State 171
        -43,
        // State 172
        -44,
        // State 173
        0,
        // State 174
        -110,
        // State 175
        -94,
        // State 176
        -95,
        // State 177
        0,
        // State 178
        -136,
        // State 179
        0,
        // State 180
        0,
        // State 181
        -16,
        // State 182
        -116,
        // State 183
        -169,
        // State 184
        0,
        // State 185
        0,
        // State 186
        -61,
        // State 187
        -41,
        // State 188
        -42,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        -46,
        // State 193
        -99,
        // State 194
        0,
        // State 195
        -70,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
        // State 199
        0,
        // State 200
        0,
        // State 201
        -17,
        // State 202
        -167,
        // State 203
        -168,
        // State 204
        0,
        // State 205
        -40,
        // State 206
        0,
        // State 207
        -45,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        0,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        0,
        // State 216
        0,
        // State 217
        0,
        // State 218
        0,
        // State 219
        0,
        // State 220
        0,
        // State 221
        0,
        // State 222
        0,
        // State 223
        0,
        // State 224
        0,
        // State 225
        0,
        // State 226
        0,
        // State 227
        0,
        // State 228
        0,
        // State 229
        0,
        // State 230
        0,
        // State 231
        0,
        // State 232
        0,
        // State 233
        0,
        // State 234
        0,
        // State 235
        0,
        // State 236
        0,
        // State 237
        0,
        // State 238
        0,
        // State 239
        0,
        // State 240
        0,
        // State 241
        0,
        // State 242
        0,
        // State 243
        0,
        // State 244
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 73,
            6 => match state {
                62 => 200,
                _ => 179,
            },
            8 => 62,
            9 => 158,
            11 => match state {
                58 => 196,
                69 => 208,
                _ => 35,
            },
            13 => match state {
                86 => 234,
                _ => 209,
            },
            14 => match state {
                82 => 92,
                _ => 85,
            },
            16 => match state {
                1 => 111,
                _ => 96,
            },
            17 => 1,
            18 => match state {
                0..=1 => 2,
                34 | 49 => 47,
                39 | 57 => 56,
                _ => 52,
            },
            20 => match state {
                17 => 143,
                _ => 141,
            },
            22 => 17,
            23 => 97,
            24 => match state {
                54 => 192,
                68 => 207,
                _ => 170,
            },
            25 => match state {
                50 => 187,
                51 => 188,
                66 => 205,
                _ => 171,
            },
            26 => match state {
                11 => 22,
                13 => 24,
                14 => 25,
                15 => 26,
                20 => 31,
                21 => 33,
                27 => 40,
                32 => 45,
                16 => 142,
                48 => 184,
                65 => 204,
                75 => 223,
                78 => 224,
                82 => 231,
                85 => 233,
                88 => 235,
                89 => 236,
                92 => 241,
                94 => 242,
                _ => 18,
            },
            27 => match state {
                4 => 134,
                _ => 98,
            },
            28 => match state {
                34 | 49 => 48,
                47 => 65,
                _ => 210,
            },
            29 => match state {
                49 => 185,
                _ => 161,
            },
            30 => 49,
            31 => 145,
            33 => match state {
                57 => 194,
                _ => 173,
            },
            34 => 57,
            35 => match state {
                31 => 159,
                40 => 174,
                45 => 182,
                _ => 150,
            },
            37 => match state {
                28 | 41..=42 | 46 | 59..=61 | 63..=64 | 67 | 70 | 72..=73 | 76..=77 | 87 => 151,
                37 | 50..=51 | 54 | 66 | 68 => 172,
                79 => 225,
                _ => 113,
            },
            39 => match state {
                20 => 32,
                _ => 27,
            },
            41 => 149,
            43 => match state {
                4 => 135,
                _ => 99,
            },
            44 => match state {
                53 | 55 => 190,
                _ => 168,
            },
            45 => match state {
                38 => 55,
                _ => 53,
            },
            46 => match state {
                4 => 136,
                _ => 100,
            },
            47 => match state {
                3 => 11,
                5 => 14,
                6 => 15,
                7 => 16,
                9 => 20,
                10 => 21,
                12 => 23,
                19 => 30,
                39 | 57 => 58,
                56 => 69,
                44 | 62 => 180,
                52 => 189,
                81 | 91 => 228,
                _ => 169,
            },
            48 => match state {
                73 => 83,
                28 => 152,
                41 => 175,
                42 => 176,
                46 => 183,
                59 => 197,
                60 => 198,
                61 => 199,
                63 => 202,
                64 => 203,
                _ => 74,
            },
            49 => match state {
                4 => 137,
                _ => 101,
            },
            50 => match state {
                91 => 239,
                _ => 229,
            },
            52 => 91,
            53 => match state {
                35 => 167,
                _ => 146,
            },
            55 => match state {
                43 => 177,
                _ => 153,
            },
            57 => 43,
            58 => match state {
                24 => 148,
                _ => 144,
            },
            60 => match state {
                4 => 138,
                _ => 102,
            },
            61 => 103,
            62 => 139,
            63 => 104,
            64 => match state {
                70 => 78,
                72 => 82,
                76 => 88,
                77 => 89,
                87 => 94,
                _ => 75,
            },
            65 => match state {
                2 => 112,
                _ => 105,
            },
            66 => 106,
            67 => match state {
                4 => 140,
                _ => 107,
            },
            68 => 160,
            70 => 243,
            71 => match state {
                80 => 226,
                90 => 237,
                95 => 244,
                _ => 211,
            },
            73 => 90,
            74 => match state {
                84 | 93 => 232,
                _ => 220,
            },
            76 => match state {
                83 => 93,
                _ => 84,
            },
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###""$""###,
        r###"":""###,
        r###""{""###,
        r###""}""###,
        r###""(""###,
        r###"")""###,
        r###""[""###,
        r###""]""###,
        r###""!""###,
        r###""=""###,
        r###""@""###,
        r###""&""###,
        r###""|""###,
        r###"RawIdent"###,
        r###"StringLiteral"###,
        r###"BlockStringLiteral"###,
        r###"FloatLiteral"###,
        r###"IntegerLiteral"###,
        r###"schema"###,
        r###"query"###,
        r###"mutation"###,
        r###"subscription"###,
        r###"ty"###,
        r###"input"###,
        r###"true"###,
        r###"false"###,
        r###"null"###,
        r###"implements"###,
        r###"interface"###,
        r###""enum""###,
        r###"union"###,
        r###"scalar"###,
        r###"extend"###,
        r###"directive"###,
        r###"repeatable"###,
        r###"on"###,
        r###"fragment"###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        '__1,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    struct __StateMachine<'input, '__1>
    where 
    {
        input: &'input str,
        ast: &'__1 mut TypeSystemAstWriter,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1> __state_machine::ParserDefinition for __StateMachine<'input, '__1>
    where 
    {
        type Location = usize;
        type Error = crate::parser::AdditionalErrors;
        type Token = lexer::Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = ();
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 37 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.ast,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&())>)
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &lexer::Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        #[warn(unused_variables)]
        match __token {
            lexer::Token::Dollar if true => Some(0),
            lexer::Token::Colon if true => Some(1),
            lexer::Token::OpenBrace if true => Some(2),
            lexer::Token::CloseBrace if true => Some(3),
            lexer::Token::OpenParen if true => Some(4),
            lexer::Token::CloseParen if true => Some(5),
            lexer::Token::OpenBracket if true => Some(6),
            lexer::Token::CloseBracket if true => Some(7),
            lexer::Token::Exclamation if true => Some(8),
            lexer::Token::Equals if true => Some(9),
            lexer::Token::At if true => Some(10),
            lexer::Token::Ampersand if true => Some(11),
            lexer::Token::Pipe if true => Some(12),
            lexer::Token::Identifier(_) if true => Some(13),
            lexer::Token::StringLiteral(_) if true => Some(14),
            lexer::Token::BlockStringLiteral(_) if true => Some(15),
            lexer::Token::FloatLiteral(_) if true => Some(16),
            lexer::Token::IntegerLiteral(_) if true => Some(17),
            lexer::Token::Schema if true => Some(18),
            lexer::Token::Query if true => Some(19),
            lexer::Token::Mutation if true => Some(20),
            lexer::Token::Subscription if true => Some(21),
            lexer::Token::Type if true => Some(22),
            lexer::Token::Input if true => Some(23),
            lexer::Token::True if true => Some(24),
            lexer::Token::False if true => Some(25),
            lexer::Token::Null if true => Some(26),
            lexer::Token::Implements if true => Some(27),
            lexer::Token::Interface if true => Some(28),
            lexer::Token::Enum if true => Some(29),
            lexer::Token::Union if true => Some(30),
            lexer::Token::Scalar if true => Some(31),
            lexer::Token::Extend if true => Some(32),
            lexer::Token::Directive if true => Some(33),
            lexer::Token::Repeatable if true => Some(34),
            lexer::Token::On if true => Some(35),
            lexer::Token::Fragment if true => Some(36),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: lexer::Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        #[allow(clippy::manual_range_patterns)]match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 => __Symbol::Variant0(__token),
            13 | 14 | 15 | 16 | 17 => match __token {
                lexer::Token::Identifier(__tok0) | lexer::Token::StringLiteral(__tok0) | lexer::Token::BlockStringLiteral(__tok0) | lexer::Token::FloatLiteral(__tok0) | lexer::Token::IntegerLiteral(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        '__1,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, '__1>>
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 3,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 11,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 12,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 12,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 13,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 15,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 16,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 17,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 19,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 20,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 21,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 22,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 23,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 23,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 23,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 25,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 26,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 27,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 27,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 29,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 29,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 30,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 31,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 32,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 33,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 33,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 33,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 33,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 34,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 35,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 36,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 38,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 39,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 39,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 39,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 40,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 40,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 42,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 44,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 44,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 44,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 44,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 45,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 46,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 46,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 46,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 46,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 48,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 49,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 49,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 49,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 51,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 52,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 54,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 55,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 55,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 55,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 56,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 58,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 58,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 59,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 60,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 61,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 62,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 64,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 64,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 64,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 65,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 65,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 65,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 65,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 65,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 65,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 65,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 67,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 68,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 68,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 68,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 69,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 70,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 71,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            176 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            177 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            178 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            179 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            180 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 71,
                }
            }
            181 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            182 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 71,
                }
            }
            183 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            184 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 71,
                }
            }
            185 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 72,
                }
            }
            186 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            187 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 73,
                }
            }
            188 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 73,
                }
            }
            189 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            190 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            191 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 75,
                }
            }
            192 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 75,
                }
            }
            193 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            194 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 76,
                }
            }
            195 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct TypeSystemDocumentParser {
        _priv: (),
    }

    impl Default for TypeSystemDocumentParser { fn default() -> Self { Self::new() } }
    impl TypeSystemDocumentParser {
        pub fn new() -> TypeSystemDocumentParser {
            TypeSystemDocumentParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            __TOKEN: __ToTriple<'input, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'input str,
            ast: &mut TypeSystemAstWriter,
            __tokens0: __TOKENS,
        ) -> Result<(), __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    ast,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        '__1,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> bool
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    fn __reduce<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<(),__lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                // DirectiveLocation = Ident => ActionFn(212);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action212::<>(input, ast, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (1, 24)
            }
            44 => {
                __reduce44(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                __reduce120(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            121 => {
                __reduce121(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                __reduce123(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            124 => {
                __reduce124(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                __reduce125(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            126 => {
                __reduce126(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            127 => {
                __reduce127(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                __reduce129(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            130 => {
                __reduce130(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                __reduce131(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            132 => {
                __reduce132(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                __reduce134(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            135 => {
                __reduce135(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                __reduce137(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            138 => {
                __reduce138(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                __reduce140(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            141 => {
                __reduce141(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                // StringValue = StringLiteral => ActionFn(190);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action190::<>(input, ast, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant42(__nt), __end));
                (1, 63)
            }
            143 => {
                __reduce143(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            144 => {
                __reduce144(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                __reduce146(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            147 => {
                __reduce147(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                __reduce149(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            150 => {
                __reduce150(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                __reduce152(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            153 => {
                __reduce153(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                __reduce155(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            156 => {
                __reduce156(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                __reduce157(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            158 => {
                __reduce158(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            159 => {
                __reduce159(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            160 => {
                __reduce160(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            161 => {
                __reduce161(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            162 => {
                __reduce162(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            163 => {
                __reduce163(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            164 => {
                __reduce164(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            165 => {
                __reduce165(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            166 => {
                __reduce166(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            167 => {
                __reduce167(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            168 => {
                __reduce168(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            169 => {
                __reduce169(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                __reduce170(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            171 => {
                __reduce171(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                // ValueRecord = "$", Ident => ActionFn(233);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action233::<>(input, ast, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant49(__nt), __end));
                (2, 71)
            }
            173 => {
                __reduce173(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            174 => {
                __reduce174(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                // ValueRecord = StringLiteral => ActionFn(236);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action236::<>(input, ast, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant49(__nt), __end));
                (1, 71)
            }
            176 => {
                __reduce176(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            177 => {
                __reduce177(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            179 => {
                __reduce179(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            180 => {
                __reduce180(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            182 => {
                __reduce182(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            183 => {
                __reduce183(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            185 => {
                __reduce185(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            186 => {
                __reduce186(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            188 => {
                __reduce188(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            189 => {
                __reduce189(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            191 => {
                __reduce191(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            192 => {
                __reduce192(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            194 => {
                __reduce194(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            195 => {
                // __TypeSystemDocument = TypeSystemDocument => ActionFn(0);
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<>(input, ast, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (values::ids::StringId, Span, ValueId), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ArgumentId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ConstValueId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DefinitionId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DescriptionId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DirectiveDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DirectiveLocation, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, EnumDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, EnumValueDefinitionId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IdRange<DirectiveId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IdRange<RootOperationTypeDefinitionId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, InputObjectDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, InterfaceDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ObjectDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<ConstValueId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<DescriptionId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<IdRange<RootOperationTypeDefinitionId>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<()>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<ArgumentId>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<EnumValueDefinitionId>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<StringId>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<Vec<UnionMemberId>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<bool>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Option<lexer::Token<'input>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, RootOperationTypeDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ScalarDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SchemaDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, StringId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, StringLiteralId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, TypeId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, UnionDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ValueId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ValueRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<()>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<ArgumentId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<DirectiveLocation>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<EnumValueDefinitionId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<StringId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<UnionMemberId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, WrappingType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<()>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<(values::ids::StringId, Span, ValueId)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<ArgumentId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<EnumValueDefinitionId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<RootOperationTypeDefinitionRecord>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<ValueRecord>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<WrappingType>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<lexer::Token<'input>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, bool, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, lexer::Token<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __reduce0<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "&"? = "&" => ActionFn(133);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action133::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 0)
    }
    fn __reduce1<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "&"? =  => ActionFn(134);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action134::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 0)
    }
    fn __reduce2<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "["* =  => ActionFn(111);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action111::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 1)
    }
    fn __reduce3<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "["* = "["+ => ActionFn(112);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action112::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 1)
    }
    fn __reduce4<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "["+ = "[" => ActionFn(151);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action151::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 2)
    }
    fn __reduce5<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "["+ = "["+, "[" => ActionFn(152);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action152::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    fn __reduce6<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "|"? = "|" => ActionFn(123);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action123::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 3)
    }
    fn __reduce7<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // "|"? =  => ActionFn(124);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action124::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 3)
    }
    fn __reduce8<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(146);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action146::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 4)
    }
    fn __reduce9<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(145);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action145::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 5)
    }
    fn __reduce10<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument = Name, ":", ConstValue => ActionFn(208);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action208::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 6)
    }
    fn __reduce11<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action99::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    fn __reduce12<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument* = Argument+ => ActionFn(100);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action100::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    fn __reduce13<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument+ = Argument => ActionFn(161);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action161::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    fn __reduce14<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument+ = Argument+, Argument => ActionFn(162);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action162::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 8)
    }
    fn __reduce15<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arguments = "(", ")" => ActionFn(244);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action244::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 9)
    }
    fn __reduce16<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arguments = "(", Argument+, ")" => ActionFn(245);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action245::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 9)
    }
    fn __reduce17<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arguments? = Arguments => ActionFn(101);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action101::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    fn __reduce18<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arguments? =  => ActionFn(102);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action102::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 10)
    }
    fn __reduce19<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgumentsDefinition = "(", InputValueDefinition+, ")" => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action32::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 11)
    }
    fn __reduce20<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgumentsDefinition? = ArgumentsDefinition => ActionFn(129);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action129::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 12)
    }
    fn __reduce21<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ArgumentsDefinition? =  => ActionFn(130);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action130::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    fn __reduce22<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ConstValue = ValueRecord => ActionFn(54);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action54::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 13)
    }
    fn __reduce23<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DefaultValue = "=", ConstValue => ActionFn(48);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action48::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 14)
    }
    fn __reduce24<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DefaultValue? = DefaultValue => ActionFn(113);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action113::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 15)
    }
    fn __reduce25<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DefaultValue? =  => ActionFn(114);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action114::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 15)
    }
    fn __reduce26<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DefinitionAndDescription = Description, TypeSystemDefinition => ActionFn(254);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant44(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action254::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    fn __reduce27<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DefinitionAndDescription = TypeSystemDefinition => ActionFn(255);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action255::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 16)
    }
    fn __reduce28<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DefinitionAndDescription+ = DefinitionAndDescription => ActionFn(147);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action147::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    fn __reduce29<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DefinitionAndDescription+ = DefinitionAndDescription+, DefinitionAndDescription => ActionFn(148);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action148::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 17)
    }
    fn __reduce30<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Description = StringValue => ActionFn(209);
        let __sym0 = __pop_Variant42(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action209::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 18)
    }
    fn __reduce31<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Description? = Description => ActionFn(143);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action143::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 19)
    }
    fn __reduce32<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Description? =  => ActionFn(144);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action144::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 19)
    }
    fn __reduce33<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive = "@", Name, Arguments => ActionFn(246);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant7(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action246::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 20)
    }
    fn __reduce34<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive = "@", Name => ActionFn(247);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action247::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 20)
    }
    fn __reduce35<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive* =  => ActionFn(103);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action103::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 21)
    }
    fn __reduce36<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive* = Directive+ => ActionFn(104);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 21)
    }
    fn __reduce37<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive+ = Directive => ActionFn(159);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action159::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 22)
    }
    fn __reduce38<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive+ = Directive+, Directive => ActionFn(160);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action160::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 22)
    }
    fn __reduce39<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectiveDefinition = directive, "@", Name, ArgumentsDefinition, Repeatable, on, DirectiveLocations => ActionFn(286);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant19(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant34(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action286::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (7, 23)
    }
    fn __reduce40<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectiveDefinition = directive, "@", Name, ArgumentsDefinition, on, DirectiveLocations => ActionFn(287);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action287::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 23)
    }
    fn __reduce41<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectiveDefinition = directive, "@", Name, Repeatable, on, DirectiveLocations => ActionFn(288);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant34(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action288::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 23)
    }
    fn __reduce42<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectiveDefinition = directive, "@", Name, on, DirectiveLocations => ActionFn(289);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant19(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action289::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 23)
    }
    fn __reduce44<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectiveLocations = DirectiveLocations, "|", DirectiveLocation => ActionFn(44);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action44::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    fn __reduce45<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectiveLocations = "|", DirectiveLocation => ActionFn(167);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action167::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 25)
    }
    fn __reduce46<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DirectiveLocations = DirectiveLocation => ActionFn(168);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action168::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 25)
    }
    fn __reduce47<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directives =  => ActionFn(266);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action266::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    fn __reduce48<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directives = Directive+ => ActionFn(267);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action267::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    fn __reduce49<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumDefinition = "enum", Name, Directives, EnumValuesDefinition => ActionFn(268);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant25(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action268::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (4, 27)
    }
    fn __reduce50<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumDefinition = "enum", Name, Directives => ActionFn(269);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action269::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (3, 27)
    }
    fn __reduce51<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = RawIdent => ActionFn(70);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action70::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 28)
    }
    fn __reduce52<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = schema => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action71::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 28)
    }
    fn __reduce53<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = query => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action72::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 28)
    }
    fn __reduce54<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = ty => ActionFn(73);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action73::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 28)
    }
    fn __reduce55<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = input => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 28)
    }
    fn __reduce56<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValueDefinition = Description, EnumValue, Directives => ActionFn(256);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action256::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (3, 29)
    }
    fn __reduce57<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValueDefinition = EnumValue, Directives => ActionFn(257);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action257::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 29)
    }
    fn __reduce58<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValueDefinition+ = EnumValueDefinition => ActionFn(119);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action119::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 30)
    }
    fn __reduce59<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValueDefinition+ = EnumValueDefinition+, EnumValueDefinition => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action120::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 30)
    }
    fn __reduce60<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValuesDefinition = "{", EnumValueDefinition+, "}" => ActionFn(38);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action38::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 31)
    }
    fn __reduce61<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValuesDefinition? = EnumValuesDefinition => ActionFn(121);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action121::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 32)
    }
    fn __reduce62<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValuesDefinition? =  => ActionFn(122);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action122::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 32)
    }
    fn __reduce63<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldDefinition = Description, Name, ArgumentsDefinition, ":", Type, Directives => ActionFn(258);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant20(__symbols);
        let __sym4 = __pop_Variant43(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action258::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (6, 33)
    }
    fn __reduce64<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldDefinition = Name, ArgumentsDefinition, ":", Type, Directives => ActionFn(259);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant43(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action259::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 33)
    }
    fn __reduce65<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldDefinition = Description, Name, ":", Type, Directives => ActionFn(260);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant43(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action260::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 33)
    }
    fn __reduce66<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldDefinition = Name, ":", Type, Directives => ActionFn(261);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action261::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 33)
    }
    fn __reduce67<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldDefinition+ = FieldDefinition => ActionFn(131);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action131::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 34)
    }
    fn __reduce68<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldDefinition+ = FieldDefinition+, FieldDefinition => ActionFn(132);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action132::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 34)
    }
    fn __reduce69<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldsDefinition = "{", FieldDefinition+, "}" => ActionFn(30);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action30::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 35)
    }
    fn __reduce70<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldsDefinition? = FieldsDefinition => ActionFn(135);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action135::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 36)
    }
    fn __reduce71<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FieldsDefinition? =  => ActionFn(136);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action136::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 36)
    }
    fn __reduce72<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = RawIdent => ActionFn(79);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action79::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce73<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = schema => ActionFn(80);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action80::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce74<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = query => ActionFn(81);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action81::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce75<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = mutation => ActionFn(82);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action82::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce76<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = subscription => ActionFn(83);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action83::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce77<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = ty => ActionFn(84);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action84::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce78<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = input => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action85::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce79<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = true => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action86::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce80<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = false => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action87::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce81<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = null => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action88::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce82<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = implements => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action89::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce83<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = interface => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action90::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce84<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = "enum" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action91::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce85<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = union => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action92::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce86<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = scalar => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action93::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce87<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = extend => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action94::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce88<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = directive => ActionFn(95);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action95::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce89<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = repeatable => ActionFn(96);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action96::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce90<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = on => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action97::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce91<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = fragment => ActionFn(98);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action98::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    fn __reduce92<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImplementItem = "&", NamedType => ActionFn(29);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action29::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 38)
    }
    fn __reduce93<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImplementsInterfaces = ImplementsInterfaces, "&", NamedType => ActionFn(27);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action27::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 39)
    }
    fn __reduce94<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImplementsInterfaces = implements, "&", NamedType => ActionFn(163);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action163::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 39)
    }
    fn __reduce95<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImplementsInterfaces = implements, NamedType => ActionFn(164);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action164::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 39)
    }
    fn __reduce96<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImplementsInterfaces? = ImplementsInterfaces => ActionFn(137);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action137::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    fn __reduce97<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImplementsInterfaces? =  => ActionFn(138);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action138::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    fn __reduce98<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputFieldsDefinition = "{", InputValueDefinition+, "}" => ActionFn(41);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action41::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 41)
    }
    fn __reduce99<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputFieldsDefinition? = InputFieldsDefinition => ActionFn(117);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action117::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 42)
    }
    fn __reduce100<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputFieldsDefinition? =  => ActionFn(118);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action118::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 42)
    }
    fn __reduce101<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputObjectDefinition = input, Name, Directives, InputFieldsDefinition => ActionFn(282);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action282::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (4, 43)
    }
    fn __reduce102<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputObjectDefinition = input, Name, Directives => ActionFn(283);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action283::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 43)
    }
    fn __reduce103<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputValueDefinition = Description, Name, ":", Type, DefaultValue, Directives => ActionFn(262);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant20(__symbols);
        let __sym4 = __pop_Variant11(__symbols);
        let __sym3 = __pop_Variant43(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action262::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (6, 44)
    }
    fn __reduce104<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputValueDefinition = Name, ":", Type, DefaultValue, Directives => ActionFn(263);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action263::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 44)
    }
    fn __reduce105<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputValueDefinition = Description, Name, ":", Type, Directives => ActionFn(264);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant43(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action264::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 44)
    }
    fn __reduce106<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputValueDefinition = Name, ":", Type, Directives => ActionFn(265);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant43(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action265::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 44)
    }
    fn __reduce107<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputValueDefinition+ = InputValueDefinition => ActionFn(127);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action127::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 45)
    }
    fn __reduce108<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InputValueDefinition+ = InputValueDefinition+, InputValueDefinition => ActionFn(128);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action128::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 45)
    }
    fn __reduce109<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InterfaceDefinition = interface, Name, ImplementsInterfaces, Directives, FieldsDefinition => ActionFn(274);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant9(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action274::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (5, 46)
    }
    fn __reduce110<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InterfaceDefinition = interface, Name, Directives, FieldsDefinition => ActionFn(275);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action275::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 46)
    }
    fn __reduce111<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InterfaceDefinition = interface, Name, ImplementsInterfaces, Directives => ActionFn(276);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action276::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (4, 46)
    }
    fn __reduce112<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InterfaceDefinition = interface, Name, Directives => ActionFn(277);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action277::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (3, 46)
    }
    fn __reduce113<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Name = Ident => ActionFn(49);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action49::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 47)
    }
    fn __reduce114<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // NamedType = Ident => ActionFn(50);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 48)
    }
    fn __reduce115<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectDefinition = ty, Name, ImplementsInterfaces, Directives, FieldsDefinition => ActionFn(278);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant9(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action278::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (5, 49)
    }
    fn __reduce116<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectDefinition = ty, Name, Directives, FieldsDefinition => ActionFn(279);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action279::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (4, 49)
    }
    fn __reduce117<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectDefinition = ty, Name, ImplementsInterfaces, Directives => ActionFn(280);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action280::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (4, 49)
    }
    fn __reduce118<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectDefinition = ty, Name, Directives => ActionFn(281);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action281::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 49)
    }
    fn __reduce119<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField = Name, ":", Value => ActionFn(220);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant48(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action220::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (3, 50)
    }
    fn __reduce120<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField* =  => ActionFn(105);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action105::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 51)
    }
    fn __reduce121<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField* = ObjectField+ => ActionFn(106);
        let __sym0 = __pop_Variant33(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action106::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 51)
    }
    fn __reduce122<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField+ = ObjectField => ActionFn(157);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action157::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 52)
    }
    fn __reduce123<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField+ = ObjectField+, ObjectField => ActionFn(158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant33(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action158::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (2, 52)
    }
    fn __reduce124<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Repeatable = repeatable => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 53)
    }
    fn __reduce125<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Repeatable? = Repeatable => ActionFn(115);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action115::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 54)
    }
    fn __reduce126<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Repeatable? =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action116::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 54)
    }
    fn __reduce127<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinition = query, ":", NamedType => ActionFn(221);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action221::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 55)
    }
    fn __reduce128<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinition = mutation, ":", NamedType => ActionFn(222);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action222::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 55)
    }
    fn __reduce129<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinition = subscription, ":", NamedType => ActionFn(223);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action223::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 55)
    }
    fn __reduce130<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinition* =  => ActionFn(139);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action139::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 56)
    }
    fn __reduce131<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinition* = RootOperationTypeDefinition+ => ActionFn(140);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action140::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 56)
    }
    fn __reduce132<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinition+ = RootOperationTypeDefinition => ActionFn(149);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action149::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 57)
    }
    fn __reduce133<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinition+ = RootOperationTypeDefinition+, RootOperationTypeDefinition => ActionFn(150);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant36(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action150::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 57)
    }
    fn __reduce134<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinitions = "{", "}" => ActionFn(290);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action290::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 58)
    }
    fn __reduce135<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinitions = "{", RootOperationTypeDefinition+, "}" => ActionFn(291);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant37(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action291::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (3, 58)
    }
    fn __reduce136<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinitions? = RootOperationTypeDefinitions => ActionFn(141);
        let __sym0 = __pop_Variant38(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action141::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 59)
    }
    fn __reduce137<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RootOperationTypeDefinitions? =  => ActionFn(142);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action142::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 59)
    }
    fn __reduce138<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ScalarDefinition = scalar, Name, Directives => ActionFn(224);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action224::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (3, 60)
    }
    fn __reduce139<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SchemaDefinition = schema, Directives, RootOperationTypeDefinitions => ActionFn(225);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action225::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (3, 61)
    }
    fn __reduce140<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SchemaExtensionDefinition = schema, Directives, RootOperationTypeDefinitions => ActionFn(292);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant38(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action292::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (3, 62)
    }
    fn __reduce141<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SchemaExtensionDefinition = schema, Directives => ActionFn(293);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action293::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (2, 62)
    }
    fn __reduce143<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringValue = BlockStringLiteral => ActionFn(69);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 63)
    }
    fn __reduce144<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = NamedType => ActionFn(298);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action298::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 64)
    }
    fn __reduce145<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = NamedType, WrappingType+ => ActionFn(299);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant52(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action299::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (2, 64)
    }
    fn __reduce146<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = "["+, NamedType => ActionFn(300);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action300::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (2, 64)
    }
    fn __reduce147<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Type = "["+, NamedType, WrappingType+ => ActionFn(301);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant52(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action301::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (3, 64)
    }
    fn __reduce148<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = SchemaDefinition => ActionFn(4);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce149<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = ScalarDefinition => ActionFn(5);
        let __sym0 = __pop_Variant40(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce150<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = ObjectDefinition => ActionFn(6);
        let __sym0 = __pop_Variant31(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce151<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = InterfaceDefinition => ActionFn(7);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce152<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = UnionDefinition => ActionFn(8);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce153<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = EnumDefinition => ActionFn(9);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce154<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = InputObjectDefinition => ActionFn(10);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce155<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = extend, SchemaExtensionDefinition => ActionFn(11);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant41(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action11::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 65)
    }
    fn __reduce156<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = extend, ScalarDefinition => ActionFn(12);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant40(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action12::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 65)
    }
    fn __reduce157<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = extend, ObjectDefinition => ActionFn(13);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action13::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 65)
    }
    fn __reduce158<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = extend, InterfaceDefinition => ActionFn(14);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action14::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 65)
    }
    fn __reduce159<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = extend, UnionDefinition => ActionFn(15);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant45(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action15::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 65)
    }
    fn __reduce160<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = extend, EnumDefinition => ActionFn(16);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action16::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 65)
    }
    fn __reduce161<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = extend, InputObjectDefinition => ActionFn(17);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action17::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 65)
    }
    fn __reduce162<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDefinition = DirectiveDefinition => ActionFn(18);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce163<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeSystemDocument = DefinitionAndDescription+ => ActionFn(1);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 66)
    }
    fn __reduce164<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnionDefinition = union, Name, Directives, UnionMemberTypes => ActionFn(294);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant46(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action294::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (4, 67)
    }
    fn __reduce165<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnionDefinition = union, Name, Directives => ActionFn(295);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action295::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (3, 67)
    }
    fn __reduce166<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnionMemberTypes = UnionMemberTypes, "|", NamedType => ActionFn(230);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant46(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action230::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (3, 68)
    }
    fn __reduce167<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnionMemberTypes = "=", "|", NamedType => ActionFn(231);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant22(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action231::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (3, 68)
    }
    fn __reduce168<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnionMemberTypes = "=", NamedType => ActionFn(232);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action232::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (2, 68)
    }
    fn __reduce169<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnionMemberTypes? = UnionMemberTypes => ActionFn(125);
        let __sym0 = __pop_Variant46(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action125::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (1, 69)
    }
    fn __reduce170<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // UnionMemberTypes? =  => ActionFn(126);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action126::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (0, 69)
    }
    fn __reduce171<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = ValueRecord => ActionFn(55);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 70)
    }
    fn __reduce173<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = IntegerLiteral => ActionFn(234);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action234::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 71)
    }
    fn __reduce174<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = FloatLiteral => ActionFn(235);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action235::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 71)
    }
    fn __reduce176<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = BlockStringLiteral => ActionFn(237);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action237::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 71)
    }
    fn __reduce177<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = true => ActionFn(238);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action238::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 71)
    }
    fn __reduce178<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = false => ActionFn(239);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action239::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 71)
    }
    fn __reduce179<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = null => ActionFn(240);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action240::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 71)
    }
    fn __reduce180<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = "[", "]" => ActionFn(296);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action296::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (2, 71)
    }
    fn __reduce181<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = "[", ValueRecord+, "]" => ActionFn(297);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant50(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action297::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (3, 71)
    }
    fn __reduce182<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = "{", "}" => ActionFn(284);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action284::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (2, 71)
    }
    fn __reduce183<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = "{", ObjectField+, "}" => ActionFn(285);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant33(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action285::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (3, 71)
    }
    fn __reduce184<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord = EnumValue => ActionFn(243);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action243::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 71)
    }
    fn __reduce185<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord* =  => ActionFn(107);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action107::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (0, 72)
    }
    fn __reduce186<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord* = ValueRecord+ => ActionFn(108);
        let __sym0 = __pop_Variant50(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action108::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 72)
    }
    fn __reduce187<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord+ = ValueRecord => ActionFn(155);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action155::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 73)
    }
    fn __reduce188<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ValueRecord+ = ValueRecord+, ValueRecord => ActionFn(156);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant49(__symbols);
        let __sym0 = __pop_Variant50(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action156::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (2, 73)
    }
    fn __reduce189<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WrappingType = "!" => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action52::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 74)
    }
    fn __reduce190<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WrappingType = "]" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (1, 74)
    }
    fn __reduce191<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WrappingType* =  => ActionFn(109);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action109::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (0, 75)
    }
    fn __reduce192<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WrappingType* = WrappingType+ => ActionFn(110);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action110::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 75)
    }
    fn __reduce193<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WrappingType+ = WrappingType => ActionFn(153);
        let __sym0 = __pop_Variant51(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action153::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 76)
    }
    fn __reduce194<
        'input,
    >(
        input: &'input str,
        ast: &mut TypeSystemAstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // WrappingType+ = WrappingType+, WrappingType => ActionFn(154);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action154::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (2, 76)
    }
}
#[allow(unused_imports)]
pub use self::__parse__TypeSystemDocument::TypeSystemDocumentParser;

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action0<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, (), usize),
) {
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action1<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, defs, _): (usize, alloc::vec::Vec<()>, usize),
) {
    {}
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action2<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, literal, _): (usize, StringLiteralId, usize),
    (_, end, _): (usize, usize, usize),
) -> DescriptionId {
    {
        ast.description(DescriptionRecord {
            literal,
            span: Span::new(start, end),
        })
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action3<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, description, _): (usize, Option<DescriptionId>, usize),
    (_, def, _): (usize, DefinitionId, usize),
) {
    {
        ast.store_description(def, description)
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action4<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, def, _): (usize, SchemaDefinitionRecord, usize),
) -> DefinitionId {
    ast.schema_definition(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action5<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, def, _): (usize, ScalarDefinitionRecord, usize),
) -> DefinitionId {
    ast.scalar_definition(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action6<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, def, _): (usize, ObjectDefinitionRecord, usize),
) -> DefinitionId {
    ast.object_definition(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action7<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, def, _): (usize, InterfaceDefinitionRecord, usize),
) -> DefinitionId {
    ast.interface_definition(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action8<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, def, _): (usize, UnionDefinitionRecord, usize),
) -> DefinitionId {
    ast.union_definition(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action9<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, def, _): (usize, EnumDefinitionRecord, usize),
) -> DefinitionId {
    ast.enum_definition(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action10<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, def, _): (usize, InputObjectDefinitionRecord, usize),
) -> DefinitionId {
    ast.input_object_definition(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action11<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, def, _): (usize, SchemaDefinitionRecord, usize),
) -> DefinitionId {
    ast.schema_extension(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action12<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, def, _): (usize, ScalarDefinitionRecord, usize),
) -> DefinitionId {
    ast.scalar_extension(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action13<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, def, _): (usize, ObjectDefinitionRecord, usize),
) -> DefinitionId {
    ast.object_extension(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action14<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, def, _): (usize, InterfaceDefinitionRecord, usize),
) -> DefinitionId {
    ast.interface_extension(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action15<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, def, _): (usize, UnionDefinitionRecord, usize),
) -> DefinitionId {
    ast.union_extension(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action16<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, def, _): (usize, EnumDefinitionRecord, usize),
) -> DefinitionId {
    ast.enum_extension(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action17<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, def, _): (usize, InputObjectDefinitionRecord, usize),
) -> DefinitionId {
    ast.input_object_extension(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action18<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, def, _): (usize, DirectiveDefinitionRecord, usize),
) -> DefinitionId {
    ast.directive_definition(def)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action19<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, root_operations, _): (usize, IdRange<RootOperationTypeDefinitionId>, usize),
    (_, end, _): (usize, usize, usize),
) -> SchemaDefinitionRecord {
    SchemaDefinitionRecord {
        description: None,
        directives,
        root_operations,
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action20<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, root_operations, _): (usize, Option<IdRange<RootOperationTypeDefinitionId>>, usize),
    (_, end, _): (usize, usize, usize),
) -> SchemaDefinitionRecord {
    SchemaDefinitionRecord {
        description: None,
        directives,
        root_operations: root_operations.unwrap_or_default(),
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action21<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, root_operations, _): (
        usize,
        alloc::vec::Vec<RootOperationTypeDefinitionRecord>,
        usize,
    ),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> IdRange<RootOperationTypeDefinitionId> {
    ast.root_operation_definitions(root_operations)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action22<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, operation_type_end, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, end, _): (usize, usize, usize),
) -> RootOperationTypeDefinitionRecord {
    RootOperationTypeDefinitionRecord {
        operation_type: OperationType::Query,
        operation_type_span: Span::new(start, operation_type_end),
        named_type: name,
        named_type_span: Span::new(name_start, name_end),
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action23<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, operation_type_end, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, end, _): (usize, usize, usize),
) -> RootOperationTypeDefinitionRecord {
    RootOperationTypeDefinitionRecord {
        operation_type: OperationType::Mutation,
        operation_type_span: Span::new(start, operation_type_end),
        named_type: name,
        named_type_span: Span::new(name_start, name_end),
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action24<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, operation_type_end, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, end, _): (usize, usize, usize),
) -> RootOperationTypeDefinitionRecord {
    RootOperationTypeDefinitionRecord {
        operation_type: OperationType::Subscription,
        operation_type_span: Span::new(start, operation_type_end),
        named_type: name,
        named_type_span: Span::new(name_start, name_end),
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action25<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, end, _): (usize, usize, usize),
) -> ScalarDefinitionRecord {
    ScalarDefinitionRecord {
        name,
        name_span: Span::new(name_start, name_end),
        description: None,
        directives,
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action26<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, implements, _): (usize, Option<Vec<StringId>>, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, fields, _): (usize, Option<Vec<()>>, usize),
    (_, end, _): (usize, usize, usize),
) -> ObjectDefinitionRecord {
    ObjectDefinitionRecord {
        name,
        name_span: Span::new(name_start, name_end),
        description: None,
        directives,
        implements_interfaces: implements.unwrap_or_default(),
        fields: ast
            .field_definition_range(Some(fields.map(|fields| fields.len()).unwrap_or_default())),
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action27<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, interfaces, _): (usize, Vec<StringId>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
) -> Vec<StringId> {
    {
        let mut interfaces = interfaces;
        interfaces.push(name);
        interfaces
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action28<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, _, _): (usize, Option<lexer::Token<'input>>, usize),
    (_, name, _): (usize, StringId, usize),
) -> Vec<StringId> {
    {
        vec![name]
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action29<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
) -> StringId {
    name
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action30<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, fields, _): (usize, alloc::vec::Vec<()>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> Vec<()> {
    fields
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action31<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, description, _): (usize, Option<DescriptionId>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, arguments, _): (usize, Option<Vec<()>>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, ty, _): (usize, TypeId, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, end, _): (usize, usize, usize),
) {
    {
        let arguments = ast.input_value_definition_range(Some(
            arguments
                .map(|arguments| arguments.len())
                .unwrap_or_default(),
        ));
        ast.field_definition(FieldDefinitionRecord {
            name,
            name_span: Span::new(name_start, name_end),
            ty,
            arguments,
            description,
            directives,
            span: Span::new(start, end),
        });
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action32<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, arguments, _): (usize, alloc::vec::Vec<()>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> Vec<()> {
    arguments
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action33<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, implements, _): (usize, Option<Vec<StringId>>, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, fields, _): (usize, Option<Vec<()>>, usize),
    (_, end, _): (usize, usize, usize),
) -> InterfaceDefinitionRecord {
    InterfaceDefinitionRecord {
        name,
        name_span: Span::new(name_start, name_end),
        description: None,
        directives,
        implements_interfaces: implements.unwrap_or_default(),
        fields: ast
            .field_definition_range(Some(fields.map(|fields| fields.len()).unwrap_or_default())),
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action34<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, members, _): (usize, Option<Vec<UnionMemberId>>, usize),
    (_, end, _): (usize, usize, usize),
) -> UnionDefinitionRecord {
    UnionDefinitionRecord {
        name,
        name_span: Span::new(name_start, name_end),
        description: None,
        members: ast.union_member_range(members.map(|members| members.len())),
        directives,
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action35<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, members, _): (usize, Vec<UnionMemberId>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, end, _): (usize, usize, usize),
) -> Vec<UnionMemberId> {
    {
        let mut members = members;
        members.push(ast.union_member(UnionMemberRecord {
            name,
            span: Span::new(start, end),
        }));
        members
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action36<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, _, _): (usize, Option<lexer::Token<'input>>, usize),
    (_, start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, end, _): (usize, usize, usize),
) -> Vec<UnionMemberId> {
    {
        vec![ast.union_member(UnionMemberRecord {
            name,
            span: Span::new(start, end),
        })]
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action37<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, values, _): (usize, Option<Vec<EnumValueDefinitionId>>, usize),
    (_, end, _): (usize, usize, usize),
) -> EnumDefinitionRecord {
    EnumDefinitionRecord {
        name,
        name_span: Span::new(name_start, name_end),
        description: None,
        directives,
        values: ast.enum_value_definition_range(values.map(|values| values.len())),
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action38<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, values, _): (usize, alloc::vec::Vec<EnumValueDefinitionId>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> Vec<EnumValueDefinitionId> {
    values
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action39<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, description, _): (usize, Option<DescriptionId>, usize),
    (_, value_start, _): (usize, usize, usize),
    (_, value, _): (usize, StringId, usize),
    (_, value_end, _): (usize, usize, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, end, _): (usize, usize, usize),
) -> EnumValueDefinitionId {
    ast.enum_value_definition(EnumValueDefinitionRecord {
        value,
        value_span: Span::new(value_start, value_end),
        description,
        directives,
        span: Span::new(start, end),
    })
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action40<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, fields, _): (usize, Option<Vec<()>>, usize),
    (_, end, _): (usize, usize, usize),
) -> InputObjectDefinitionRecord {
    InputObjectDefinitionRecord {
        name,
        name_span: Span::new(name_start, name_end),
        description: None,
        directives,
        fields: ast.input_value_definition_range(Some(
            fields.map(|fields| fields.len()).unwrap_or_default(),
        )),
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action41<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, fields, _): (usize, alloc::vec::Vec<()>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> Vec<()> {
    fields
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action42<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, arguments, _): (usize, Option<Vec<()>>, usize),
    (_, repeatable, _): (usize, Option<bool>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, locations, _): (usize, Vec<DirectiveLocation>, usize),
    (_, end, _): (usize, usize, usize),
) -> DirectiveDefinitionRecord {
    DirectiveDefinitionRecord {
        name,
        name_span: Span::new(name_start, name_end),
        description: None,
        arguments: ast.input_value_definition_range(Some(
            arguments
                .map(|arguments| arguments.len())
                .unwrap_or_default(),
        )),
        is_repeatable: repeatable.unwrap_or_default(),
        locations,
        span: Span::new(start, end),
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action43<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> bool {
    true
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action44<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, locations, _): (usize, Vec<DirectiveLocation>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, location, _): (usize, DirectiveLocation, usize),
) -> Vec<DirectiveLocation> {
    {
        let mut locations = locations;
        locations.push(location);
        locations
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action45<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, Option<lexer::Token<'input>>, usize),
    (_, location, _): (usize, DirectiveLocation, usize),
) -> Vec<DirectiveLocation> {
    {
        vec![location]
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action46<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, s, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<
    DirectiveLocation,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    {
        s.parse::<DirectiveLocation>()
            .map_err(|error| error.into_lalrpop_error((start, end)))
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action47<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, description, _): (usize, Option<DescriptionId>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, ty, _): (usize, TypeId, usize),
    (_, default_start, _): (usize, usize, usize),
    (_, default, _): (usize, Option<ConstValueId>, usize),
    (_, default_end, _): (usize, usize, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, end, _): (usize, usize, usize),
) {
    {
        ast.input_value_definition(InputValueDefinitionRecord {
            name,
            name_span: Span::new(name_start, name_end),
            ty,
            description,
            directives,
            default_value: default,
            default_value_span: Span::new(default_start, default_end),
            span: Span::new(start, end),
        });
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action48<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, v, _): (usize, ConstValueId, usize),
) -> ConstValueId {
    v
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action49<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringId {
    ast.ident(s)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action50<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringId {
    ast.ident(s)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action51<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, alloc::vec::Vec<lexer::Token<'input>>, usize),
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, wrappers, _): (usize, alloc::vec::Vec<WrappingType>, usize),
    (_, end, _): (usize, usize, usize),
) -> TypeId {
    ast.type_reference(TypeRecord {
        name,
        name_start,
        wrappers: TypeWrappers::from_iter(wrappers),
        span: Span::new(start, end),
    })
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action52<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> WrappingType {
    WrappingType::NonNull
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action53<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> WrappingType {
    WrappingType::List
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action54<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, record, _): (usize, ValueRecord, usize),
) -> ConstValueId {
    {
        ast.values.const_value(record)
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action55<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, record, _): (usize, ValueRecord, usize),
) -> ValueId {
    {
        ast.values.value(record)
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action56<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<
    ValueRecord,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    {
        Err(lalrpop_util::ParseError::User {
            error: AdditionalErrors::VariableInConstPosition(start, name.to_string(), end),
        })
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action57<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, int, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::Int(int.parse().unwrap()),
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action58<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, float, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::Float(float.parse().unwrap()),
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action59<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, s, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> Result<
    ValueRecord,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    {
        let id = ast.intern_owned_string(unquote_string(s, start)?);
        Ok(ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::String(values::ids::StringId::from_type_system_id(id)),
        })
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action60<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, s, _): (usize, &'input str, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        let id = ast.intern_owned_string(trim_block_string_whitespace(unquote_block_string(s)));
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::String(values::ids::StringId::from_type_system_id(id)),
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action61<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::Boolean(true),
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action62<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::Boolean(false),
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action63<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::Null,
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action64<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, values, _): (usize, alloc::vec::Vec<ValueRecord>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        let id = ast.values.list(values);
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::List(id),
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action65<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, fields, _): (
        usize,
        alloc::vec::Vec<(values::ids::StringId, Span, ValueId)>,
        usize,
    ),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        let fields = ast.values.fields(fields);
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::Object(fields),
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action66<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, value, _): (usize, StringId, usize),
    (_, end, _): (usize, usize, usize),
) -> ValueRecord {
    {
        ValueRecord {
            span: Span::new(start, end),
            kind: ValueKind::Enum(values::ids::StringId::from_type_system_id(value)),
        }
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action67<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, name_start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, value, _): (usize, ValueId, usize),
) -> (values::ids::StringId, Span, ValueId) {
    {
        (
            values::ids::StringId::from_type_system_id(name),
            Span::new(name_start, name_end),
            value,
        )
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action68<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, s, _): (usize, &'input str, usize),
) -> Result<
    StringLiteralId,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    {
        Ok(StringLiteralId::String(
            ast.intern_owned_string(unquote_string(s, start)?),
        ))
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action69<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringLiteralId {
    {
        let id = ast.block_string(unquote_block_string(s));
        StringLiteralId::Block(id)
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action70<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringId {
    ast.ident(s)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action71<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    ast.ident("schema")
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action72<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    ast.ident("query")
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action73<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    ast.ident("type")
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action74<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    ast.ident("input")
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action75<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, directives, _): (usize, alloc::vec::Vec<()>, usize),
) -> IdRange<DirectiveId> {
    {
        ast.directive_range(Some(directives.len()))
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action76<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, name_start, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, arguments, _): (usize, Option<Vec<ArgumentId>>, usize),
) {
    {
        let arguments = ast.argument_range(arguments.map(|arguments| arguments.len()));

        ast.directive(DirectiveRecord {
            name,
            name_span: Span::new(name_start, name_end),
            arguments,
        });
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action77<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, arguments, _): (usize, alloc::vec::Vec<ArgumentId>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> Vec<ArgumentId> {
    arguments
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action78<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, start, _): (usize, usize, usize),
    (_, name, _): (usize, StringId, usize),
    (_, name_end, _): (usize, usize, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, value, _): (usize, ConstValueId, usize),
    (_, end, _): (usize, usize, usize),
) -> ArgumentId {
    {
        ast.argument(ArgumentRecord {
            name,
            name_span: Span::new(start, name_end),
            value,
            span: Span::new(start, end),
        })
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action79<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> &'input str {
    s
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action80<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "schema"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action81<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "query"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action82<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "mutation"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action83<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "subscription"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action84<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "type"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action85<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "input"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action86<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "true"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action87<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "false"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action88<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "null"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action89<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "implements"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action90<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "interface"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action91<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "enum"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action92<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "union"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action93<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "scalar"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action94<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "extend"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action95<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "directive"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action96<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "repeatable"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action97<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "on"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action98<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "fragment"
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action99<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<ArgumentId> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action100<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<ArgumentId>, usize),
) -> alloc::vec::Vec<ArgumentId> {
    v
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action101<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, Vec<ArgumentId>, usize),
) -> Option<Vec<ArgumentId>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action102<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<ArgumentId>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action103<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<()> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action104<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
) -> alloc::vec::Vec<()> {
    v
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action105<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<(values::ids::StringId, Span, ValueId)> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action106<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (
        usize,
        alloc::vec::Vec<(values::ids::StringId, Span, ValueId)>,
        usize,
    ),
) -> alloc::vec::Vec<(values::ids::StringId, Span, ValueId)> {
    v
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action107<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<ValueRecord> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action108<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<ValueRecord>, usize),
) -> alloc::vec::Vec<ValueRecord> {
    v
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action109<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<WrappingType> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action110<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<WrappingType>, usize),
) -> alloc::vec::Vec<WrappingType> {
    v
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action111<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<lexer::Token<'input>> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action112<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<lexer::Token<'input>>, usize),
) -> alloc::vec::Vec<lexer::Token<'input>> {
    v
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action113<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, ConstValueId, usize),
) -> Option<ConstValueId> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action114<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<ConstValueId> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action115<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, bool, usize),
) -> Option<bool> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action116<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<bool> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action117<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, Vec<()>, usize),
) -> Option<Vec<()>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action118<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<()>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action119<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, EnumValueDefinitionId, usize),
) -> alloc::vec::Vec<EnumValueDefinitionId> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action120<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<EnumValueDefinitionId>, usize),
    (_, e, _): (usize, EnumValueDefinitionId, usize),
) -> alloc::vec::Vec<EnumValueDefinitionId> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action121<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, Vec<EnumValueDefinitionId>, usize),
) -> Option<Vec<EnumValueDefinitionId>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action122<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<EnumValueDefinitionId>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action123<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> Option<lexer::Token<'input>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action124<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<lexer::Token<'input>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action125<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, Vec<UnionMemberId>, usize),
) -> Option<Vec<UnionMemberId>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action126<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<UnionMemberId>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action127<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action128<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
    (_, e, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action129<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, Vec<()>, usize),
) -> Option<Vec<()>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action130<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<()>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action131<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action132<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
    (_, e, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action133<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> Option<lexer::Token<'input>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action134<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<lexer::Token<'input>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action135<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, Vec<()>, usize),
) -> Option<Vec<()>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action136<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<()>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action137<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, Vec<StringId>, usize),
) -> Option<Vec<StringId>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action138<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<Vec<StringId>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action139<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<RootOperationTypeDefinitionRecord> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action140<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (
        usize,
        alloc::vec::Vec<RootOperationTypeDefinitionRecord>,
        usize,
    ),
) -> alloc::vec::Vec<RootOperationTypeDefinitionRecord> {
    v
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action141<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, IdRange<RootOperationTypeDefinitionId>, usize),
) -> Option<IdRange<RootOperationTypeDefinitionId>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action142<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<IdRange<RootOperationTypeDefinitionId>> {
    None
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action143<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, DescriptionId, usize),
) -> Option<DescriptionId> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action144<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Option<DescriptionId> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::needless_lifetimes)]
fn __action145<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize {
    *__lookbehind
}

#[allow(unused_variables)]
#[allow(clippy::needless_lifetimes)]
fn __action146<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize {
    *__lookahead
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action147<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action148<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
    (_, e, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action149<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, RootOperationTypeDefinitionRecord, usize),
) -> alloc::vec::Vec<RootOperationTypeDefinitionRecord> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action150<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (
        usize,
        alloc::vec::Vec<RootOperationTypeDefinitionRecord>,
        usize,
    ),
    (_, e, _): (usize, RootOperationTypeDefinitionRecord, usize),
) -> alloc::vec::Vec<RootOperationTypeDefinitionRecord> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action151<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> alloc::vec::Vec<lexer::Token<'input>> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action152<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<lexer::Token<'input>>, usize),
    (_, e, _): (usize, lexer::Token<'input>, usize),
) -> alloc::vec::Vec<lexer::Token<'input>> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action153<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, WrappingType, usize),
) -> alloc::vec::Vec<WrappingType> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action154<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<WrappingType>, usize),
    (_, e, _): (usize, WrappingType, usize),
) -> alloc::vec::Vec<WrappingType> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action155<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, ValueRecord, usize),
) -> alloc::vec::Vec<ValueRecord> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action156<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<ValueRecord>, usize),
    (_, e, _): (usize, ValueRecord, usize),
) -> alloc::vec::Vec<ValueRecord> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action157<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, (values::ids::StringId, Span, ValueId), usize),
) -> alloc::vec::Vec<(values::ids::StringId, Span, ValueId)> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action158<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (
        usize,
        alloc::vec::Vec<(values::ids::StringId, Span, ValueId)>,
        usize,
    ),
    (_, e, _): (usize, (values::ids::StringId, Span, ValueId), usize),
) -> alloc::vec::Vec<(values::ids::StringId, Span, ValueId)> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action159<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action160<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
    (_, e, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action161<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, __0, _): (usize, ArgumentId, usize),
) -> alloc::vec::Vec<ArgumentId> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action162<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    (_, v, _): (usize, alloc::vec::Vec<ArgumentId>, usize),
    (_, e, _): (usize, ArgumentId, usize),
) -> alloc::vec::Vec<ArgumentId> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action163<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
) -> Vec<StringId> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action133(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action28(input, ast, __0, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action164<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
) -> Vec<StringId> {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action134(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action28(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action165<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, usize, usize),
    __1: (usize, usize, usize),
    __2: (usize, StringId, usize),
    __3: (usize, alloc::vec::Vec<WrappingType>, usize),
    __4: (usize, usize, usize),
) -> TypeId {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action111(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action51(input, ast, __0, __temp0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action166<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, usize, usize),
    __1: (usize, alloc::vec::Vec<lexer::Token<'input>>, usize),
    __2: (usize, usize, usize),
    __3: (usize, StringId, usize),
    __4: (usize, alloc::vec::Vec<WrappingType>, usize),
    __5: (usize, usize, usize),
) -> TypeId {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action112(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action51(input, ast, __0, __temp0, __2, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action167<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, DirectiveLocation, usize),
) -> Vec<DirectiveLocation> {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action123(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action45(input, ast, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action168<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, DirectiveLocation, usize),
) -> Vec<DirectiveLocation> {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action124(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action45(input, ast, __temp0, __0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action169<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, usize, usize),
    __3: (usize, StringId, usize),
    __4: (usize, usize, usize),
) -> Vec<UnionMemberId> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action123(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action36(input, ast, __0, __temp0, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action170<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, usize, usize),
    __2: (usize, StringId, usize),
    __3: (usize, usize, usize),
) -> Vec<UnionMemberId> {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action124(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action36(input, ast, __0, __temp0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action171<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, usize, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, ConstValueId, usize),
    __4: (usize, usize, usize),
) -> ArgumentId {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action78(input, ast, __temp0, __0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action172<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringLiteralId, usize),
    __1: (usize, usize, usize),
) -> DescriptionId {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action2(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action173<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, Option<Vec<ArgumentId>>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action76(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action174<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, usize, usize),
    __4: (usize, Option<Vec<()>>, usize),
    __5: (usize, Option<bool>, usize),
    __6: (usize, lexer::Token<'input>, usize),
    __7: (usize, Vec<DirectiveLocation>, usize),
    __8: (usize, usize, usize),
) -> DirectiveDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action42(
        input, ast, __temp0, __0, __temp1, __1, __2, __3, __4, __5, __6, __7, __8,
    )
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action175<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<
    DirectiveLocation,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action46(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action176<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Option<Vec<EnumValueDefinitionId>>, usize),
    __5: (usize, usize, usize),
) -> EnumDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action37(input, ast, __temp0, __0, __temp1, __1, __2, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action177<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, usize, usize),
) -> EnumValueDefinitionId {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action39(input, ast, __temp0, __0, __temp1, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action178<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, Option<Vec<()>>, usize),
    __4: (usize, lexer::Token<'input>, usize),
    __5: (usize, TypeId, usize),
    __6: (usize, IdRange<DirectiveId>, usize),
    __7: (usize, usize, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action31(
        input, ast, __temp0, __0, __temp1, __1, __2, __3, __4, __5, __6, __7,
    )
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action179<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Option<Vec<()>>, usize),
    __5: (usize, usize, usize),
) -> InputObjectDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action40(input, ast, __temp0, __0, __temp1, __1, __2, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action180<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, lexer::Token<'input>, usize),
    __4: (usize, TypeId, usize),
    __5: (usize, Option<ConstValueId>, usize),
    __6: (usize, usize, usize),
    __7: (usize, IdRange<DirectiveId>, usize),
    __8: (usize, usize, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __start2 = __4.2;
    let __end2 = __5.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    let __temp2 = __action146(input, ast, &__start2, &__end2);
    let __temp2 = (__start2, __temp2, __end2);
    __action47(
        input, ast, __temp0, __0, __temp1, __1, __2, __3, __4, __temp2, __5, __6, __7, __8,
    )
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action181<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, Option<Vec<StringId>>, usize),
    __4: (usize, IdRange<DirectiveId>, usize),
    __5: (usize, Option<Vec<()>>, usize),
    __6: (usize, usize, usize),
) -> InterfaceDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action33(
        input, ast, __temp0, __0, __temp1, __1, __2, __3, __4, __5, __6,
    )
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action182<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, Option<Vec<StringId>>, usize),
    __4: (usize, IdRange<DirectiveId>, usize),
    __5: (usize, Option<Vec<()>>, usize),
    __6: (usize, usize, usize),
) -> ObjectDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action26(
        input, ast, __temp0, __0, __temp1, __1, __2, __3, __4, __5, __6,
    )
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action183<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, usize, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, ValueId, usize),
) -> (values::ids::StringId, Span, ValueId) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action67(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action184<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, usize, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, StringId, usize),
    __4: (usize, usize, usize),
    __5: (usize, usize, usize),
) -> RootOperationTypeDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __2.2;
    let __end1 = __3.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action22(input, ast, __temp0, __0, __1, __2, __temp1, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action185<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, usize, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, StringId, usize),
    __4: (usize, usize, usize),
    __5: (usize, usize, usize),
) -> RootOperationTypeDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __2.2;
    let __end1 = __3.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action23(input, ast, __temp0, __0, __1, __2, __temp1, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action186<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, usize, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, StringId, usize),
    __4: (usize, usize, usize),
    __5: (usize, usize, usize),
) -> RootOperationTypeDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __2.2;
    let __end1 = __3.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action24(input, ast, __temp0, __0, __1, __2, __temp1, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action187<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, usize, usize),
) -> ScalarDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action25(input, ast, __temp0, __0, __temp1, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action188<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
    __2: (usize, IdRange<RootOperationTypeDefinitionId>, usize),
    __3: (usize, usize, usize),
) -> SchemaDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action19(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action189<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
    __2: (usize, Option<IdRange<RootOperationTypeDefinitionId>>, usize),
    __3: (usize, usize, usize),
) -> SchemaDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action20(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action190<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
) -> Result<
    StringLiteralId,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action68(input, ast, __temp0, __0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action191<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, alloc::vec::Vec<WrappingType>, usize),
    __2: (usize, usize, usize),
) -> TypeId {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.0;
    let __end1 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action165(input, ast, __temp0, __temp1, __0, __1, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action192<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, alloc::vec::Vec<lexer::Token<'input>>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, alloc::vec::Vec<WrappingType>, usize),
    __3: (usize, usize, usize),
) -> TypeId {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action166(input, ast, __temp0, __0, __temp1, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action193<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Option<Vec<UnionMemberId>>, usize),
    __5: (usize, usize, usize),
) -> UnionDefinitionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action146(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action34(input, ast, __temp0, __0, __temp1, __1, __2, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action194<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Vec<UnionMemberId>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, usize, usize),
) -> Vec<UnionMemberId> {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action35(input, ast, __0, __1, __temp0, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action195<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, usize, usize),
) -> Vec<UnionMemberId> {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action169(input, ast, __0, __1, __temp0, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action196<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, usize, usize),
) -> Vec<UnionMemberId> {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action170(input, ast, __0, __temp0, __1, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action197<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, usize, usize),
) -> Result<
    ValueRecord,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action56(input, ast, __temp0, __0, __1, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action198<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action57(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action199<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action58(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action200<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> Result<
    ValueRecord,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action59(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action201<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
    __1: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action60(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action202<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action61(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action203<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action62(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action204<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action63(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action205<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, alloc::vec::Vec<ValueRecord>, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action64(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action206<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (
        usize,
        alloc::vec::Vec<(values::ids::StringId, Span, ValueId)>,
        usize,
    ),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action65(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action207<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, usize, usize),
) -> ValueRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action146(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action66(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action208<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, ConstValueId, usize),
) -> ArgumentId {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __start1 = __2.2;
    let __end1 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action171(input, ast, __0, __temp0, __1, __2, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action209<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringLiteralId, usize),
) -> DescriptionId {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action172(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action210<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Option<Vec<ArgumentId>>, usize),
) {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action173(input, ast, __0, __1, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action211<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, Option<Vec<()>>, usize),
    __4: (usize, Option<bool>, usize),
    __5: (usize, lexer::Token<'input>, usize),
    __6: (usize, Vec<DirectiveLocation>, usize),
) -> DirectiveDefinitionRecord {
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __start1 = __6.2;
    let __end1 = __6.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action174(
        input, ast, __0, __1, __2, __temp0, __3, __4, __5, __6, __temp1,
    )
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action212<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
) -> Result<
    DirectiveLocation,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action175(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action213<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, Option<Vec<EnumValueDefinitionId>>, usize),
) -> EnumDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __3.2;
    let __end1 = __3.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action176(input, ast, __0, __1, __temp0, __2, __3, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action214<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
) -> EnumValueDefinitionId {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __2.2;
    let __end1 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action177(input, ast, __0, __1, __temp0, __2, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action215<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Option<Vec<()>>, usize),
    __3: (usize, lexer::Token<'input>, usize),
    __4: (usize, TypeId, usize),
    __5: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __5.2;
    let __end1 = __5.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action178(input, ast, __0, __1, __temp0, __2, __3, __4, __5, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action216<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, Option<Vec<()>>, usize),
) -> InputObjectDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __3.2;
    let __end1 = __3.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action179(input, ast, __0, __1, __temp0, __2, __3, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action217<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, TypeId, usize),
    __4: (usize, Option<ConstValueId>, usize),
    __5: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __4.2;
    let __end1 = __5.0;
    let __start2 = __5.2;
    let __end2 = __5.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    let __temp2 = __action145(input, ast, &__start2, &__end2);
    let __temp2 = (__start2, __temp2, __end2);
    __action180(
        input, ast, __0, __1, __temp0, __2, __3, __4, __temp1, __5, __temp2,
    )
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action218<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Option<Vec<StringId>>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Option<Vec<()>>, usize),
) -> InterfaceDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __4.2;
    let __end1 = __4.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action181(input, ast, __0, __1, __temp0, __2, __3, __4, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action219<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Option<Vec<StringId>>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Option<Vec<()>>, usize),
) -> ObjectDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __4.2;
    let __end1 = __4.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action182(input, ast, __0, __1, __temp0, __2, __3, __4, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action220<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, ValueId, usize),
) -> (values::ids::StringId, Span, ValueId) {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action183(input, ast, __0, __temp0, __1, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action221<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
) -> RootOperationTypeDefinitionRecord {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __start1 = __2.2;
    let __end1 = __2.2;
    let __start2 = __2.2;
    let __end2 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    let __temp2 = __action145(input, ast, &__start2, &__end2);
    let __temp2 = (__start2, __temp2, __end2);
    __action184(input, ast, __0, __temp0, __1, __2, __temp1, __temp2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action222<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
) -> RootOperationTypeDefinitionRecord {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __start1 = __2.2;
    let __end1 = __2.2;
    let __start2 = __2.2;
    let __end2 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    let __temp2 = __action145(input, ast, &__start2, &__end2);
    let __temp2 = (__start2, __temp2, __end2);
    __action185(input, ast, __0, __temp0, __1, __2, __temp1, __temp2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action223<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
) -> RootOperationTypeDefinitionRecord {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __start1 = __2.2;
    let __end1 = __2.2;
    let __start2 = __2.2;
    let __end2 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    let __temp2 = __action145(input, ast, &__start2, &__end2);
    let __temp2 = (__start2, __temp2, __end2);
    __action186(input, ast, __0, __temp0, __1, __2, __temp1, __temp2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action224<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
) -> ScalarDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __2.2;
    let __end1 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action187(input, ast, __0, __1, __temp0, __2, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action225<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
    __2: (usize, IdRange<RootOperationTypeDefinitionId>, usize),
) -> SchemaDefinitionRecord {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action188(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action226<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
    __2: (usize, Option<IdRange<RootOperationTypeDefinitionId>>, usize),
) -> SchemaDefinitionRecord {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action189(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action227<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, alloc::vec::Vec<WrappingType>, usize),
) -> TypeId {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action191(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action228<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, alloc::vec::Vec<lexer::Token<'input>>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, alloc::vec::Vec<WrappingType>, usize),
) -> TypeId {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action192(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action229<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, Option<Vec<UnionMemberId>>, usize),
) -> UnionDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __3.2;
    let __end1 = __3.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action145(input, ast, &__start1, &__end1);
    let __temp1 = (__start1, __temp1, __end1);
    __action193(input, ast, __0, __1, __temp0, __2, __3, __temp1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action230<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Vec<UnionMemberId>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
) -> Vec<UnionMemberId> {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action194(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action231<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
) -> Vec<UnionMemberId> {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action195(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action232<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
) -> Vec<UnionMemberId> {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action196(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action233<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, &'input str, usize),
) -> Result<
    ValueRecord,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action197(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action234<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action198(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action235<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action199(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action236<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
) -> Result<
    ValueRecord,
    __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
> {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action200(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action237<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, &'input str, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action201(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action238<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action202(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action239<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action203(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action240<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action204(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action241<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, alloc::vec::Vec<ValueRecord>, usize),
    __2: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action205(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action242<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (
        usize,
        alloc::vec::Vec<(values::ids::StringId, Span, ValueId)>,
        usize,
    ),
    __2: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action206(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action243<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action145(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action207(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action244<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
) -> Vec<ArgumentId> {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action99(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action77(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action245<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, alloc::vec::Vec<ArgumentId>, usize),
    __2: (usize, lexer::Token<'input>, usize),
) -> Vec<ArgumentId> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action100(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action77(input, ast, __0, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action246<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<ArgumentId>, usize),
) {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action101(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action210(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action247<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
) {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action102(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action210(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action248<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, Vec<()>, usize),
    __4: (usize, Option<bool>, usize),
    __5: (usize, lexer::Token<'input>, usize),
    __6: (usize, Vec<DirectiveLocation>, usize),
) -> DirectiveDefinitionRecord {
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action129(input, ast, __3);
    let __temp0 = (__start0, __temp0, __end0);
    __action211(input, ast, __0, __1, __2, __temp0, __4, __5, __6)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action249<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, Option<bool>, usize),
    __4: (usize, lexer::Token<'input>, usize),
    __5: (usize, Vec<DirectiveLocation>, usize),
) -> DirectiveDefinitionRecord {
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action130(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action211(input, ast, __0, __1, __2, __temp0, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action250<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<()>, usize),
    __3: (usize, lexer::Token<'input>, usize),
    __4: (usize, TypeId, usize),
    __5: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action129(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action215(input, ast, __0, __1, __temp0, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action251<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, TypeId, usize),
    __4: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action130(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action215(input, ast, __0, __1, __temp0, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action252<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, TypeId, usize),
    __4: (usize, ConstValueId, usize),
    __5: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action113(input, ast, __4);
    let __temp0 = (__start0, __temp0, __end0);
    __action217(input, ast, __0, __1, __2, __3, __temp0, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action253<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, Option<DescriptionId>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, TypeId, usize),
    __4: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __temp0 = __action114(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action217(input, ast, __0, __1, __2, __3, __temp0, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action254<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, DescriptionId, usize),
    __1: (usize, DefinitionId, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action143(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action3(input, ast, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action255<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, DefinitionId, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action144(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action3(input, ast, __temp0, __0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action256<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, DescriptionId, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
) -> EnumValueDefinitionId {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action143(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action214(input, ast, __temp0, __1, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action257<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
) -> EnumValueDefinitionId {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action144(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action214(input, ast, __temp0, __0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action258<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, DescriptionId, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<()>, usize),
    __3: (usize, lexer::Token<'input>, usize),
    __4: (usize, TypeId, usize),
    __5: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action143(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action250(input, ast, __temp0, __1, __2, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action259<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, Vec<()>, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, TypeId, usize),
    __4: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action144(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action250(input, ast, __temp0, __0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action260<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, DescriptionId, usize),
    __1: (usize, StringId, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, TypeId, usize),
    __4: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action143(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action251(input, ast, __temp0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action261<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, TypeId, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action144(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action251(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action262<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, DescriptionId, usize),
    __1: (usize, StringId, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, TypeId, usize),
    __4: (usize, ConstValueId, usize),
    __5: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action143(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action252(input, ast, __temp0, __1, __2, __3, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action263<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, TypeId, usize),
    __3: (usize, ConstValueId, usize),
    __4: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action144(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action252(input, ast, __temp0, __0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action264<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, DescriptionId, usize),
    __1: (usize, StringId, usize),
    __2: (usize, lexer::Token<'input>, usize),
    __3: (usize, TypeId, usize),
    __4: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action143(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action253(input, ast, __temp0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action265<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, TypeId, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action144(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action253(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action266<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> IdRange<DirectiveId> {
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action103(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action75(input, ast, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action267<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, alloc::vec::Vec<()>, usize),
) -> IdRange<DirectiveId> {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action104(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action75(input, ast, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action268<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, Vec<EnumValueDefinitionId>, usize),
) -> EnumDefinitionRecord {
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action121(input, ast, __3);
    let __temp0 = (__start0, __temp0, __end0);
    __action213(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action269<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
) -> EnumDefinitionRecord {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action122(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action213(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action270<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Option<Vec<StringId>>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Vec<()>, usize),
) -> InterfaceDefinitionRecord {
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action135(input, ast, __4);
    let __temp0 = (__start0, __temp0, __end0);
    __action218(input, ast, __0, __1, __2, __3, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action271<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Option<Vec<StringId>>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
) -> InterfaceDefinitionRecord {
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action136(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action218(input, ast, __0, __1, __2, __3, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action272<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Option<Vec<StringId>>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Vec<()>, usize),
) -> ObjectDefinitionRecord {
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action135(input, ast, __4);
    let __temp0 = (__start0, __temp0, __end0);
    __action219(input, ast, __0, __1, __2, __3, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action273<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Option<Vec<StringId>>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
) -> ObjectDefinitionRecord {
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action136(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action219(input, ast, __0, __1, __2, __3, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action274<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<StringId>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Vec<()>, usize),
) -> InterfaceDefinitionRecord {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action137(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action270(input, ast, __0, __1, __temp0, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action275<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, Vec<()>, usize),
) -> InterfaceDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action138(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action270(input, ast, __0, __1, __temp0, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action276<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<StringId>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
) -> InterfaceDefinitionRecord {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action137(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action271(input, ast, __0, __1, __temp0, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action277<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
) -> InterfaceDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action138(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action271(input, ast, __0, __1, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action278<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<StringId>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, Vec<()>, usize),
) -> ObjectDefinitionRecord {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action137(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action272(input, ast, __0, __1, __temp0, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action279<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, Vec<()>, usize),
) -> ObjectDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action138(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action272(input, ast, __0, __1, __temp0, __2, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action280<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<StringId>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
) -> ObjectDefinitionRecord {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action137(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action273(input, ast, __0, __1, __temp0, __3)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action281<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
) -> ObjectDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action138(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action273(input, ast, __0, __1, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action282<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, Vec<()>, usize),
) -> InputObjectDefinitionRecord {
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action117(input, ast, __3);
    let __temp0 = (__start0, __temp0, __end0);
    __action216(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action283<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
) -> InputObjectDefinitionRecord {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action118(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action216(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action284<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action105(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action242(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action285<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (
        usize,
        alloc::vec::Vec<(values::ids::StringId, Span, ValueId)>,
        usize,
    ),
    __2: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action106(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action242(input, ast, __0, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action286<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, Vec<()>, usize),
    __4: (usize, bool, usize),
    __5: (usize, lexer::Token<'input>, usize),
    __6: (usize, Vec<DirectiveLocation>, usize),
) -> DirectiveDefinitionRecord {
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action115(input, ast, __4);
    let __temp0 = (__start0, __temp0, __end0);
    __action248(input, ast, __0, __1, __2, __3, __temp0, __5, __6)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action287<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, Vec<()>, usize),
    __4: (usize, lexer::Token<'input>, usize),
    __5: (usize, Vec<DirectiveLocation>, usize),
) -> DirectiveDefinitionRecord {
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __temp0 = __action116(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action248(input, ast, __0, __1, __2, __3, __temp0, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action288<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, bool, usize),
    __4: (usize, lexer::Token<'input>, usize),
    __5: (usize, Vec<DirectiveLocation>, usize),
) -> DirectiveDefinitionRecord {
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action115(input, ast, __3);
    let __temp0 = (__start0, __temp0, __end0);
    __action249(input, ast, __0, __1, __2, __temp0, __4, __5)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action289<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
    __2: (usize, StringId, usize),
    __3: (usize, lexer::Token<'input>, usize),
    __4: (usize, Vec<DirectiveLocation>, usize),
) -> DirectiveDefinitionRecord {
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action116(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action249(input, ast, __0, __1, __2, __temp0, __3, __4)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action290<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
) -> IdRange<RootOperationTypeDefinitionId> {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action139(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action21(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action291<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (
        usize,
        alloc::vec::Vec<RootOperationTypeDefinitionRecord>,
        usize,
    ),
    __2: (usize, lexer::Token<'input>, usize),
) -> IdRange<RootOperationTypeDefinitionId> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action140(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action21(input, ast, __0, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action292<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
    __2: (usize, IdRange<RootOperationTypeDefinitionId>, usize),
) -> SchemaDefinitionRecord {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action141(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action226(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action293<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
) -> SchemaDefinitionRecord {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action142(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action226(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action294<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, Vec<UnionMemberId>, usize),
) -> UnionDefinitionRecord {
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action125(input, ast, __3);
    let __temp0 = (__start0, __temp0, __end0);
    __action229(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action295<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
) -> UnionDefinitionRecord {
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action126(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action229(input, ast, __0, __1, __2, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action296<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action107(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action241(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action297<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, alloc::vec::Vec<ValueRecord>, usize),
    __2: (usize, lexer::Token<'input>, usize),
) -> ValueRecord {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action108(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action241(input, ast, __0, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action298<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
) -> TypeId {
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action109(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action227(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action299<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, alloc::vec::Vec<WrappingType>, usize),
) -> TypeId {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action110(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action227(input, ast, __0, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action300<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, alloc::vec::Vec<lexer::Token<'input>>, usize),
    __1: (usize, StringId, usize),
) -> TypeId {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action109(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action228(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(
    clippy::too_many_arguments,
    clippy::needless_lifetimes,
    clippy::just_underscores_and_digits
)]
fn __action301<'input>(
    input: &'input str,
    ast: &mut TypeSystemAstWriter,
    __0: (usize, alloc::vec::Vec<lexer::Token<'input>>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, alloc::vec::Vec<WrappingType>, usize),
) -> TypeId {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action110(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action228(input, ast, __0, __1, __temp0)
}

#[allow(clippy::type_complexity, dead_code)]
pub trait __ToTriple<'input> {
    fn to_triple(
        self,
    ) -> Result<
        (usize, lexer::Token<'input>, usize),
        __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
    >;
}

impl<'input> __ToTriple<'input> for (usize, lexer::Token<'input>, usize) {
    fn to_triple(
        self,
    ) -> Result<
        (usize, lexer::Token<'input>, usize),
        __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
    > {
        Ok(self)
    }
}
impl<'input> __ToTriple<'input>
    for Result<(usize, lexer::Token<'input>, usize), crate::parser::AdditionalErrors>
{
    fn to_triple(
        self,
    ) -> Result<
        (usize, lexer::Token<'input>, usize),
        __lalrpop_util::ParseError<usize, lexer::Token<'input>, crate::parser::AdditionalErrors>,
    > {
        self.map_err(|error| __lalrpop_util::ParseError::User { error })
    }
}
