// auto-generated: "lalrpop 0.20.0"
// sha3: 81e950d387f69fd368e148c55edd198604391d0e16a0604e41f05159d8ee958a
use crate::lexer;
use crate::{
    common::{IdRange, OperationType},
    executable::{ids::*, storage::*, writer::AstWriter},
    Span,
};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate alloc;
extern crate core;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__ExecutableDocument {

    use crate::lexer;
    use crate::{
    Span,
    executable::{
        storage::*, ids::*, writer::AstWriter
    },
    common::{OperationType, IdRange}
};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(lexer::Token<'input>),
        Variant1(&'input str),
        Variant2(StringId),
        Variant3(core::option::Option<StringId>),
        Variant4(()),
        Variant5(alloc::vec::Vec<()>),
        Variant6(Vec<()>),
        Variant7(core::option::Option<Vec<()>>),
        Variant8(IdRange<DirectiveId>),
        Variant9(ExecutableDefinitionId),
        Variant10(alloc::vec::Vec<ExecutableDefinitionId>),
        Variant11(FragmentDefinitionRecord),
        Variant12((StringId, ValueId)),
        Variant13(alloc::vec::Vec<(StringId, ValueId)>),
        Variant14(OperationDefinitionRecord),
        Variant15(OperationType),
        Variant16(SelectionRecord),
        Variant17(alloc::vec::Vec<SelectionRecord>),
        Variant18(IdRange<SelectionId>),
        Variant19(ValueId),
        Variant20(alloc::vec::Vec<ValueId>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 43, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 43, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 4, 0, 0, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 3
        0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 0, 82, 83, 84, 85, 86, 87, 88, 89,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 7
        0, 0, 0, 16, 0, 0, 92, 0, 17, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 49, 0, 0, 94, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 71, -19, 0, 0, 0, 0, 0, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 21, 82, 83, 84, 85, 86, 87, 88, 89,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 16, 0, 0, 0, 0, 17, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, -20, 0, 0, 17, 0, 0, -20, -20, 0, -20, 0, 0, 0, -20, 0, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, -19, 0, 0, 17, 0, 0, -19, 0, 0, -19, 0, 0, 0, -19, 0, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 26
        0, 0, 0, 16, 0, -14, 0, 0, -14, 0, 0, -14, -14, 0, -14, 0, 0, 0, -14, 0, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 32, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 34, 0, 0, 113, 114, 115, 116, 117, 0, 0, 118, 0, 0, 119, 0, 0, 120, 0, 121, 0, 0, 122, 0, 123, 124, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 32
        0, 32, 0, 0, 0, 0, 0, 0, 0, 33, 127, 0, 34, 0, 0, 113, 114, 115, 116, 117, 0, 0, 118, 0, 0, 119, 0, 0, 120, 0, 121, 0, 0, 122, 0, 123, 124, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 130, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 34
        0, 32, 0, 0, 0, 0, 0, 0, 0, 33, 132, 0, 34, 0, 0, 113, 114, 115, 116, 117, 0, 0, 118, 0, 0, 119, 0, 0, 120, 0, 121, 0, 0, 122, 0, 123, 124, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 134, 0, 0, 0, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
        // State 36
        0, 32, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 34, 0, 0, 113, 114, 115, 116, 117, 0, 0, 118, 0, 0, 119, 0, 0, 120, 0, 121, 0, 0, 122, 0, 123, 124, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, -30, 0, 0, -30, 0, 0, 0, -30, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, -27, 0, 0, -27, 0, 0, 0, -27, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, 0, -26, 0, 0, -26, 0, 0, 0, -26, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, -66, 0, 0, -66, 0, 0, 0, -66, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, -68, 0, 0, 0, 0, 0, -68, 0, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68, -68,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, -67, 0, 0, 0, 0, 0, -67, 0, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, -69, 0, 0, 0, 0, 0, -69, 0, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69, -69,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, 0, 0, -31, 0, 0, 0, -31, 0, 0, 0,
        // State 46
        0, -56, 0, -56, -56, -56, -56, 0, -56, -56, -56, -56, -56, 0, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, -65, 0, 0, -65, 0, 0, 0, -65, 0, 0, 0,
        // State 48
        0, -48, 0, -48, -48, -48, -48, 0, -48, -48, -48, -48, -48, 0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48,
        // State 49
        0, -36, 0, -36, -36, -36, -36, 0, -36, -36, -36, -36, -36, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36,
        // State 50
        0, -52, 0, -52, -52, -52, -52, 0, -52, -52, -52, -52, -52, 0, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
        // State 51
        0, -51, 0, -51, -51, -51, -51, 0, -51, -51, -51, -51, -51, 0, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51,
        // State 52
        0, -44, 0, -44, -44, -44, -44, 0, -44, -44, -44, -44, -44, 0, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44,
        // State 53
        0, -55, 0, -55, -55, -55, -55, 0, -55, -55, -55, -55, -55, 0, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55, -55,
        // State 54
        0, -46, 0, -46, -46, -46, -46, 0, -46, -46, -46, -46, -46, 0, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46,
        // State 55
        0, -42, 0, -42, -42, -42, -42, 0, -42, -42, -42, -42, -42, 0, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42,
        // State 56
        0, -47, 0, -47, -47, -47, -47, 0, -47, -47, -47, -47, -47, 0, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47,
        // State 57
        0, -39, 0, -39, -39, -39, -39, 0, -39, -39, -39, -39, -39, 0, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39, -39,
        // State 58
        0, -45, 0, -45, -45, -45, -45, 0, -45, -45, -45, -45, -45, 0, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45,
        // State 59
        0, -54, 0, -54, -54, -54, -54, 0, -54, -54, -54, -54, -54, 0, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54, -54,
        // State 60
        0, -38, 0, -38, -38, -38, -38, 0, -38, -38, -38, -38, -38, 0, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38,
        // State 61
        0, -53, 0, -53, -53, -53, -53, 0, -53, -53, -53, -53, -53, 0, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53, -53,
        // State 62
        0, -50, 0, -50, -50, -50, -50, 0, -50, -50, -50, -50, -50, 0, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50,
        // State 63
        0, -37, 0, -37, -37, -37, -37, 0, -37, -37, -37, -37, -37, 0, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37,
        // State 64
        0, -40, 0, -40, -40, -40, -40, 0, -40, -40, -40, -40, -40, 0, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40,
        // State 65
        0, -43, 0, -43, -43, -43, -43, 0, -43, -43, -43, -43, -43, 0, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43,
        // State 66
        0, -41, 0, -41, -41, -41, -41, 0, -41, -41, -41, -41, -41, 0, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41,
        // State 67
        0, -49, 0, -49, -49, -49, -49, 0, -49, -49, -49, -49, -49, 0, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,
        // State 68
        0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, -96, 0, 0, -96, 0, 0, 0, -96, 0, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96, -96,
        // State 69
        0, 0, 0, 0, 0, -35, 0, 0, -35, 0, 0, -35, 0, 0, -35, 0, 0, 0, -35, 0, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35,
        // State 70
        0, 0, 0, 0, 0, -82, 0, 0, -82, 0, 0, -82, 0, 0, -82, 0, 0, 0, -82, 0, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82,
        // State 71
        0, 0, 0, 0, 0, -70, 0, 0, -70, 0, 0, -70, 0, 0, -70, 0, 0, 0, -70, 0, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70, -70,
        // State 72
        0, 0, 0, 0, 0, -86, 0, 0, -86, 0, 0, -86, 0, 0, -86, 0, 0, 0, -86, 0, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86, -86,
        // State 73
        0, 0, 0, 0, 0, -85, 0, 0, -85, 0, 0, -85, 0, 0, -85, 0, 0, 0, -85, 0, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85, -85,
        // State 74
        0, 0, 0, 0, 0, -78, 0, 0, -78, 0, 0, -78, 0, 0, -78, 0, 0, 0, -78, 0, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
        // State 75
        0, 0, 0, 0, 0, -88, 0, 0, -88, 0, 0, -88, 0, 0, -88, 0, 0, 0, -88, 0, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88, -88,
        // State 76
        0, 0, 0, 0, 0, -80, 0, 0, -80, 0, 0, -80, 0, 0, -80, 0, 0, 0, -80, 0, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80,
        // State 77
        0, 0, 0, 0, 0, -76, 0, 0, -76, 0, 0, -76, 0, 0, -76, 0, 0, 0, -76, 0, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76,
        // State 78
        0, 0, 0, 0, 0, -81, 0, 0, -81, 0, 0, -81, 0, 0, -81, 0, 0, 0, -81, 0, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81, -81,
        // State 79
        0, 0, 0, 0, 0, -73, 0, 0, -73, 0, 0, -73, 0, 0, -73, 0, 0, 0, -73, 0, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
        // State 80
        0, 0, 0, 0, 0, -79, 0, 0, -79, 0, 0, -79, 0, 0, -79, 0, 0, 0, -79, 0, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79,
        // State 81
        0, 0, 0, 0, 0, -72, 0, 0, -72, 0, 0, -72, 0, 0, -72, 0, 0, 0, -72, 0, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72, -72,
        // State 82
        0, 0, 0, 0, 0, -87, 0, 0, -87, 0, 0, -87, 0, 0, -87, 0, 0, 0, -87, 0, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87, -87,
        // State 83
        0, 0, 0, 0, 0, -84, 0, 0, -84, 0, 0, -84, 0, 0, -84, 0, 0, 0, -84, 0, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84, -84,
        // State 84
        0, 0, 0, 0, 0, -71, 0, 0, -71, 0, 0, -71, 0, 0, -71, 0, 0, 0, -71, 0, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71, -71,
        // State 85
        0, 0, 0, 0, 0, -74, 0, 0, -74, 0, 0, -74, 0, 0, -74, 0, 0, 0, -74, 0, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74, -74,
        // State 86
        0, 0, 0, 0, 0, -77, 0, 0, -77, 0, 0, -77, 0, 0, -77, 0, 0, 0, -77, 0, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77,
        // State 87
        0, 0, 0, 0, 0, -75, 0, 0, -75, 0, 0, -75, 0, 0, -75, 0, 0, 0, -75, 0, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
        // State 88
        0, 0, 0, 0, 0, -83, 0, 0, -83, 0, 0, -83, 0, 0, -83, 0, 0, 0, -83, 0, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83, -83,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, -64, 0, 0, -64, 0, 0, 0, -64, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, -17, 0, 0, -17, 0, 0, -17, -17, 0, -17, 0, 0, 0, -17, 0, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        // State 92
        0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, -97, 0, 0, -97, 0, 0, 0, -97, 0, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97, -97,
        // State 93
        0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, -98, -98, 0, -98, 0, 0, 0, -98, 0, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98, -98,
        // State 94
        0, 0, 0, 0, 0, -18, 0, 0, -18, 0, 0, -18, -18, 0, -18, 0, 0, 0, -18, 0, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
        // State 95
        0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, -92, 0, 0, -92, 0, 0, 0, -92, 0, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92, -92,
        // State 96
        0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, -7, 0, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
        // State 97
        0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, -9, 0, 0, -9, 0, 0, -9, -9, 0, -9, 0, 0, 0, -9, 0, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
        // State 99
        0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, -95, 0, 0, -95, 0, 0, 0, -95, 0, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95, -95,
        // State 100
        0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, -93, 0, 0, -93, 0, 0, 0, -93, 0, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93, -93,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, -90, 0, 0, -90, 0, 0, 0, -90, 0, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90,
        // State 103
        0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, -91, 0, 0, -91, 0, 0, 0, -91, 0, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91,
        // State 104
        0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, -8, 0, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
        // State 105
        0, 0, 0, 0, 0, -10, 0, 0, -10, 0, 0, -10, -10, 0, -10, 0, 0, 0, -10, 0, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
        // State 106
        0, 0, 0, 0, 0, -13, 0, 0, -13, 0, 0, -13, -13, 0, -13, 0, 0, 0, -13, 0, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
        // State 107
        0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, -94, 0, 0, -94, 0, 0, 0, -94, 0, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94, -94,
        // State 108
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, -34, 0, 0, -34, 0, 0, 0, -34, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, -89, 0, 0, -89, 0, 0, 0, -89, 0, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89, -89,
        // State 110
        0, -116, 0, 0, -116, 0, 0, 0, 0, -116, -116, -116, -116, 0, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
        // State 111
        0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, -4, 0, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,
        // State 112
        0, -108, 0, 0, -108, 0, 0, 0, 0, -108, -108, -108, -108, 0, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
        // State 113
        0, -106, 0, 0, -106, 0, 0, 0, 0, -106, -106, -106, -106, 0, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
        // State 114
        0, -105, 0, 0, -105, 0, 0, 0, 0, -105, -105, -105, -105, 0, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105, -105,
        // State 115
        0, -21, 0, 0, -21, 0, 0, 0, 0, -21, -21, -21, -21, 0, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
        // State 116
        0, -107, 0, 0, -107, 0, 0, 0, 0, -107, -107, -107, -107, 0, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
        // State 117
        0, -110, 0, 0, -110, 0, 0, 0, 0, -110, -110, -110, -110, 0, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
        // State 118
        0, -25, 0, 0, -25, 0, 0, 0, 0, -25, -25, -25, -25, 0, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25,
        // State 119
        0, -111, 0, 0, -111, 0, 0, 0, 0, -111, -111, -111, -111, 0, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
        // State 120
        0, -23, 0, 0, -23, 0, 0, 0, 0, -23, -23, -23, -23, 0, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23, -23,
        // State 121
        0, -22, 0, 0, -22, 0, 0, 0, 0, -22, -22, -22, -22, 0, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
        // State 122
        0, -109, 0, 0, -109, 0, 0, 0, 0, -109, -109, -109, -109, 0, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
        // State 123
        0, -24, 0, 0, -24, 0, 0, 0, 0, -24, -24, -24, -24, 0, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24,
        // State 124
        0, -104, 0, 0, -104, 0, 0, 0, 0, -104, -104, -104, -104, 0, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
        // State 125
        0, -119, 0, 0, 0, 0, 0, 0, 0, -119, -119, 0, -119, 0, 0, -119, -119, -119, -119, -119, 0, 0, -119, 0, 0, -119, 0, 0, -119, 0, -119, 0, 0, -119, 0, -119, -119, 0,
        // State 126
        0, -112, 0, 0, -112, 0, 0, 0, 0, -112, -112, -112, -112, 0, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112, -112,
        // State 127
        0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, -62, 0, 0, 0, -62, 0, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
        // State 129
        0, -114, 0, 0, -114, 0, 0, 0, 0, -114, -114, -114, -114, 0, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
        // State 130
        0, -120, 0, 0, 0, 0, 0, 0, 0, -120, -120, 0, -120, 0, 0, -120, -120, -120, -120, -120, 0, 0, -120, 0, 0, -120, 0, 0, -120, 0, -120, 0, 0, -120, 0, -120, -120, 0,
        // State 131
        0, -113, 0, 0, -113, 0, 0, 0, 0, -113, -113, -113, -113, 0, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113, -113,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, -63, 0, 0, 0, -63, 0, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
        // State 133
        0, -115, 0, 0, -115, 0, 0, 0, 0, -115, -115, -115, -115, 0, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, -59, 0, 0, 0, -59, 0, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59, -59,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 38 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -32,
        // State 1
        -33,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        -30,
        // State 38
        -121,
        // State 39
        -27,
        // State 40
        -26,
        // State 41
        -66,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        -31,
        // State 46
        0,
        // State 47
        -65,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        -64,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        -98,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        -34,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            0 => 6,
            2 => match state {
                25 => 104,
                _ => 96,
            },
            4 => 25,
            5 => match state {
                11 => 22,
                26 => 106,
                _ => 12,
            },
            7 => match state {
                13 => 94,
                _ => 90,
            },
            9 => 13,
            10 => match state {
                9 => 17,
                11 => 23,
                12 => 24,
                19 => 27,
                21 => 28,
                22 => 29,
                18 => 100,
                _ => 14,
            },
            11 => 110,
            12 => match state {
                1 => 45,
                _ => 37,
            },
            14 => 1,
            15 => 38,
            16 => 39,
            17 => match state {
                9 => 18,
                _ => 10,
            },
            18 => 46,
            19 => match state {
                2 => 5,
                6 => 11,
                16 => 26,
                15 | 25 => 97,
                20 => 101,
                31 => 124,
                33 | 35 => 127,
                _ => 7,
            },
            21 => match state {
                35 => 132,
                _ => 128,
            },
            23 => 35,
            24 => 40,
            25 => 2,
            26 => 69,
            27 => match state {
                8 => 92,
                _ => 68,
            },
            28 => 8,
            29 => match state {
                2 => 47,
                5 => 89,
                14 => 95,
                17 => 99,
                23 => 102,
                24 => 103,
                27 => 107,
                28 => 108,
                29 => 109,
                _ => 41,
            },
            31 => match state {
                10 => 21,
                _ => 19,
            },
            33 => match state {
                32 => 125,
                34 => 130,
                36 => 134,
                _ => 111,
            },
            35 => 34,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###""!""###,
        r###""$""###,
        r###""&""###,
        r###""(""###,
        r###"")""###,
        r###""...""###,
        r###"":""###,
        r###""=""###,
        r###""@""###,
        r###""[""###,
        r###""]""###,
        r###""enum""###,
        r###""{""###,
        r###""|""###,
        r###""}""###,
        r###"BlockStringLiteral"###,
        r###"FloatLiteral"###,
        r###"IntegerLiteral"###,
        r###"RawIdent"###,
        r###"StringLiteral"###,
        r###"directive"###,
        r###"extend"###,
        r###"false"###,
        r###"fragment"###,
        r###"implements"###,
        r###"input"###,
        r###"interface"###,
        r###"mutation"###,
        r###"null"###,
        r###"on"###,
        r###"query"###,
        r###"repeatable"###,
        r###"scalar"###,
        r###"schema"###,
        r###"subscription"###,
        r###"true"###,
        r###"ty"###,
        r###"union"###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        '__1,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, '__1>
    where
    {
        input: &'input str,
        ast: &'__1 mut AstWriter,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1> __state_machine::ParserDefinition for __StateMachine<'input, '__1>
    where
    {
        type Location = usize;
        type Error = lexer::LexicalError;
        type Token = lexer::Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = ();
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 38 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.ast,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&())>)
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &lexer::Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            lexer::Token::Exclamation if true => Some(0),
            lexer::Token::Dollar if true => Some(1),
            lexer::Token::Ampersand if true => Some(2),
            lexer::Token::OpenParen if true => Some(3),
            lexer::Token::CloseParen if true => Some(4),
            lexer::Token::Spread if true => Some(5),
            lexer::Token::Colon if true => Some(6),
            lexer::Token::Equals if true => Some(7),
            lexer::Token::At if true => Some(8),
            lexer::Token::OpenBracket if true => Some(9),
            lexer::Token::CloseBracket if true => Some(10),
            lexer::Token::Enum if true => Some(11),
            lexer::Token::OpenBrace if true => Some(12),
            lexer::Token::Pipe if true => Some(13),
            lexer::Token::CloseBrace if true => Some(14),
            lexer::Token::BlockStringLiteral(_) if true => Some(15),
            lexer::Token::FloatLiteral(_) if true => Some(16),
            lexer::Token::IntegerLiteral(_) if true => Some(17),
            lexer::Token::Identifier(_) if true => Some(18),
            lexer::Token::StringLiteral(_) if true => Some(19),
            lexer::Token::Directive if true => Some(20),
            lexer::Token::Extend if true => Some(21),
            lexer::Token::False if true => Some(22),
            lexer::Token::Fragment if true => Some(23),
            lexer::Token::Implements if true => Some(24),
            lexer::Token::Input if true => Some(25),
            lexer::Token::Interface if true => Some(26),
            lexer::Token::Mutation if true => Some(27),
            lexer::Token::Null if true => Some(28),
            lexer::Token::On if true => Some(29),
            lexer::Token::Query if true => Some(30),
            lexer::Token::Repeatable if true => Some(31),
            lexer::Token::Scalar if true => Some(32),
            lexer::Token::Schema if true => Some(33),
            lexer::Token::Subscription if true => Some(34),
            lexer::Token::True if true => Some(35),
            lexer::Token::Type if true => Some(36),
            lexer::Token::Union if true => Some(37),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: lexer::Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 => __Symbol::Variant0(__token),
            15 | 16 | 17 | 18 | 19 => match __token {
                lexer::Token::BlockStringLiteral(__tok0) | lexer::Token::FloatLiteral(__tok0) | lexer::Token::IntegerLiteral(__tok0) | lexer::Token::Identifier(__tok0) | lexer::Token::StringLiteral(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        '__1,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, '__1>>
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 3,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 12,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 12,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 13,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 14,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 20,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 21,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 22,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 24,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 27,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 27,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 27,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 27,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 27,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 27,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 27,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 28,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 29,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 31,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 32,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 33,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 33,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 33,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 33,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 33,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 34,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 35,
                }
            }
            120 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct ExecutableDocumentParser {
        _priv: (),
    }

    impl ExecutableDocumentParser {
        pub fn new() -> ExecutableDocumentParser {
            ExecutableDocumentParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            __TOKEN: __ToTriple<'input, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'input str,
            ast: &mut AstWriter,
            __tokens0: __TOKENS,
        ) -> Result<(), __lalrpop_util::ParseError<usize, lexer::Token<'input>, lexer::LexicalError>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    ast,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        '__1,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> bool
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<(),__lalrpop_util::ParseError<usize, lexer::Token<'input>, lexer::LexicalError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                __reduce17(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            18 => {
                __reduce18(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                __reduce106(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            107 => {
                __reduce107(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            108 => {
                __reduce108(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            109 => {
                __reduce109(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                __reduce110(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            111 => {
                __reduce111(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                __reduce113(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            114 => {
                __reduce114(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            115 => {
                __reduce115(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            116 => {
                __reduce116(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                __reduce117(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            118 => {
                __reduce118(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(input, ast, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                // __ExecutableDocument = ExecutableDocument => ActionFn(0);
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<>(input, ast, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (StringId, ValueId), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ExecutableDefinitionId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, FragmentDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IdRange<DirectiveId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, IdRange<SelectionId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, OperationDefinitionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, OperationType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, SelectionRecord, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, StringId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ValueId, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<()>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<()>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<(StringId, ValueId)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<ExecutableDefinitionId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<SelectionRecord>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<ValueId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<StringId>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Vec<()>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, lexer::Token<'input>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Alias = Name, ":" => ActionFn(14);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action14::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Alias? = Alias => ActionFn(92);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action92::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Alias? =  => ActionFn(93);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action93::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument = Name, ":", Value => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument* = Argument+ => ActionFn(85);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action85::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument+ = Argument => ActionFn(104);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Argument+ = Argument+, Argument => ActionFn(105);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action105::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arguments = "(", ")" => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action112::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arguments = "(", Argument+, ")" => ActionFn(113);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action113::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 5)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arguments? = Arguments => ActionFn(90);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action90::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Arguments? =  => ActionFn(91);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action91::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive = "@", Name, Arguments => ActionFn(114);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action114::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive = "@", Name => ActionFn(115);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action115::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 8)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive* = Directive+ => ActionFn(87);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action87::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive+ = Directive => ActionFn(102);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action102::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directive+ = Directive+, Directive => ActionFn(103);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action103::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directives =  => ActionFn(120);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action120::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Directives = Directive+ => ActionFn(121);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action121::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = RawIdent => ActionFn(34);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = schema => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = query => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = ty => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // EnumValue = input => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExecutableDefinition = OperationDefinition => ActionFn(2);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExecutableDefinition = FragmentDefinition => ActionFn(3);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExecutableDefinition* =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action98::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExecutableDefinition* = ExecutableDefinition+ => ActionFn(99);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action99::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExecutableDefinition+ = ExecutableDefinition => ActionFn(100);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action100::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExecutableDefinition+ = ExecutableDefinition+, ExecutableDefinition => ActionFn(101);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action101::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExecutableDocument =  => ActionFn(122);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action122::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ExecutableDocument = ExecutableDefinition+ => ActionFn(123);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action123::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FragmentDefinition = fragment, FragmentName, TypeCondition, Directives, SelectionSet => ActionFn(6);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action6::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (5, 16)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FragmentName = RawFragmentName => ActionFn(40);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = RawIdent => ActionFn(60);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = schema => ActionFn(61);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action61::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = query => ActionFn(62);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action62::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = mutation => ActionFn(63);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action63::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = subscription => ActionFn(64);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action64::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = ty => ActionFn(65);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action65::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = input => ActionFn(66);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action66::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = true => ActionFn(67);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = false => ActionFn(68);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = null => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = implements => ActionFn(70);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action70::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = interface => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action71::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = "enum" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action72::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = union => ActionFn(73);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action73::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = scalar => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = extend => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action75::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = directive => ActionFn(76);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action76::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = repeatable => ActionFn(77);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action77::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = on => ActionFn(78);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action78::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Ident = fragment => ActionFn(79);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action79::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Name = Ident => ActionFn(39);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Name? = Name => ActionFn(96);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action96::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Name? =  => ActionFn(97);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action97::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField = Name, ":", Value => ActionFn(31);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action31::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 22)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField* = ObjectField+ => ActionFn(81);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action81::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField+ = ObjectField => ActionFn(108);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action108::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ObjectField+ = ObjectField+, ObjectField => ActionFn(109);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action109::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OperationDefinition = OperationType, Name, SelectionSet => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action124::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 24)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OperationDefinition = OperationType, SelectionSet => ActionFn(125);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action125::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OperationDefinition = SelectionSet => ActionFn(5);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OperationType = query => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OperationType = mutation => ActionFn(8);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OperationType = subscription => ActionFn(9);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = RawIdent => ActionFn(41);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action41::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = schema => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = query => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = mutation => ActionFn(44);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action44::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = subscription => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = ty => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = input => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action47::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = true => ActionFn(48);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = false => ActionFn(49);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action49::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = null => ActionFn(50);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = implements => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = interface => ActionFn(52);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action52::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = "enum" => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = union => ActionFn(54);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action54::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = scalar => ActionFn(55);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = extend => ActionFn(56);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action56::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = directive => ActionFn(57);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = repeatable => ActionFn(58);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action58::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawFragmentName = fragment => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action59::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection = Alias, Name, Arguments, Directives, SelectionSet => ActionFn(116);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant8(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action116::<>(input, ast, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (5, 27)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection = Alias, Name, Directives, SelectionSet => ActionFn(117);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action117::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (4, 27)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection = Name, Arguments, Directives, SelectionSet => ActionFn(118);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action118::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (4, 27)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection = Name, Directives, SelectionSet => ActionFn(119);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action119::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 27)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection = "...", FragmentName, Directives => ActionFn(12);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action12::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 27)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection = "...", TypeCondition, Directives, SelectionSet => ActionFn(128);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action128::<>(input, ast, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (4, 27)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection = "...", Directives, SelectionSet => ActionFn(129);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action129::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 27)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection+ = Selection => ActionFn(94);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action94::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Selection+ = Selection+, Selection => ActionFn(95);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action95::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SelectionSet = "{", Selection+, "}" => ActionFn(10);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action10::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringValue = StringLiteral => ActionFn(32);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // StringValue = BlockStringLiteral => ActionFn(33);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeCondition = on, Name => ActionFn(15);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action15::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeCondition? = TypeCondition => ActionFn(88);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action88::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // TypeCondition? =  => ActionFn(89);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action89::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = "$", Name => ActionFn(20);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action20::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 33)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = IntegerLiteral => ActionFn(21);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action21::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce105<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = FloatLiteral => ActionFn(22);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action22::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce106<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = StringLiteral => ActionFn(23);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action23::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce107<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = BlockStringLiteral => ActionFn(24);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action24::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce108<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = true => ActionFn(25);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce109<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = false => ActionFn(26);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce110<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = null => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce111<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = "[", "]" => ActionFn(130);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action130::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 33)
    }
    pub(crate) fn __reduce112<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = "[", Value+, "]" => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action131::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce113<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = "{", "}" => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action126::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 33)
    }
    pub(crate) fn __reduce114<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = "{", ObjectField+, "}" => ActionFn(127);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action127::<>(input, ast, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce115<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value = EnumValue => ActionFn(30);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce116<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(input, ast, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce117<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value* = Value+ => ActionFn(83);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action83::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce118<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value+ = Value => ActionFn(106);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action106::<>(input, ast, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce119<
        'input,
    >(
        input: &'input str,
        ast: &mut AstWriter,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Value+ = Value+, Value => ActionFn(107);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action107::<>(input, ast, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 35)
    }
}
pub use self::__parse__ExecutableDocument::ExecutableDocumentParser;

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action0<'input>(input: &'input str, ast: &mut AstWriter, (_, __0, _): (usize, (), usize)) {}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action1<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, defs, _): (usize, alloc::vec::Vec<ExecutableDefinitionId>, usize),
) {
    {}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action2<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, def, _): (usize, OperationDefinitionRecord, usize),
) -> ExecutableDefinitionId {
    ast.operation_definition(def)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action3<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, def, _): (usize, FragmentDefinitionRecord, usize),
) -> ExecutableDefinitionId {
    ast.fragment_definition(def)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action4<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, operation_type, _): (usize, OperationType, usize),
    (_, name, _): (usize, core::option::Option<StringId>, usize),
    (_, selection_set, _): (usize, IdRange<SelectionId>, usize),
) -> OperationDefinitionRecord {
    {
        OperationDefinitionRecord {
            operation_type,
            name,
            selection_set,
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action5<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, selection_set, _): (usize, IdRange<SelectionId>, usize),
) -> OperationDefinitionRecord {
    {
        OperationDefinitionRecord {
            operation_type: OperationType::Query,
            name: None,
            selection_set,
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action6<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
    (_, type_condition, _): (usize, StringId, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, selection_set, _): (usize, IdRange<SelectionId>, usize),
) -> FragmentDefinitionRecord {
    {
        FragmentDefinitionRecord {
            name,
            type_condition,
            directives,
            selection_set,
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action7<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> OperationType {
    OperationType::Query
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action8<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> OperationType {
    OperationType::Mutation
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action9<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> OperationType {
    OperationType::Subscription
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action10<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, selections, _): (usize, alloc::vec::Vec<SelectionRecord>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> IdRange<SelectionId> {
    {
        ast.selection_set(selections)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action11<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, alias, _): (usize, core::option::Option<StringId>, usize),
    (_, name, _): (usize, StringId, usize),
    (_, arguments, _): (usize, core::option::Option<Vec<()>>, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, selection_set, _): (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    {
        let arguments = ast.argument_range(arguments.map(|args| args.len()));
        SelectionRecord::Field(ast.field_selection(FieldSelectionRecord {
            alias,
            name,
            arguments,
            directives,
            selection_set,
        }))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action12<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
) -> SelectionRecord {
    {
        SelectionRecord::FragmentSpread(
            ast.fragment_spread(FragmentSpreadRecord { name, directives }),
        )
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action13<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, type_condition, _): (usize, core::option::Option<StringId>, usize),
    (_, directives, _): (usize, IdRange<DirectiveId>, usize),
    (_, selection_set, _): (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    {
        SelectionRecord::InlineFragment(ast.inline_fragment(InlineFragmentRecord {
            type_condition,
            directives,
            selection_set,
        }))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action14<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, alias, _): (usize, StringId, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    {
        alias
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action15<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
) -> StringId {
    {
        name
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action16<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, directives, _): (usize, alloc::vec::Vec<()>, usize),
) -> IdRange<DirectiveId> {
    {
        ast.directive_range(Some(directives.len()))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action17<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
    (_, arguments, _): (usize, core::option::Option<Vec<()>>, usize),
) {
    {
        let arguments = ast.argument_range(arguments.map(|args| args.len()));
        ast.directive(DirectiveRecord { name, arguments });
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action18<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, arguments, _): (usize, alloc::vec::Vec<()>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> Vec<()> {
    arguments
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action19<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, name, _): (usize, StringId, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, value, _): (usize, ValueId, usize),
) {
    {
        ast.argument(ArgumentRecord { name, value });
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action20<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, name, _): (usize, StringId, usize),
) -> ValueId {
    ast.value(ValueRecord::Variable(name))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action21<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, int, _): (usize, &'input str, usize),
) -> ValueId {
    ast.value(ValueRecord::Int(int.parse().unwrap()))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action22<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, float, _): (usize, &'input str, usize),
) -> ValueId {
    ast.value(ValueRecord::Float(float.parse().unwrap()))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action23<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> ValueId {
    {
        let id = ast.intern_string(s);
        ast.value(ValueRecord::String(id))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action24<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> ValueId {
    {
        let id = ast.intern_string(s);
        ast.value(ValueRecord::String(id))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action25<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> ValueId {
    ast.value(ValueRecord::Boolean(true))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action26<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> ValueId {
    ast.value(ValueRecord::Boolean(false))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action27<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> ValueId {
    ast.value(ValueRecord::Null)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action28<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, values, _): (usize, alloc::vec::Vec<ValueId>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> ValueId {
    ast.value(ValueRecord::List(values))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action29<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, fields, _): (usize, alloc::vec::Vec<(StringId, ValueId)>, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
) -> ValueId {
    ast.value(ValueRecord::Object(fields))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action30<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, value, _): (usize, StringId, usize),
) -> ValueId {
    ast.value(ValueRecord::Enum(value))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action31<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, name, _): (usize, StringId, usize),
    (_, _, _): (usize, lexer::Token<'input>, usize),
    (_, value, _): (usize, ValueId, usize),
) -> (StringId, ValueId) {
    (name, value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action32<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringId {
    {
        ast.intern_string(s)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action33<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringId {
    {
        ast.intern_string(s)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action34<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringId {
    ast.ident(s)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action35<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    ast.ident("schema")
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action36<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    ast.ident("query")
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action37<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    ast.ident("type")
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action38<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> StringId {
    ast.ident("input")
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action39<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringId {
    ast.ident(s)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action40<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> StringId {
    ast.ident(s)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action41<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> &'input str {
    s
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action42<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "schema"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action43<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "query"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action44<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "mutation"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action45<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "subscription"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action46<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "type"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action47<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "input"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action48<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "true"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action49<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "false"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action50<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "null"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action51<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "implements"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action52<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "interface"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action53<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "enum"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action54<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "union"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action55<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "scalar"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action56<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "extend"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action57<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "directive"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action58<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "repeatable"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action59<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "fragment"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action60<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, s, _): (usize, &'input str, usize),
) -> &'input str {
    s
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action61<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "schema"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action62<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "query"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action63<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "mutation"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action64<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "subscription"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action65<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "type"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action66<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "input"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action67<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "true"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action68<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "false"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action69<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "null"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action70<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "implements"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action71<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "interface"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action72<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "enum"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action73<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "union"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action74<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "scalar"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action75<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "extend"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action76<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "directive"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action77<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "repeatable"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action78<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "on"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action79<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, lexer::Token<'input>, usize),
) -> &'input str {
    "fragment"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action80<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<(StringId, ValueId)> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action81<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<(StringId, ValueId)>, usize),
) -> alloc::vec::Vec<(StringId, ValueId)> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action82<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<ValueId> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action83<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<ValueId>, usize),
) -> alloc::vec::Vec<ValueId> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action84<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<()> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action85<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
) -> alloc::vec::Vec<()> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action86<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<()> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action87<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
) -> alloc::vec::Vec<()> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action88<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, StringId, usize),
) -> core::option::Option<StringId> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action89<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<StringId> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action90<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, Vec<()>, usize),
) -> core::option::Option<Vec<()>> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action91<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Vec<()>> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action92<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, StringId, usize),
) -> core::option::Option<StringId> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action93<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<StringId> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action94<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, SelectionRecord, usize),
) -> alloc::vec::Vec<SelectionRecord> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action95<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<SelectionRecord>, usize),
    (_, e, _): (usize, SelectionRecord, usize),
) -> alloc::vec::Vec<SelectionRecord> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action96<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, StringId, usize),
) -> core::option::Option<StringId> {
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action97<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<StringId> {
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action98<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<ExecutableDefinitionId> {
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action99<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<ExecutableDefinitionId>, usize),
) -> alloc::vec::Vec<ExecutableDefinitionId> {
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action100<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, ExecutableDefinitionId, usize),
) -> alloc::vec::Vec<ExecutableDefinitionId> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action101<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<ExecutableDefinitionId>, usize),
    (_, e, _): (usize, ExecutableDefinitionId, usize),
) -> alloc::vec::Vec<ExecutableDefinitionId> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action102<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action103<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
    (_, e, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action104<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action105<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<()>, usize),
    (_, e, _): (usize, (), usize),
) -> alloc::vec::Vec<()> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action106<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, ValueId, usize),
) -> alloc::vec::Vec<ValueId> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action107<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<ValueId>, usize),
    (_, e, _): (usize, ValueId, usize),
) -> alloc::vec::Vec<ValueId> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action108<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, __0, _): (usize, (StringId, ValueId), usize),
) -> alloc::vec::Vec<(StringId, ValueId)> {
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action109<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    (_, v, _): (usize, alloc::vec::Vec<(StringId, ValueId)>, usize),
    (_, e, _): (usize, (StringId, ValueId), usize),
) -> alloc::vec::Vec<(StringId, ValueId)> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action110<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, StringId, usize),
    __2: (usize, core::option::Option<Vec<()>>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action92(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action11(input, ast, __temp0, __1, __2, __3, __4)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action111<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, core::option::Option<Vec<()>>, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action93(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action11(input, ast, __temp0, __0, __1, __2, __3)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action112<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
) -> Vec<()> {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action84(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action18(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action113<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, alloc::vec::Vec<()>, usize),
    __2: (usize, lexer::Token<'input>, usize),
) -> Vec<()> {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action85(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action18(input, ast, __0, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action114<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<()>, usize),
) {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action90(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action17(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action115<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
) {
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action91(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action17(input, ast, __0, __1, __temp0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action116<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, StringId, usize),
    __2: (usize, Vec<()>, usize),
    __3: (usize, IdRange<DirectiveId>, usize),
    __4: (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action90(input, ast, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action110(input, ast, __0, __1, __temp0, __3, __4)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action117<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action91(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action110(input, ast, __0, __1, __temp0, __2, __3)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action118<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, Vec<()>, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action90(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action111(input, ast, __0, __temp0, __2, __3)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action119<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, StringId, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
    __2: (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action91(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action111(input, ast, __0, __temp0, __1, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action120<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> IdRange<DirectiveId> {
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action86(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action16(input, ast, __temp0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action121<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, alloc::vec::Vec<()>, usize),
) -> IdRange<DirectiveId> {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action87(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action16(input, ast, __temp0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action122<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __lookbehind: &usize,
    __lookahead: &usize,
) {
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action98(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action1(input, ast, __temp0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action123<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, alloc::vec::Vec<ExecutableDefinitionId>, usize),
) {
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action99(input, ast, __0);
    let __temp0 = (__start0, __temp0, __end0);
    __action1(input, ast, __temp0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action124<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, OperationType, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<SelectionId>, usize),
) -> OperationDefinitionRecord {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action96(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action4(input, ast, __0, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action125<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, OperationType, usize),
    __1: (usize, IdRange<SelectionId>, usize),
) -> OperationDefinitionRecord {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action97(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action4(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action126<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
) -> ValueId {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action80(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action29(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action127<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, alloc::vec::Vec<(StringId, ValueId)>, usize),
    __2: (usize, lexer::Token<'input>, usize),
) -> ValueId {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action81(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action29(input, ast, __0, __temp0, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action128<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, StringId, usize),
    __2: (usize, IdRange<DirectiveId>, usize),
    __3: (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action88(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action13(input, ast, __0, __temp0, __2, __3)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action129<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, IdRange<DirectiveId>, usize),
    __2: (usize, IdRange<SelectionId>, usize),
) -> SelectionRecord {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action89(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action13(input, ast, __0, __temp0, __1, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action130<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, lexer::Token<'input>, usize),
) -> ValueId {
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action82(input, ast, &__start0, &__end0);
    let __temp0 = (__start0, __temp0, __end0);
    __action28(input, ast, __0, __temp0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action131<'input>(
    input: &'input str,
    ast: &mut AstWriter,
    __0: (usize, lexer::Token<'input>, usize),
    __1: (usize, alloc::vec::Vec<ValueId>, usize),
    __2: (usize, lexer::Token<'input>, usize),
) -> ValueId {
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action83(input, ast, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action28(input, ast, __0, __temp0, __2)
}
#[allow(clippy::type_complexity)]

pub trait __ToTriple<'input> {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, lexer::Token<'input>, usize),
        __lalrpop_util::ParseError<usize, lexer::Token<'input>, lexer::LexicalError>,
    >;
}

impl<'input> __ToTriple<'input> for (usize, lexer::Token<'input>, usize) {
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, lexer::Token<'input>, usize),
        __lalrpop_util::ParseError<usize, lexer::Token<'input>, lexer::LexicalError>,
    > {
        Ok(value)
    }
}
impl<'input> __ToTriple<'input>
    for Result<(usize, lexer::Token<'input>, usize), lexer::LexicalError>
{
    fn to_triple(
        value: Self,
    ) -> Result<
        (usize, lexer::Token<'input>, usize),
        __lalrpop_util::ParseError<usize, lexer::Token<'input>, lexer::LexicalError>,
    > {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
