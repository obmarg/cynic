type City {
  id: ID!
  name: String!
  slug: String!
  country: Country!
  type: String!
  jobs(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Job!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  country: CountryWhereInput
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  jobs_every: JobWhereInput
  jobs_some: JobWhereInput
  jobs_none: JobWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
}

type Commitment {
  id: ID!
  title: String!
  slug: String!
  jobs(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Job!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommitmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  jobs_every: JobWhereInput
  jobs_some: JobWhereInput
  jobs_none: JobWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommitmentWhereInput!]
  OR: [CommitmentWhereInput!]
  NOT: [CommitmentWhereInput!]
}

type Company {
  id: ID!
  name: String!
  slug: String!
  websiteUrl: String!
  logoUrl: String
  jobs(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Job!]
  twitter: String
  emailed: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  websiteUrl: String
  websiteUrl_not: String
  websiteUrl_in: [String!]
  websiteUrl_not_in: [String!]
  websiteUrl_lt: String
  websiteUrl_lte: String
  websiteUrl_gt: String
  websiteUrl_gte: String
  websiteUrl_contains: String
  websiteUrl_not_contains: String
  websiteUrl_starts_with: String
  websiteUrl_not_starts_with: String
  websiteUrl_ends_with: String
  websiteUrl_not_ends_with: String
  logoUrl: String
  logoUrl_not: String
  logoUrl_in: [String!]
  logoUrl_not_in: [String!]
  logoUrl_lt: String
  logoUrl_lte: String
  logoUrl_gt: String
  logoUrl_gte: String
  logoUrl_contains: String
  logoUrl_not_contains: String
  logoUrl_starts_with: String
  logoUrl_not_starts_with: String
  logoUrl_ends_with: String
  logoUrl_not_ends_with: String
  jobs_every: JobWhereInput
  jobs_some: JobWhereInput
  jobs_none: JobWhereInput
  twitter: String
  twitter_not: String
  twitter_in: [String!]
  twitter_not_in: [String!]
  twitter_lt: String
  twitter_lte: String
  twitter_gt: String
  twitter_gte: String
  twitter_contains: String
  twitter_not_contains: String
  twitter_starts_with: String
  twitter_not_starts_with: String
  twitter_ends_with: String
  twitter_not_ends_with: String
  emailed: Boolean
  emailed_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

type Country {
  id: ID!
  name: String!
  slug: String!
  type: String!
  isoCode: String
  cities(
    where: CityWhereInput
    orderBy: CityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [City!]
  jobs(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Job!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  type_ASC
  type_DESC
  isoCode_ASC
  isoCode_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CountryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  isoCode: String
  isoCode_not: String
  isoCode_in: [String!]
  isoCode_not_in: [String!]
  isoCode_lt: String
  isoCode_lte: String
  isoCode_gt: String
  isoCode_gte: String
  isoCode_contains: String
  isoCode_not_contains: String
  isoCode_starts_with: String
  isoCode_not_starts_with: String
  isoCode_ends_with: String
  isoCode_not_ends_with: String
  cities_every: CityWhereInput
  cities_some: CityWhereInput
  cities_none: CityWhereInput
  jobs_every: JobWhereInput
  jobs_some: JobWhereInput
  jobs_none: JobWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
}

scalar DateTime

type Job {
  id: ID!
  title: String!
  slug: String!
  commitment: Commitment!
  cities(
    where: CityWhereInput
    orderBy: CityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [City!]
  countries(
    where: CountryWhereInput
    orderBy: CountryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Country!]
  remotes(
    where: RemoteWhereInput
    orderBy: RemoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Remote!]
  description: String
  applyUrl: String
  company: Company
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  isPublished: Boolean
  isFeatured: Boolean
  locationNames: String
  userEmail: String
  postedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input JobInput {
  companySlug: String!
  jobSlug: String!
}

enum JobOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  applyUrl_ASC
  applyUrl_DESC
  isPublished_ASC
  isPublished_DESC
  isFeatured_ASC
  isFeatured_DESC
  locationNames_ASC
  locationNames_DESC
  userEmail_ASC
  userEmail_DESC
  postedAt_ASC
  postedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input JobsInput {
  type: String
  slug: String
}

input JobWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  commitment: CommitmentWhereInput
  cities_every: CityWhereInput
  cities_some: CityWhereInput
  cities_none: CityWhereInput
  countries_every: CountryWhereInput
  countries_some: CountryWhereInput
  countries_none: CountryWhereInput
  remotes_every: RemoteWhereInput
  remotes_some: RemoteWhereInput
  remotes_none: RemoteWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  applyUrl: String
  applyUrl_not: String
  applyUrl_in: [String!]
  applyUrl_not_in: [String!]
  applyUrl_lt: String
  applyUrl_lte: String
  applyUrl_gt: String
  applyUrl_gte: String
  applyUrl_contains: String
  applyUrl_not_contains: String
  applyUrl_starts_with: String
  applyUrl_not_starts_with: String
  applyUrl_ends_with: String
  applyUrl_not_ends_with: String
  company: CompanyWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  isPublished: Boolean
  isPublished_not: Boolean
  isFeatured: Boolean
  isFeatured_not: Boolean
  locationNames: String
  locationNames_not: String
  locationNames_in: [String!]
  locationNames_not_in: [String!]
  locationNames_lt: String
  locationNames_lte: String
  locationNames_gt: String
  locationNames_gte: String
  locationNames_contains: String
  locationNames_not_contains: String
  locationNames_starts_with: String
  locationNames_not_starts_with: String
  locationNames_ends_with: String
  locationNames_not_ends_with: String
  userEmail: String
  userEmail_not: String
  userEmail_in: [String!]
  userEmail_not_in: [String!]
  userEmail_lt: String
  userEmail_lte: String
  userEmail_gt: String
  userEmail_gte: String
  userEmail_contains: String
  userEmail_not_contains: String
  userEmail_starts_with: String
  userEmail_not_starts_with: String
  userEmail_ends_with: String
  userEmail_not_ends_with: String
  postedAt: DateTime
  postedAt_not: DateTime
  postedAt_in: [DateTime!]
  postedAt_not_in: [DateTime!]
  postedAt_lt: DateTime
  postedAt_lte: DateTime
  postedAt_gt: DateTime
  postedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

type Location {
  id: ID!
  slug: String!
  name: String!
  type: String!
}

input LocationInput {
  slug: String!
}

input LocationsInput {
  value: String!
}

type Mutation {
  subscribe(input: SubscribeInput!): User!
  postJob(input: PostJobInput!): Job!
  updateJob(input: UpdateJobInput!, adminSecret: String!): Job!
  updateCompany(input: UpdateCompanyInput!, adminSecret: String!): Company!
}

input PostJobInput {
  title: String!
  commitmentId: ID!
  companyName: String!
  locationNames: String!
  userEmail: String!
  description: String!
  applyUrl: String!
}

type Query {
  jobs(input: JobsInput): [Job!]!
  job(input: JobInput!): Job!
  locations(input: LocationsInput!): [Location!]!
  city(input: LocationInput!): City!
  country(input: LocationInput!): Country!
  remote(input: LocationInput!): Remote!
  commitments: [Commitment!]!
  cities: [City!]!
  countries: [Country!]!
  remotes: [Remote!]!
  companies: [Company!]!
}

type Remote {
  id: ID!
  name: String!
  slug: String!
  type: String!
  jobs(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Job!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum RemoteOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input RemoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  jobs_every: JobWhereInput
  jobs_some: JobWhereInput
  jobs_none: JobWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RemoteWhereInput!]
  OR: [RemoteWhereInput!]
  NOT: [RemoteWhereInput!]
}

input SubscribeInput {
  name: String!
  email: String!
}

type Tag {
  id: ID!
  name: String!
  slug: String!
  jobs(
    where: JobWhereInput
    orderBy: JobOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Job!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  jobs_every: JobWhereInput
  jobs_some: JobWhereInput
  jobs_none: JobWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input UpdateCompanyInput {
  id: ID!
  logoUrl: String!
}

input UpdateJobInput {
  id: ID!
  description: String!
}

type User {
  id: ID!
  name: String
  email: String!
  subscribe: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}
