schema {
  query: Foo
}

type Foo {
  _: Boolean
  self: Boolean
  super: Boolean
  crate: Boolean
  async: Boolean
  bar(id: UUID!): Bar

  fieldWithKeywordArg(where: Int): [Int!]!

  recursiveInputField(
    recursive: SelfRecursiveInput
    recursive2: RecursiveInputParent
  ): Boolean

  fieldWithStringArg(input: String!): Int

  clashes: FieldNameClashes
}

type Bar {
  id: UUID!
  name: String
}

scalar UUID

enum States {
  OPEN
  CLOSED
  DELETED
}

input SelfRecursiveInput {
  recurse: SelfRecursiveInput
}

input RecursiveInputParent {
  recurse: RecursiveInputChild
}

input RecursiveInputChild {
  recurse: RecursiveInputParent
}

type FlattenableEnums {
  states: [States]
}

# Specifically including these here to make sure we can handle that
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

type FieldNameClashes {
  str: String
  bool: Boolean
  i32: Int
  u32: Int
}
